{"version":3,"file":"static/chunks/pages/logcat-bdc3e0255f6823ff.js","mappings":"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","sources":["webpack://_N_E/?f808","webpack://_N_E/./src/pages/logcat.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/logcat\",\n      function () {\n        return require(\"private-next-pages/logcat.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/logcat\"])\n      });\n    }\n  ","import { ICommandBarItemProps, Stack, StackItem } from \"@fluentui/react\";\nimport { makeStyles, mergeClasses, shorthands } from \"@griffel/react\";\nimport { AndroidLogEntry, AndroidLogPriority, Logcat } from '@yume-chan/android-bin';\nimport { AbortController, ReadableStream, WritableStream } from '@yume-chan/stream-extra';\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\n\nimport { CommandBar, Grid, GridColumn, GridHeaderProps, GridRowProps } from \"../components\";\nimport { GlobalState } from \"../state\";\nimport { Icons, RouteStackProps, useStableCallback } from \"../utils\";\n\nconst LINE_HEIGHT = 32;\n\nconst useClasses = makeStyles({\n    grid: {\n        height: '100%',\n        marginLeft: '-16px',\n        marginRight: '-16px',\n    },\n    header: {\n        textAlign: 'center',\n        lineHeight: `${LINE_HEIGHT}px`,\n    },\n    row: {\n        '&:hover': {\n            backgroundColor: '#f3f2f1',\n        },\n    },\n    selected: {\n        backgroundColor: '#edebe9',\n    },\n    code: {\n        fontFamily: 'monospace',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        lineHeight: LINE_HEIGHT + 'px',\n        cursor: 'default',\n        ...shorthands.overflow('hidden'),\n    },\n});\n\nexport interface Column extends GridColumn {\n    title: string;\n}\n\nexport interface LogRow extends AndroidLogEntry {\n    timeString?: string;\n}\n\nconst state = makeAutoObservable({\n    logcat: undefined as Logcat | undefined,\n    running: false,\n    buffer: [] as LogRow[],\n    flushRequested: false,\n    list: [] as LogRow[],\n    count: 0,\n    stream: undefined as ReadableStream<AndroidLogEntry> | undefined,\n    stopSignal: undefined as AbortController | undefined,\n    selectedCount: 0,\n    animationFrameId: undefined as number | undefined,\n    start() {\n        if (this.running) {\n            return;\n        }\n\n        // Logcat always starts from beginning,\n        // so don't append.\n        this.list = [];\n\n        this.running = true;\n        this.stream = this.logcat!.binary();\n        this.stopSignal = new AbortController();\n        this.stream\n            .pipeTo(\n                new WritableStream({\n                    write: (chunk) => {\n                        this.buffer.push(chunk);\n                        if (!this.flushRequested) {\n                            this.flushRequested = true;\n                            requestAnimationFrame(this.flush);\n                        }\n                    },\n                }),\n                { signal: this.stopSignal.signal }\n            )\n            .catch(() => { });\n    },\n    flush() {\n        this.list.push(...this.buffer);\n        this.buffer = [];\n        this.flushRequested = false;\n    },\n    stop() {\n        this.running = false;\n        this.stopSignal!.abort();\n    },\n    clear() {\n        this.list = [];\n        this.selectedCount = 0;\n    },\n    get empty() {\n        return this.list.length === 0;\n    },\n    get commandBar(): ICommandBarItemProps[] {\n        return [\n            this.running ? {\n                key: \"stop\",\n                text: \"Stop\",\n                iconProps: { iconName: Icons.Stop },\n                onClick: () => this.stop(),\n            } : {\n                key: \"start\",\n                text: \"Start\",\n                disabled: this.logcat === undefined,\n                iconProps: { iconName: Icons.Play },\n                onClick: () => this.start(),\n            },\n            {\n                key: 'clear',\n                text: 'Clear',\n                disabled: this.empty,\n                iconProps: { iconName: Icons.Delete },\n                onClick: () => this.clear(),\n            },\n            {\n                key: 'copyAll',\n                text: 'Copy Rows',\n                disabled: this.selectedCount === 0,\n                iconProps: { iconName: Icons.Copy },\n                onClick: () => {\n\n                }\n            },\n            {\n                key: 'copyText',\n                text: 'Copy Messages',\n                disabled: this.selectedCount === 0,\n                iconProps: { iconName: Icons.Copy },\n                onClick: () => {\n\n                }\n            }\n        ];\n    },\n    get columns(): Column[] {\n        return [\n            {\n                width: 200,\n                title: 'Time',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n                    if (!item.timeString) {\n                        item.timeString = new Date(item.second * 1000).toISOString();\n                    }\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.timeString}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 60,\n                title: 'PID',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.pid}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 60,\n                title: 'TID',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.tid}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 80,\n                title: 'Priority',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {AndroidLogPriority[item.priority]}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 300,\n                title: 'Tag',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.tag}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 300,\n                flexGrow: 1,\n                title: 'Message',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.message}\n                        </div>\n                    );\n                }\n            },\n        ];\n    },\n}, {\n    buffer: false,\n    list: observable.shallow,\n    flush: action.bound,\n});\n\nautorun(() => {\n    if (GlobalState.device) {\n        runInAction(() => {\n            state.logcat = new Logcat(GlobalState.device!);\n        });\n    } else {\n        runInAction(() => {\n            state.logcat = undefined;\n            if (state.running) {\n                state.stop();\n            }\n        });\n    }\n});\n\nconst Header = observer(function Header({\n    className,\n    columnIndex,\n    ...rest\n}: GridHeaderProps) {\n    const classes = useClasses();\n\n    return (\n        <div className={mergeClasses(className, classes.header)} {...rest}>\n            {state.columns[columnIndex].title}\n        </div>\n    );\n});\n\nconst Row = function Row({\n    className,\n    rowIndex,\n    ...rest\n}: GridRowProps) {\n    const item = state.list[rowIndex];\n    const classes = useClasses();\n\n    const handleClick = useStableCallback(() => {\n        runInAction(() => {\n        });\n    });\n\n    return (\n        <div\n            className={mergeClasses(\n                className,\n                classes.row,\n            )}\n            onClick={handleClick}\n            {...rest}\n        />\n    );\n};\n\nconst LogcatPage: NextPage = () => {\n    const classes = useClasses();\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Logcat - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBar} />\n\n            <StackItem grow>\n                <Grid\n                    className={classes.grid}\n                    rowCount={state.list.length}\n                    rowHeight={LINE_HEIGHT}\n                    columns={state.columns}\n                    HeaderComponent={Header}\n                    RowComponent={Row}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(LogcatPage);\n"],"names":["window","__NEXT_P","push","useClasses","makeStyles","grid","height","marginLeft","marginRight","header","textAlign","lineHeight","row","backgroundColor","selected","code","fontFamily","textOverflow","whiteSpace","LINE_HEIGHT","cursor","shorthands","state","makeAutoObservable","logcat","undefined","running","buffer","flushRequested","list","count","stream","stopSignal","selectedCount","animationFrameId","start","this","binary","AbortController","pipeTo","WritableStream","write","chunk","requestAnimationFrame","flush","signal","catch","stop","abort","clear","empty","length","commandBar","key","text","iconProps","iconName","Icons","onClick","disabled","columns","width","title","CellComponent","rowIndex","className","columnIndex","rest","item","timeString","Date","second","toISOString","classes","div","mergeClasses","pid","tid","AndroidLogPriority","priority","tag","flexGrow","message","observable","action","autorun","GlobalState","runInAction","Logcat","Header","observer","Row","handleClick","useStableCallback","Stack","RouteStackProps","Head","CommandBar","items","StackItem","grow","Grid","rowCount","rowHeight","HeaderComponent","RowComponent"],"sourceRoot":""}