{"version":3,"file":"static/chunks/710-536ed41341e76525.js","mappings":"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CA,MACA,MACA,IACA,MACA,KACA,QACA,MACA,MACA,OACA,KACA,YACA,MACA,MACA,IACA,MACA,MACA,KACA,MACA,WACA,MACA,UACA,UACA,YACA,KACA,SACA,MACA,IACA,MACA,OACA,aACA,MACA,MACA,KACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,QACA,OACA,MACA,OACA,KACA,OACA,MACA,SACA,MACA,IACA,OACA,MACA,OACA,MACA,MACA,MACA,MACA,IACA,MACA,OACA,WACA,SACA,KACA,SACA,WACA,QACA,OACA,KACA,MACA,MACA,MACA,KACA,MACA,MACA,OACA,YACA,IACA,MACA,QACA,MACA,OACA,OACA,OACA,OACA,QACA,KACA,KACA,MACA,KACA,UACA,MACA,SACA,OACA,OACA,MACA,KACA,KACA,MACA,IACA,OACA,KACA,MACA,KACA,MACA,KACA,MACA,OACA,OACA,OACA,QACA,MACA,WACA,MACA,MACA,MACA,OACA,OACA,IACA,OACA,QACA,MACA,aACA,aACA,SACA,OACA,OACA,KACA,QACA,MACA,WACA,QACA,MACA,MACA,MACA,MACA,UACA,MACA,MACA,OACA,MACA,KACA,KACA,MACA,MACA,UACA,MACA,OACA,QACA,OACA,MACA,OACA,OACA,OACA,MACA,QAGJK,QAAS,CACPL,WAAY,CAAC,QAGfM,IAAK,CACHN,WAAY,CAAC,QAEfO,cAAe,GACfC,OAAQ,GACRC,eAAgB,GAChBC,KAAM,CACJV,WAAY,CAAC,MAAO,OAAQ,OAAQ,SAEtCW,KAAM,CACJX,WAAY,CAAC,MAAO,OAAQ,SAE9BY,MAAO,CACLZ,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,QAE3Ca,IAAK,CACHb,WAAY,CAAC,cAAe,YAAa,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,QAEtFc,OAAQ,GACRC,KAAM,CACJf,WAAY,CAAC,MAAO,MAAO,SAE7BgB,MAAO,CACLhB,WAAY,CAAC,QAAS,SAExBiB,KAAM,GACNC,YAAa,GACbC,KAA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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/next@12.2.0_react-dom@17.0.2+react@17.0.2/node_modules/next/dist/compiled/path-browserify/index.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react-file-type-icons@8.6.10_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/react-file-type-icons/src/FileIconType.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react-file-type-icons@8.6.10_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/react-file-type-icons/src/FileTypeIconMap.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react-file-type-icons@8.6.10_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/react-file-type-icons/src/getFileTypeIconProps.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react-file-type-icons@8.6.10_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/react-file-type-icons/src/initializeFileTypeIcons.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Breadcrumb/Breadcrumb.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Breadcrumb/Breadcrumb.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Breadcrumb/Breadcrumb.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsList.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedList.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupSpacer.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.8.3_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/utilities/src/getNativeElementProps.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Check/Check.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Check/Check.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Check/Check.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRow.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsHeader.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRowCheck.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRowCheck.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsHeader.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/utilities/src/utilities/dragdrop/DragDropHelper.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsColumn.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsColumn.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsColumn.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsHeader.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsHeader.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRowFields.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRow.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRow.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Spinner/Spinner.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/utilities/src/utilities/selection/SelectionZone.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedList.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupHeader.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Spinner/Spinner.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Spinner/Spinner.styles.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Spinner/Spinner.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupHeader.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupHeader.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupShowAll.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupShowAll.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupShowAll.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupFooter.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupFooter.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupFooter.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/List/List.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/List/List.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedListSection.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedList.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedList.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/utilities/src/utilities/decorators/withViewport.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/utilities/src/utilities/groupedList/GroupedListUtility.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsList.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsList.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Shimmer/Shimmer.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsList.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Shimmer/Shimmer.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerLine/ShimmerLine.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerLine/ShimmerLine.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerLine/ShimmerLine.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerGap/ShimmerGap.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerGap/ShimmerGap.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerGap/ShimmerGap.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerCircle/ShimmerCircle.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerCircle/ShimmerCircle.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerCircle/ShimmerCircle.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Shimmer/Shimmer.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Shimmer/Shimmer.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/ShimmeredDetailsList.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/ShimmeredDetailsList.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/DetailsList/ShimmeredDetailsList.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.8.3_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/utilities/src/AutoScroll.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/MarqueeSelection/MarqueeSelection.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/MarqueeSelection/MarqueeSelection.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.77.3_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/MarqueeSelection/MarqueeSelection.styles.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.8.3_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/utilities/src/DelayedRender.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.8.3_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/utilities/lib/src/dom/getRect.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.8.3_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/utilities/lib/src/selection/Selection.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.8.3_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/utilities/lib/src/selection/Selection.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@swc+helpers@0.4.2/node_modules/@swc/helpers/src/_async_iterator.mjs","webpack://_N_E/../../common/temp/node_modules/.pnpm/@swc+helpers@0.4.2/node_modules/@swc/helpers/src/_create_class.mjs"],"sourcesContent":["(function(){\"use strict\";var e={113:function(e){function assertPath(e){if(typeof e!==\"string\"){throw new TypeError(\"Path must be a string. Received \"+JSON.stringify(e))}}function normalizeStringPosix(e,r){var t=\"\";var i=0;var n=-1;var a=0;var f;for(var l=0;l<=e.length;++l){if(l<e.length)f=e.charCodeAt(l);else if(f===47)break;else f=47;if(f===47){if(n===l-1||a===1){}else if(n!==l-1&&a===2){if(t.length<2||i!==2||t.charCodeAt(t.length-1)!==46||t.charCodeAt(t.length-2)!==46){if(t.length>2){var s=t.lastIndexOf(\"/\");if(s!==t.length-1){if(s===-1){t=\"\";i=0}else{t=t.slice(0,s);i=t.length-1-t.lastIndexOf(\"/\")}n=l;a=0;continue}}else if(t.length===2||t.length===1){t=\"\";i=0;n=l;a=0;continue}}if(r){if(t.length>0)t+=\"/..\";else t=\"..\";i=2}}else{if(t.length>0)t+=\"/\"+e.slice(n+1,l);else t=e.slice(n+1,l);i=l-n-1}n=l;a=0}else if(f===46&&a!==-1){++a}else{a=-1}}return t}function _format(e,r){var t=r.dir||r.root;var i=r.base||(r.name||\"\")+(r.ext||\"\");if(!t){return i}if(t===r.root){return t+i}return t+e+i}var r={resolve:function resolve(){var e=\"\";var r=false;var t;for(var i=arguments.length-1;i>=-1&&!r;i--){var n;if(i>=0)n=arguments[i];else{if(t===undefined)t=\"\";n=t}assertPath(n);if(n.length===0){continue}e=n+\"/\"+e;r=n.charCodeAt(0)===47}e=normalizeStringPosix(e,!r);if(r){if(e.length>0)return\"/\"+e;else return\"/\"}else if(e.length>0){return e}else{return\".\"}},normalize:function normalize(e){assertPath(e);if(e.length===0)return\".\";var r=e.charCodeAt(0)===47;var t=e.charCodeAt(e.length-1)===47;e=normalizeStringPosix(e,!r);if(e.length===0&&!r)e=\".\";if(e.length>0&&t)e+=\"/\";if(r)return\"/\"+e;return e},isAbsolute:function isAbsolute(e){assertPath(e);return e.length>0&&e.charCodeAt(0)===47},join:function join(){if(arguments.length===0)return\".\";var e;for(var t=0;t<arguments.length;++t){var i=arguments[t];assertPath(i);if(i.length>0){if(e===undefined)e=i;else e+=\"/\"+i}}if(e===undefined)return\".\";return r.normalize(e)},relative:function relative(e,t){assertPath(e);assertPath(t);if(e===t)return\"\";e=r.resolve(e);t=r.resolve(t);if(e===t)return\"\";var i=1;for(;i<e.length;++i){if(e.charCodeAt(i)!==47)break}var n=e.length;var a=n-i;var f=1;for(;f<t.length;++f){if(t.charCodeAt(f)!==47)break}var l=t.length;var s=l-f;var o=a<s?a:s;var u=-1;var h=0;for(;h<=o;++h){if(h===o){if(s>o){if(t.charCodeAt(f+h)===47){return t.slice(f+h+1)}else if(h===0){return t.slice(f+h)}}else if(a>o){if(e.charCodeAt(i+h)===47){u=h}else if(h===0){u=0}}break}var c=e.charCodeAt(i+h);var v=t.charCodeAt(f+h);if(c!==v)break;else if(c===47)u=h}var g=\"\";for(h=i+u+1;h<=n;++h){if(h===n||e.charCodeAt(h)===47){if(g.length===0)g+=\"..\";else g+=\"/..\"}}if(g.length>0)return g+t.slice(f+u);else{f+=u;if(t.charCodeAt(f)===47)++f;return t.slice(f)}},_makeLong:function _makeLong(e){return e},dirname:function dirname(e){assertPath(e);if(e.length===0)return\".\";var r=e.charCodeAt(0);var t=r===47;var i=-1;var n=true;for(var a=e.length-1;a>=1;--a){r=e.charCodeAt(a);if(r===47){if(!n){i=a;break}}else{n=false}}if(i===-1)return t?\"/\":\".\";if(t&&i===1)return\"//\";return e.slice(0,i)},basename:function basename(e,r){if(r!==undefined&&typeof r!==\"string\")throw new TypeError('\"ext\" argument must be a string');assertPath(e);var t=0;var i=-1;var n=true;var a;if(r!==undefined&&r.length>0&&r.length<=e.length){if(r.length===e.length&&r===e)return\"\";var f=r.length-1;var l=-1;for(a=e.length-1;a>=0;--a){var s=e.charCodeAt(a);if(s===47){if(!n){t=a+1;break}}else{if(l===-1){n=false;l=a+1}if(f>=0){if(s===r.charCodeAt(f)){if(--f===-1){i=a}}else{f=-1;i=l}}}}if(t===i)i=l;else if(i===-1)i=e.length;return e.slice(t,i)}else{for(a=e.length-1;a>=0;--a){if(e.charCodeAt(a)===47){if(!n){t=a+1;break}}else if(i===-1){n=false;i=a+1}}if(i===-1)return\"\";return e.slice(t,i)}},extname:function extname(e){assertPath(e);var r=-1;var t=0;var i=-1;var n=true;var a=0;for(var f=e.length-1;f>=0;--f){var l=e.charCodeAt(f);if(l===47){if(!n){t=f+1;break}continue}if(i===-1){n=false;i=f+1}if(l===46){if(r===-1)r=f;else if(a!==1)a=1}else if(r!==-1){a=-1}}if(r===-1||i===-1||a===0||a===1&&r===i-1&&r===t+1){return\"\"}return e.slice(r,i)},format:function format(e){if(e===null||typeof e!==\"object\"){throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof e)}return _format(\"/\",e)},parse:function parse(e){assertPath(e);var r={root:\"\",dir:\"\",base:\"\",ext:\"\",name:\"\"};if(e.length===0)return r;var t=e.charCodeAt(0);var i=t===47;var n;if(i){r.root=\"/\";n=1}else{n=0}var a=-1;var f=0;var l=-1;var s=true;var o=e.length-1;var u=0;for(;o>=n;--o){t=e.charCodeAt(o);if(t===47){if(!s){f=o+1;break}continue}if(l===-1){s=false;l=o+1}if(t===46){if(a===-1)a=o;else if(u!==1)u=1}else if(a!==-1){u=-1}}if(a===-1||l===-1||u===0||u===1&&a===l-1&&a===f+1){if(l!==-1){if(f===0&&i)r.base=r.name=e.slice(1,l);else r.base=r.name=e.slice(f,l)}}else{if(f===0&&i){r.name=e.slice(1,a);r.base=e.slice(1,l)}else{r.name=e.slice(f,a);r.base=e.slice(f,l)}r.ext=e.slice(a,l)}if(f>0)r.dir=e.slice(0,f-1);else if(i)r.dir=\"/\";return r},sep:\"/\",delimiter:\":\",win32:null,posix:null};r.posix=r;e.exports=r}};var r={};function __nccwpck_require__(t){var i=r[t];if(i!==undefined){return i.exports}var n=r[t]={exports:{}};var a=true;try{e[t](n,n.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return n.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(113);module.exports=t})();","/**\n * Enumerates special file type icons that do not map to any file extensions.\n * For example, the 'pptx' icon maps to the extensions 'ppt', 'pptm', 'pptx',\n * but the 'folder' icon does not map to any extensions and should be obtained\n * via this enum.\n */\n\nexport enum FileIconType {\n  docset = 1, // Start at 1 so it will evaluate as \"truthy\"\n  folder = 2,\n  genericFile = 3,\n  listItem = 4,\n  sharedFolder = 5,\n  multiple = 6,\n  stream = 7,\n  news = 8,\n  desktopFolder = 9,\n  documentsFolder = 10,\n  picturesFolder = 11,\n  linkedFolder = 12,\n  list = 13,\n  form = 14,\n  sway = 15,\n  playlist = 16,\n}\n\nexport type FileIconTypeInput = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;\n","/**\n * Enumeration of icon file names, and what extensions they map to.\n * Please keep items alphabetical. Items without extensions may require specific logic in the code to map.\n * Always use getFileTypeIconProps to get the most up-to-date icon at the right pixel density.\n */\nexport const FileTypeIconMap: { [key: string]: { extensions?: string[] } } = {\n  accdb: {\n    extensions: ['accdb', 'mdb'],\n  },\n  archive: {\n    extensions: ['7z', 'ace', 'arc', 'arj', 'dmg', 'gz', 'iso', 'lzh', 'pkg', 'rar', 'sit', 'tgz', 'tar', 'z'],\n  },\n  audio: {\n    extensions: [\n      'aif',\n      'aiff',\n      'aac',\n      'alac',\n      'amr',\n      'ape',\n      'au',\n      'awb',\n      'dct',\n      'dss',\n      'dvf',\n      'flac',\n      'gsm',\n      'm4a',\n      'm4p',\n      'mid',\n      'mmf',\n      'mp3',\n      'oga',\n      'ra',\n      'rm',\n      'wav',\n      'wma',\n      'wv',\n    ],\n  },\n  calendar: {\n    extensions: ['ical', 'icalendar', 'ics', 'ifb', 'vcs'],\n  },\n  code: {\n    extensions: [\n      'abap',\n      'ada',\n      'adp',\n      'ahk',\n      'as',\n      'as3',\n      'asc',\n      'ascx',\n      'asm',\n      'asp',\n      'awk',\n      'bash',\n      'bash_login',\n      'bash_logout',\n      'bash_profile',\n      'bashrc',\n      'bat',\n      'bib',\n      'bsh',\n      'build',\n      'builder',\n      'c',\n      'cbl',\n      'c++',\n      'capfile',\n      'cc',\n      'cfc',\n      'cfm',\n      'cfml',\n      'cl',\n      'clj',\n      'cls',\n      'cmake',\n      'cmd',\n      'coffee',\n      'config',\n      'cpp',\n      'cpt',\n      'cpy',\n      'cs',\n      'cshtml',\n      'cson',\n      'csproj',\n      'css',\n      'ctp',\n      'cxx',\n      'd',\n      'ddl',\n      'di',\n      'disco',\n      'dml',\n      'dtd',\n      'dtml',\n      'el',\n      'emakefile',\n      'erb',\n      'erl',\n      'f',\n      'f90',\n      'f95',\n      'fs',\n      'fsi',\n      'fsscript',\n      'fsx',\n      'gemfile',\n      'gemspec',\n      'gitconfig',\n      'go',\n      'groovy',\n      'gvy',\n      'h',\n      'h++',\n      'haml',\n      'handlebars',\n      'hbs',\n      'hcp',\n      'hh',\n      'hpp',\n      'hrl',\n      'hs',\n      'htc',\n      'hxx',\n      'idl',\n      'iim',\n      'inc',\n      'inf',\n      'ini',\n      'inl',\n      'ipp',\n      'irbrc',\n      'jade',\n      'jav',\n      'java',\n      'js',\n      'json',\n      'jsp',\n      'jsproj',\n      'jsx',\n      'l',\n      'less',\n      'lhs',\n      'lisp',\n      'log',\n      'lst',\n      'ltx',\n      'lua',\n      'm',\n      'mak',\n      'make',\n      'manifest',\n      'master',\n      'md',\n      'markdn',\n      'markdown',\n      'mdown',\n      'mkdn',\n      'ml',\n      'mli',\n      'mll',\n      'mly',\n      'mm',\n      'mud',\n      'nfo',\n      'opml',\n      'osascript',\n      'p',\n      'pas',\n      'patch',\n      'php',\n      'php2',\n      'php3',\n      'php4',\n      'php5',\n      'phtml',\n      'pl',\n      'pm',\n      'pod',\n      'pp',\n      'profile',\n      'ps1',\n      'ps1xml',\n      'psd1',\n      'psm1',\n      'pss',\n      'pt',\n      'py',\n      'pyw',\n      'r',\n      'rake',\n      'rb',\n      'rbx',\n      'rc',\n      'rdf',\n      're',\n      'reg',\n      'rest',\n      'resw',\n      'resx',\n      'rhtml',\n      'rjs',\n      'rprofile',\n      'rpy',\n      'rss',\n      'rst',\n      'ruby',\n      'rxml',\n      's',\n      'sass',\n      'scala',\n      'scm',\n      'sconscript',\n      'sconstruct',\n      'script',\n      'scss',\n      'sgml',\n      'sh',\n      'shtml',\n      'sml',\n      'svn-base',\n      'swift',\n      'sql',\n      'sty',\n      'tcl',\n      'tex',\n      'textile',\n      'tld',\n      'tli',\n      'tmpl',\n      'tpl',\n      'vb',\n      'vi',\n      'vim',\n      'vmg',\n      'webpart',\n      'wsp',\n      'wsdl',\n      'xhtml',\n      'xoml',\n      'xsd',\n      'xslt',\n      'yaml',\n      'yaws',\n      'yml',\n      'zsh',\n    ],\n  },\n  contact: {\n    extensions: ['vcf'],\n  },\n  /*  css: {},  not broken out yet, snapping to 'code' for now */\n  csv: {\n    extensions: ['csv'],\n  },\n  desktopfolder: {},\n  docset: {},\n  documentfolder: {},\n  docx: {\n    extensions: ['doc', 'docm', 'docx', 'docb'],\n  },\n  dotx: {\n    extensions: ['dot', 'dotm', 'dotx'],\n  },\n  email: {\n    extensions: ['eml', 'msg', 'oft', 'ost', 'pst'],\n  },\n  exe: {\n    extensions: ['application', 'appref-ms', 'apk', 'app', 'appx', 'exe', 'ipa', 'msi', 'xap'],\n  },\n  folder: {},\n  font: {\n    extensions: ['ttf', 'otf', 'woff'],\n  },\n  fluid: {\n    extensions: ['fluid', 'loop'],\n  },\n  form: {},\n  genericfile: {},\n  html: {\n    extensions: ['htm', 'html', 'mht'],\n  },\n  ipynb: {\n    extensions: ['nnb', 'ipynb'],\n  },\n  link: {\n    extensions: ['lnk', 'link', 'url', 'website', 'webloc'],\n  },\n  linkedfolder: {},\n  listitem: {},\n  officescript: {\n    extensions: ['osts'],\n  },\n  splist: {},\n  model: {\n    extensions: [\n      '3ds',\n      '3mf',\n      'blend',\n      'cool',\n      'dae',\n      'df',\n      'dwfx',\n      'dwg',\n      'dxf',\n      'fbx',\n      'glb',\n      'gltf',\n      'holo',\n      'layer',\n      'layout',\n      'max',\n      'mcworld',\n      'mtl',\n      'obj',\n      'off',\n      'ply',\n      'skp',\n      'stp',\n      'stl',\n      't',\n      'thl',\n      'x',\n    ],\n  },\n  mpp: {\n    extensions: ['mpp'],\n  },\n  mpt: {\n    extensions: ['mpt'],\n  },\n  multiple: {},\n  one: {\n    // This represents a single Fluid Note, or a partial exported section/page of a notebook.\n    extensions: ['note', 'one'],\n  },\n  onetoc: {\n    extensions: ['ms-one-stub', 'onetoc', 'onetoc2', 'onepkg'], // This represents a complete, logical notebook.\n  },\n  pbiapp: {},\n  pdf: {\n    extensions: ['pdf'],\n  },\n  photo: {\n    extensions: [\n      'arw',\n      'bmp',\n      'cr2',\n      'crw',\n      'dic',\n      'dicm',\n      'dcm',\n      'dcm30',\n      'dcr',\n      'dds',\n      'dib',\n      'dng',\n      'erf',\n      'gif',\n      'heic',\n      'heif',\n      'ico',\n      'jfi',\n      'jfif',\n      'jif',\n      'jpe',\n      'jpeg',\n      'jpg',\n      'jxr',\n      'kdc',\n      'mrw',\n      'nef',\n      'orf',\n      'pct',\n      'pict',\n      'png',\n      'pns',\n      'psb',\n      'psd',\n      'raw',\n      'tga',\n      'tif',\n      'tiff',\n      'wdp',\n    ],\n  },\n  photo360: {},\n  picturesfolder: {},\n  potx: {\n    extensions: ['pot', 'potm', 'potx'],\n  },\n  powerbi: {\n    extensions: ['pbids', 'pbix'],\n  },\n  ppsx: {\n    extensions: ['pps', 'ppsm', 'ppsx'],\n  },\n  pptx: {\n    extensions: ['ppt', 'pptm', 'pptx', 'sldx', 'sldm'],\n  },\n  presentation: {\n    extensions: ['odp', 'gslides', 'key'],\n  },\n  pub: {\n    extensions: ['pub'],\n  },\n  spo: {\n    extensions: ['aspx', 'classifier'],\n  },\n  sponews: {},\n  spreadsheet: {\n    extensions: ['odc', 'ods', 'gsheet', 'numbers', 'tsv'],\n  },\n  stream: {},\n  rtf: {\n    extensions: ['epub', 'gdoc', 'odt', 'rtf', 'wri', 'pages'],\n  },\n  sharedfolder: {},\n  playlist: {},\n  sway: {},\n  sysfile: {\n    extensions: [\n      'bak',\n      'bin',\n      'cab',\n      'cache',\n      'cat',\n      'cer',\n      'class',\n      'dat',\n      'db',\n      'dbg',\n      'dl_',\n      'dll',\n      'ithmb',\n      'jar',\n      'kb',\n      'ldt',\n      'lrprev',\n      'pkpass',\n      'ppa',\n      'ppam',\n      'pdb',\n      'rom',\n      'thm',\n      'thmx',\n      'vsl',\n      'xla',\n      'xlam',\n      'xlb',\n      'xll',\n    ],\n  },\n  txt: {\n    extensions: ['dif', 'diff', 'readme', 'out', 'plist', 'properties', 'text', 'txt'],\n  },\n  vaultclosed: {},\n  vaultopen: {},\n  vector: {\n    extensions: [\n      'ai',\n      'ait',\n      'cvs',\n      'dgn',\n      'gdraw',\n      'pd',\n      'emf',\n      'eps',\n      'fig',\n      'ind',\n      'indd',\n      'indl',\n      'indt',\n      'indb',\n      'ps',\n      'svg',\n      'svgz',\n      'wmf',\n      'oxps',\n      'xps',\n      'xd',\n      'sketch',\n    ],\n  },\n  video: {\n    extensions: [\n      '3g2',\n      '3gp',\n      '3gp2',\n      '3gpp',\n      'asf',\n      'avi',\n      'dvr-ms',\n      'flv',\n      'm1v',\n      'm4v',\n      'mkv',\n      'mod',\n      'mov',\n      'mm4p',\n      'mp2',\n      'mp2v',\n      'mp4',\n      'mp4v',\n      'mpa',\n      'mpe',\n      'mpeg',\n      'mpg',\n      'mpv',\n      'mpv2',\n      'mts',\n      'ogg',\n      'qt',\n      'swf',\n      'ts',\n      'vob',\n      'webm',\n      'wlmp',\n      'wm',\n      'wmv',\n      'wmx',\n    ],\n  },\n  video360: {},\n  vsdx: {\n    extensions: ['vdx', 'vsd', 'vsdm', 'vsdx', 'vsw', 'vdw'],\n  },\n  vssx: {\n    extensions: ['vss', 'vssm', 'vssx'],\n  },\n  vstx: {\n    extensions: ['vst', 'vstm', 'vstx', 'vsx'],\n  },\n  whiteboard: {\n    extensions: ['whiteboard'],\n  },\n  xlsx: {\n    extensions: ['xlc', 'xls', 'xlsb', 'xlsm', 'xlsx', 'xlw'],\n  },\n  xltx: {\n    extensions: ['xlt', 'xltm', 'xltx'],\n  },\n  xml: {\n    extensions: ['xaml', 'xml', 'xsl'],\n  },\n  xsn: {\n    extensions: ['xsn'],\n  },\n  zip: {\n    extensions: ['zip'],\n  },\n};\n","import { FileTypeIconMap } from './FileTypeIconMap';\nimport { FileIconType } from './FileIconType';\nimport type { FileIconTypeInput } from './FileIconType';\n\nlet _extensionToIconName: { [key: string]: string };\n\nconst GENERIC_FILE = 'genericfile';\nconst FOLDER = 'folder';\nconst SHARED_FOLDER = 'sharedfolder';\nconst DOCSET_FOLDER = 'docset';\nconst LIST_ITEM = 'listitem';\nconst LIST = 'splist';\nconst MULTIPLE_ITEMS = 'multiple';\nconst NEWS = 'sponews';\nconst STREAM = 'stream';\nconst DESKTOP_FOLDER = 'desktopfolder';\nconst DOCUMENTS_FOLDER = 'documentfolder';\nconst PICTURES_FOLDER = 'picturesfolder';\nconst LINKED_FOLDER = 'linkedfolder';\nconst FORM = 'form';\nconst SWAY = 'sway';\nconst PLAYLIST = 'playlist';\n\nexport const DEFAULT_ICON_SIZE: FileTypeIconSize = 16;\nexport type FileTypeIconSize = 16 | 20 | 24 | 32 | 40 | 48 | 64 | 96;\nexport type ImageFileType = 'svg' | 'png';\n\nexport interface IFileTypeIconOptions {\n  /**\n   * The file extension, such as .pptx, for which you need an icon.\n   * For file type icons that are not associated with a file\n   * extension, such as folder, use the type property.\n   */\n  extension?: string;\n  /**\n   * The type of file type icon you need. Use this property for\n   * file type icons that are not associated with a file extension,\n   * such as folder.\n   */\n  type?: FileIconTypeInput;\n  /**\n   * The size of the icon in pixels.\n   * @default 16\n   */\n  size?: FileTypeIconSize;\n  /**\n   * The type of image file to use. Can be svg or png.\n   * @default 'svg'\n   */\n  imageFileType?: ImageFileType;\n}\n\n/**\n * This function returns properties for a file type icon given the IFileTypeIconOptions.\n * It accounts for different device pixel ratios. For example,\n * `getFileTypeIconProps({ extension: 'doc', size: 16, imageFileType: 'png' })`\n * will return `{ iconName: 'docx16_2x_png' }` if the `devicePixelRatio` is 2.\n * @param options\n */\nexport function getFileTypeIconProps(options: IFileTypeIconOptions): { iconName: string; 'aria-label'?: string } {\n  // First, obtain the base name of the icon using the extension or type.\n  let iconBaseName: string;\n  const { extension, type, size, imageFileType } = options;\n\n  iconBaseName = getFileTypeIconNameFromExtensionOrType(extension, type);\n  // Next, obtain the suffix using the icon size, user's device pixel ration, and\n  // preference for svg or png\n  let _size: FileTypeIconSize = size || DEFAULT_ICON_SIZE;\n  let suffix: string = getFileTypeIconSuffix(_size, imageFileType);\n\n  return { iconName: iconBaseName + suffix, 'aria-label': extension };\n}\n\nexport function getFileTypeIconNameFromExtensionOrType(\n  extension: string | undefined,\n  type: FileIconType | undefined,\n): string {\n  let iconBaseName: string | undefined;\n  if (extension) {\n    if (!_extensionToIconName) {\n      _extensionToIconName = {};\n\n      for (const iconName in FileTypeIconMap) {\n        if (FileTypeIconMap.hasOwnProperty(iconName)) {\n          const extensions = FileTypeIconMap[iconName].extensions;\n\n          if (extensions) {\n            for (let i = 0; i < extensions.length; i++) {\n              _extensionToIconName[extensions[i]] = iconName;\n            }\n          }\n        }\n      }\n    }\n\n    // Strip periods, force lowercase.\n    extension = extension.replace('.', '').toLowerCase();\n    return _extensionToIconName[extension] || GENERIC_FILE;\n  } else if (type) {\n    switch (type) {\n      case FileIconType.docset:\n        iconBaseName = DOCSET_FOLDER;\n        break;\n      case FileIconType.folder:\n        iconBaseName = FOLDER;\n        break;\n      case FileIconType.listItem:\n        iconBaseName = LIST_ITEM;\n        break;\n      case FileIconType.sharedFolder:\n        iconBaseName = SHARED_FOLDER;\n        break;\n      case FileIconType.stream:\n        iconBaseName = STREAM;\n        break;\n      case FileIconType.multiple:\n        iconBaseName = MULTIPLE_ITEMS;\n        break;\n      case FileIconType.news:\n        iconBaseName = NEWS;\n        break;\n      case FileIconType.desktopFolder:\n        iconBaseName = DESKTOP_FOLDER;\n        break;\n      case FileIconType.documentsFolder:\n        iconBaseName = DOCUMENTS_FOLDER;\n        break;\n      case FileIconType.picturesFolder:\n        iconBaseName = PICTURES_FOLDER;\n        break;\n      case FileIconType.linkedFolder:\n        iconBaseName = LINKED_FOLDER;\n        break;\n      case FileIconType.list:\n        iconBaseName = LIST;\n        break;\n      case FileIconType.form:\n        iconBaseName = FORM;\n        break;\n      case FileIconType.sway:\n        iconBaseName = SWAY;\n        break;\n      case FileIconType.playlist:\n        iconBaseName = PLAYLIST;\n        break;\n    }\n  }\n  return iconBaseName || GENERIC_FILE;\n}\n\nexport function getFileTypeIconSuffix(size: FileTypeIconSize, imageFileType: ImageFileType = 'svg'): string {\n  let devicePixelRatio: number = window.devicePixelRatio;\n  let devicePixelRatioSuffix = ''; // Default is 1x\n\n  // SVGs scale well, so you can generally use the default image.\n  // 1.5x is a special case where SVGs need a different image.\n  if (imageFileType === 'svg' && devicePixelRatio > 1 && devicePixelRatio <= 1.5) {\n    // Currently missing 1.5x SVGs at size 20, snap to 1x for now\n    if (size !== 20) {\n      devicePixelRatioSuffix = '_1.5x';\n    }\n  } else if (imageFileType === 'png') {\n    // To look good, PNGs should use a different image for higher device pixel ratios\n    if (devicePixelRatio > 1 && devicePixelRatio <= 1.5) {\n      // Currently missing 1.5x icons for size 20, snap to 2x for now\n      devicePixelRatioSuffix = size === 20 ? '_2x' : '_1.5x';\n    } else if (devicePixelRatio > 1.5 && devicePixelRatio <= 2) {\n      devicePixelRatioSuffix = '_2x';\n    } else if (devicePixelRatio > 2 && devicePixelRatio <= 3) {\n      devicePixelRatioSuffix = '_3x';\n    } else if (devicePixelRatio > 3) {\n      devicePixelRatioSuffix = '_4x';\n    }\n  }\n\n  return size + devicePixelRatioSuffix + '_' + imageFileType;\n}\n","import * as React from 'react';\nimport { registerIcons } from '@fluentui/style-utilities';\nimport { FileTypeIconMap } from './FileTypeIconMap';\nimport type { IIconOptions } from '@fluentui/style-utilities';\n\nconst PNG_SUFFIX = '_png';\nconst SVG_SUFFIX = '_svg';\n\nexport const DEFAULT_BASE_URL = 'https://spoppe-b.azureedge.net/files/fabric-cdn-prod_20220309.001/assets/item-types/';\nexport const ICON_SIZES: number[] = [16, 20, 24, 32, 40, 48, 64, 96];\n\nexport function initializeFileTypeIcons(baseUrl: string = DEFAULT_BASE_URL, options?: Partial<IIconOptions>): void {\n  ICON_SIZES.forEach((size: number) => {\n    _initializeIcons(baseUrl, size, options);\n  });\n}\n\nfunction _initializeIcons(baseUrl: string, size: number, options?: Partial<IIconOptions>): void {\n  const iconTypes: string[] = Object.keys(FileTypeIconMap);\n  const fileTypeIcons: { [key: string]: JSX.Element } = {};\n\n  iconTypes.forEach((type: string) => {\n    const baseUrlSizeType = baseUrl + size + '/' + type;\n    fileTypeIcons[type + size + PNG_SUFFIX] = <img src={baseUrlSizeType + '.png'} alt=\"\" />;\n    fileTypeIcons[type + size + SVG_SUFFIX] = <img src={baseUrlSizeType + '.svg'} alt=\"\" />;\n\n    // For high resolution screens, register additional versions\n    // Apply height=100% and width=100% to force image to fit into containing element\n\n    // SVGs scale well, so you can generally use the default image.\n    // 1.5x is a special case where both SVGs and PNGs need a different image.\n\n    fileTypeIcons[type + size + '_1.5x' + PNG_SUFFIX] = (\n      <img src={baseUrl + size + '_1.5x/' + type + '.png'} height=\"100%\" width=\"100%\" alt=\"\" />\n    );\n    fileTypeIcons[type + size + '_1.5x' + SVG_SUFFIX] = (\n      <img src={baseUrl + size + '_1.5x/' + type + '.svg'} height=\"100%\" width=\"100%\" alt=\"\" />\n    );\n\n    fileTypeIcons[type + size + '_2x' + PNG_SUFFIX] = (\n      <img src={baseUrl + size + '_2x/' + type + '.png'} height=\"100%\" width=\"100%\" alt=\"\" />\n    );\n    fileTypeIcons[type + size + '_3x' + PNG_SUFFIX] = (\n      <img src={baseUrl + size + '_3x/' + type + '.png'} height=\"100%\" width=\"100%\" alt=\"\" />\n    );\n    fileTypeIcons[type + size + '_4x' + PNG_SUFFIX] = (\n      <img src={baseUrl + size + '_4x/' + type + '.png'} height=\"100%\" width=\"100%\" alt=\"\" />\n    );\n  });\n\n  registerIcons(\n    {\n      fontFace: {},\n      style: {\n        width: size,\n        height: size,\n        overflow: 'hidden',\n      },\n      icons: fileTypeIcons,\n      mergeImageProps: true,\n    },\n    options,\n  );\n}\n","import * as React from 'react';\nimport {\n  initializeComponentRef,\n  getRTL,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n} from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IContextualMenuItem, IContextualMenuItemProps } from '../../ContextualMenu';\nimport type {\n  IBreadcrumbProps,\n  IBreadcrumbItem,\n  IDividerAsProps,\n  IBreadcrumbData,\n  IBreadcrumbStyleProps,\n  IBreadcrumbStyles,\n} from './Breadcrumb.types';\nimport { composeRenderFunction } from '../../Utilities';\n\n/** @deprecated Use IBreadcrumbData */\nexport type IBreadCrumbData = IBreadcrumbData;\n\nconst getClassNames = classNamesFunction<IBreadcrumbStyleProps, IBreadcrumbStyles>();\n\nconst OVERFLOW_KEY = 'overflow';\nconst nullFunction = (): null => null;\n\nconst nonActionableItemProps: Partial<IContextualMenuItemProps> = {\n  styles: props => {\n    const { theme } = props;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText,\n          },\n        },\n      },\n    };\n  },\n};\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport class BreadcrumbBase extends React.Component<IBreadcrumbProps, any> {\n  public static defaultProps: IBreadcrumbProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0,\n  };\n\n  private _classNames: IProcessedStyleSet<IBreadcrumbStyles>;\n  private _focusZone = React.createRef<FocusZone>();\n\n  constructor(props: IBreadcrumbProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._validateProps(props);\n  }\n\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    this._validateProps(this.props);\n\n    const {\n      onReduceData = this._onReduceData,\n      onGrowData = this._onGrowData,\n      overflowIndex,\n      maxDisplayedItems,\n      items,\n      className,\n      theme,\n      styles,\n    } = this.props;\n    const renderedItems = [...items];\n    const renderedOverflowItems = renderedItems.splice(overflowIndex!, renderedItems.length - maxDisplayedItems!);\n    const breadcrumbData: IBreadcrumbData = {\n      props: this.props,\n      renderedItems,\n      renderedOverflowItems,\n    };\n\n    this._classNames = getClassNames(styles, {\n      className,\n      theme: theme!,\n    });\n\n    return (\n      <ResizeGroup\n        onRenderData={this._onRenderBreadcrumb}\n        onReduceData={onReduceData}\n        onGrowData={onGrowData}\n        data={breadcrumbData}\n      />\n    );\n  }\n\n  /**\n   * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n   */\n  private _onReduceData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex } = data.props;\n\n    const movedItem = renderedItems[overflowIndex!];\n\n    if (!movedItem) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 1);\n\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  /**\n   * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n   * point.\n   */\n  private _onGrowData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex, maxDisplayedItems } = data.props;\n\n    renderedOverflowItems = [...renderedOverflowItems];\n    const movedItem = renderedOverflowItems.pop();\n\n    if (!movedItem || renderedItems.length >= maxDisplayedItems!) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 0, movedItem);\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  private _onRenderBreadcrumb = (data: IBreadcrumbData) => {\n    const {\n      ariaLabel,\n      dividerAs: DividerType = Icon as React.ElementType<IDividerAsProps>,\n      onRenderItem,\n      overflowAriaLabel,\n      overflowIndex,\n      onRenderOverflowIcon,\n      overflowButtonAs,\n    } = data.props;\n    const { renderedOverflowItems, renderedItems } = data;\n\n    const contextualItems = renderedOverflowItems.map(\n      (item): IContextualMenuItem => {\n        const isActionable = !!(item.onClick || item.href);\n        return {\n          text: item.text,\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\n          href: item.href,\n          disabled: !isActionable,\n          itemProps: isActionable ? undefined : nonActionableItemProps,\n        };\n      },\n    );\n\n    // Find index of last rendered item so the divider icon\n    // knows not to render on that item\n    const lastItemIndex = renderedItems.length - 1;\n    const hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n\n    const itemElements: JSX.Element[] = renderedItems.map((item, index) => {\n      let finalOnRenderItem = this._onRenderItem;\n\n      if (item.onRender) {\n        finalOnRenderItem = composeRenderFunction(item.onRender, finalOnRenderItem);\n      }\n\n      if (onRenderItem) {\n        finalOnRenderItem = composeRenderFunction(onRenderItem, finalOnRenderItem);\n      }\n\n      return (\n        <li className={this._classNames.listItem} key={item.key || String(index)}>\n          {finalOnRenderItem(item)}\n          {(index !== lastItemIndex || (hasOverflowItems && index === overflowIndex! - 1)) && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n              item={item}\n            />\n          )}\n        </li>\n      );\n    });\n\n    if (hasOverflowItems) {\n      const iconProps = !onRenderOverflowIcon ? { iconName: 'More' } : {};\n      const onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n      const OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton;\n\n      itemElements.splice(\n        overflowIndex!,\n        0,\n        <li className={this._classNames.overflow} key={OVERFLOW_KEY}>\n          <OverflowButton\n            className={this._classNames.overflowButton}\n            iconProps={iconProps}\n            role=\"button\"\n            aria-haspopup=\"true\"\n            ariaLabel={overflowAriaLabel}\n            onRenderMenuIcon={onRenderMenuIcon}\n            menuProps={{\n              items: contextualItems,\n              directionalHint: DirectionalHint.bottomLeftEdge,\n            }}\n          />\n          {overflowIndex !== lastItemIndex + 1 && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n              item={renderedOverflowItems[renderedOverflowItems.length - 1]}\n            />\n          )}\n        </li>,\n      );\n    }\n\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'className',\n    ]);\n\n    return (\n      <div className={this._classNames.root} role=\"navigation\" aria-label={ariaLabel} {...nativeProps}>\n        <FocusZone\n          componentRef={this._focusZone}\n          direction={FocusZoneDirection.horizontal}\n          {...this.props.focusZoneProps}\n        >\n          <ol className={this._classNames.list}>{itemElements}</ol>\n        </FocusZone>\n      </div>\n    );\n  };\n\n  private _onRenderItem = (item?: IBreadcrumbItem) => {\n    if (!item) {\n      return null;\n    }\n\n    const { as, href, onClick, isCurrentItem, text, onRenderContent, ...additionalProps } = item;\n\n    let finalOnRenderContent = defaultOnRenderCrumbContent;\n\n    if (onRenderContent) {\n      finalOnRenderContent = composeRenderFunction(onRenderContent, finalOnRenderContent);\n    }\n\n    if (this.props.onRenderItemContent) {\n      finalOnRenderContent = composeRenderFunction(this.props.onRenderItemContent, finalOnRenderContent);\n    }\n\n    if (onClick || href) {\n      return (\n        <Link\n          {...additionalProps}\n          as={as}\n          className={this._classNames.itemLink}\n          href={href}\n          aria-current={isCurrentItem ? 'page' : undefined}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={this._onBreadcrumbClicked.bind(this, item)}\n        >\n          <TooltipHost content={text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {finalOnRenderContent(item)}\n          </TooltipHost>\n        </Link>\n      );\n    } else {\n      const Tag = as || 'span';\n      return (\n        <Tag {...additionalProps} className={this._classNames.item}>\n          <TooltipHost content={text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {finalOnRenderContent(item)}\n          </TooltipHost>\n        </Tag>\n      );\n    }\n  };\n\n  private _onBreadcrumbClicked = (item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) => {\n    if (item.onClick) {\n      item.onClick(ev, item);\n    }\n  };\n\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n  private _validateProps(props: IBreadcrumbProps): void {\n    const { maxDisplayedItems, overflowIndex, items } = props;\n    if (\n      overflowIndex! < 0 ||\n      (maxDisplayedItems! > 1 && overflowIndex! > maxDisplayedItems! - 1) ||\n      (items.length > 0 && overflowIndex! > items.length - 1)\n    ) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  }\n}\n\nfunction defaultOnRenderCrumbContent(item?: IBreadcrumbItem): JSX.Element | null {\n  return item ? <>{item.text}</> : null;\n}\n","import {\n  HighContrastSelector,\n  ScreenWidthMaxMedium,\n  ScreenWidthMaxSmall,\n  ScreenWidthMinMedium,\n  getFocusStyle,\n  getScreenSelector,\n  getGlobalClassNames,\n  FontWeights,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport type { IRawStyle } from '../../Styling';\nimport type { IBreadcrumbStyleProps, IBreadcrumbStyles } from './Breadcrumb.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Breadcrumb',\n  list: 'ms-Breadcrumb-list',\n  listItem: 'ms-Breadcrumb-listItem',\n  chevron: 'ms-Breadcrumb-chevron',\n  overflow: 'ms-Breadcrumb-overflow',\n  overflowButton: 'ms-Breadcrumb-overflowButton',\n  itemLink: 'ms-Breadcrumb-itemLink',\n  item: 'ms-Breadcrumb-item',\n};\n\nconst SingleLineTextStyle: IRawStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n};\n\nconst overflowButtonFontSize = 16;\nconst chevronSmallFontSize = 8;\nconst itemLineHeight = 36;\nconst itemFontSize = 18;\n\nconst MinimumScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\nconst MediumScreenSelector = getScreenSelector(ScreenWidthMinMedium, ScreenWidthMaxMedium);\n\nexport const getStyles = (props: IBreadcrumbStyleProps): IBreadcrumbStyles => {\n  const { className, theme } = props;\n  const { palette, semanticColors, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // Tokens\n  const itemBackgroundHoveredColor = semanticColors.menuItemBackgroundHovered;\n  const itemBackgroundPressedColor = semanticColors.menuItemBackgroundPressed;\n  const itemTextColor = palette.neutralSecondary;\n  const itemTextFontWeight = FontWeights.regular;\n  const itemTextHoveredOrPressedColor = palette.neutralPrimary;\n  const itemLastChildTextColor = palette.neutralPrimary;\n  const itemLastChildTextFontWeight = FontWeights.semibold;\n  const chevronButtonColor = palette.neutralSecondary;\n  const overflowButtonColor = palette.neutralSecondary;\n\n  const lastChildItemStyles: IRawStyle = {\n    fontWeight: itemLastChildTextFontWeight,\n    color: itemLastChildTextColor,\n  };\n\n  const itemStateSelectors = {\n    ':hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundHoveredColor,\n      cursor: 'pointer',\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Highlight',\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n    ':active': {\n      backgroundColor: itemBackgroundPressedColor,\n      color: itemTextHoveredOrPressedColor,\n    },\n    '&:active:hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundPressedColor,\n    },\n    '&:active, &:hover, &:active:hover': {\n      textDecoration: 'none',\n    },\n  };\n\n  const commonItemStyles: IRawStyle = {\n    color: itemTextColor,\n    padding: '0 8px',\n    lineHeight: itemLineHeight,\n    fontSize: itemFontSize,\n    fontWeight: itemTextFontWeight,\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        margin: '11px 0 1px',\n      },\n      className,\n    ],\n\n    list: [\n      classNames.list,\n      {\n        whiteSpace: 'nowrap',\n        padding: 0,\n        margin: 0,\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n\n    listItem: [\n      classNames.listItem,\n      {\n        listStyleType: 'none',\n        margin: '0',\n        padding: '0',\n        display: 'flex',\n        position: 'relative',\n        alignItems: 'center',\n        selectors: {\n          '&:last-child .ms-Breadcrumb-itemLink': {\n            ...lastChildItemStyles,\n            [HighContrastSelector]: {\n              MsHighContrastAdjust: 'auto',\n              forcedColorAdjust: 'auto',\n            },\n          },\n          '&:last-child .ms-Breadcrumb-item': lastChildItemStyles,\n        },\n      },\n    ],\n\n    chevron: [\n      classNames.chevron,\n      {\n        color: chevronButtonColor,\n        fontSize: fonts.small.fontSize,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'WindowText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n          [MediumScreenSelector]: {\n            fontSize: chevronSmallFontSize,\n          },\n          [MinimumScreenSelector]: {\n            fontSize: chevronSmallFontSize,\n          },\n        },\n      },\n    ],\n\n    overflow: [\n      classNames.overflow,\n      {\n        position: 'relative',\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n\n    overflowButton: [\n      classNames.overflowButton,\n      getFocusStyle(theme),\n      SingleLineTextStyle,\n      {\n        fontSize: overflowButtonFontSize,\n        color: overflowButtonColor,\n        height: '100%',\n        cursor: 'pointer',\n        selectors: {\n          ...itemStateSelectors,\n          [MinimumScreenSelector]: {\n            padding: '4px 6px',\n          },\n          [MediumScreenSelector]: {\n            fontSize: fonts.mediumPlus.fontSize,\n          },\n        },\n      },\n    ],\n\n    itemLink: [\n      classNames.itemLink,\n      getFocusStyle(theme),\n      SingleLineTextStyle,\n      {\n        ...commonItemStyles,\n        selectors: {\n          ':focus': {\n            color: palette.neutralDark,\n          },\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            outline: `none`,\n          },\n          ...itemStateSelectors,\n        },\n      },\n    ],\n\n    item: [\n      classNames.item,\n      {\n        ...commonItemStyles,\n        selectors: {\n          ':hover': {\n            cursor: 'default',\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { BreadcrumbBase } from './Breadcrumb.base';\nimport { getStyles } from './Breadcrumb.styles';\nimport type { IBreadcrumbProps, IBreadcrumbStyleProps, IBreadcrumbStyles } from './Breadcrumb.types';\n\nexport const Breadcrumb: React.FunctionComponent<IBreadcrumbProps> = styled<\n  IBreadcrumbProps,\n  IBreadcrumbStyleProps,\n  IBreadcrumbStyles\n>(BreadcrumbBase, getStyles, undefined, { scope: 'Breadcrumb' });\n","import * as React from 'react';\nimport { DetailsListBase } from './DetailsList.base';\nimport { SelectionMode } from '../../Selection';\nimport { ScrollToMode } from '../../List';\nimport type { ISelection, ISelectionZoneProps } from '../../Selection';\nimport type { IRefObject, IBaseProps, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IDragDropEvents, IDragDropContext, IDragDropHelper, IDragDropOptions } from '../../DragDrop';\nimport type { IGroup, IGroupRenderProps, IGroupDividerProps, IGroupedListProps } from '../GroupedList/index';\nimport type { IDetailsRowProps, IDetailsRowBaseProps } from '../DetailsList/DetailsRow';\nimport type { IDetailsHeaderProps, IDetailsHeaderBaseProps } from './DetailsHeader';\nimport type { IDetailsFooterProps, IDetailsFooterBaseProps } from './DetailsFooter.types';\nimport type { IWithViewportProps, IViewport } from '../../utilities/decorators/withViewport';\nimport type { IList, IListProps } from '../../List';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport type { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport type {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnFilterIconProps,\n  IDetailsColumnFieldProps,\n} from './DetailsColumn.types';\nimport { IFocusZoneProps } from '../../FocusZone';\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list\n   * still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change,\n   * you can call this to force a re-evaluation. Be aware that this can be an expensive operation and should be\n   * done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Scroll to and focus the item at the given index. focusIndex will call scrollToIndex on the specified index.\n   *\n   * @param index - Index of item to scroll to\n   * @param forceIntoFirstElement - If true, focus will be set to the first focusable child element of the item rather\n   *  than the item itself.\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional setting to determine where in the window the item should be scrolled to\n   * when focused.\n   */\n  focusIndex: (\n    index: number,\n    forceIntoFirstElement?: boolean,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n\n  /**\n   * Use to programatically resize and/or reorder columns in the DetailsList.\n   * @param column - column to resize/reorder.\n   * @param options - includes width which is desired width in pixels the column should be resized\n   * to and newColumnIndex which is desired index position where the column should be moved to.\n   */\n  updateColumn: (column: IColumn, options: { width?: number; newColumnIndex?: number }) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListProps extends IBaseProps<IDetailsList>, IWithViewportProps {\n  /** Theme provided by a higher-order component. */\n  theme?: ITheme;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>;\n\n  /**\n   * Callback to access the IDetailsList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IDetailsList>;\n\n  /** A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes. */\n  setKey?: string;\n\n  /** The items to render. */\n  items: any[];\n\n  /** Set this to true to indicate that the items being displayed are placeholder data. */\n  isPlaceholderData?: boolean;\n\n  /** Properties to pass through to the List components being rendered. */\n  listProps?: IListProps;\n\n  /** Default index to set focus to once the items have rendered and the index exists. */\n  initialFocusedIndex?: number;\n\n  /** Class name to add to the root element. */\n  className?: string;\n\n  /** Grouping instructions. */\n  groups?: IGroup[];\n\n  /** Override properties to render groups. */\n  groupProps?: IDetailsGroupRenderProps;\n\n  /** Override for the indent width used for group nesting. */\n  indentWidth?: number;\n\n  /** Selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. Options include none, single, multiple */\n  selectionMode?: SelectionMode;\n\n  /**\n   * By default, selection is cleared when clicking on an empty (non-focusable) section of the screen.\n   * Setting this value to true overrides that behavior and maintains selection.\n   * @defaultvalue false\n   **/\n  selectionPreservedOnEmptyClick?: boolean;\n\n  /**\n   * Additional props to pass through to the SelectionZone created by default.\n   */\n  selectionZoneProps?: ISelectionZoneProps;\n\n  /** Controls how the columns are adjusted. */\n  layoutMode?: DetailsListLayoutMode;\n\n  /**\n   * Controls the visibility of selection check box.\n   * @defaultvalue CheckboxVisibility.onHover\n   */\n  checkboxVisibility?: CheckboxVisibility;\n\n  /**\n   * Controls the visibility of the header.\n   * @defaultvalue true\n   */\n  isHeaderVisible?: boolean;\n\n  /** Column definitions. If none are provided, default columns will be created based on the items' properties. */\n  columns?: IColumn[];\n\n  /** Controls how the list constrains overflow. */\n  constrainMode?: ConstrainMode;\n\n  /** Event names and corresponding callbacks that will be registered to rendered row elements. */\n  rowElementEventMap?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Callback for when the list has been updated. Useful for telemetry tracking externally. */\n  onDidUpdate?: (detailsList?: DetailsListBase) => void;\n\n  /**\n   * Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page.\n   */\n  onRowDidMount?: (item?: any, index?: number) => void;\n\n  /**\n   * Callback for when a given row has been unmounted.\n   * Useful for identifying when a row has been removed from the page.\n   */\n  onRowWillUnmount?: (item?: any, index?: number) => void;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;\n\n  /** Callback for when the user asks for a contextual menu (usually via right click) from a column header. */\n  onColumnHeaderContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback fired on column resize */\n  onColumnResize?: (column?: IColumn, newWidth?: number, columnIndex?: number) => void;\n\n  /** Callback for when a given row has been invoked (by pressing enter while it is selected.) */\n  onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;\n\n  /**\n   * Callback for when the context menu of an item has been accessed.\n   * If undefined or false is returned, `ev.preventDefault()` will be called.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n\n  /**\n   * Callback to override the default row rendering.\n   */\n  onRenderRow?: IRenderFunction<IDetailsRowProps>;\n\n  /**\n   * If provided, will be the \"default\" item column renderer method.\n   * This affects cells within the rows, not the rows themselves.\n   * If a column definition provides its own `onRender` method, that will be used instead of this.\n   */\n  onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => React.ReactNode;\n\n  /**\n   * Render function which is composed around rendering every cell.\n   */\n  onRenderField?: IRenderFunction<IDetailsColumnFieldProps>;\n\n  /**\n   * If provided, will be the \"default\" item column cell value return.\n   * A column's `getValueKey` can override `getCellValueKey`.\n   */\n  getCellValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /** Map of callback functions related to row drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** Callback for what to render when the item is missing. */\n  onRenderMissingItem?: (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode;\n\n  /** An override to render the details header. */\n  onRenderDetailsHeader?: IRenderFunction<IDetailsHeaderProps>;\n\n  /** An override to render the details footer. */\n  onRenderDetailsFooter?: IRenderFunction<IDetailsFooterProps>;\n\n  /**  If provided, can be used to render a custom checkbox. */\n  onRenderCheckbox?: IRenderFunction<IDetailsListCheckboxProps>;\n\n  /** Viewport info, provided by the `withViewport` decorator. */\n  viewport?: IViewport;\n\n  /**\n   * Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it\n   * with the keyboard.\n   */\n  onActiveItemChanged?: (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void;\n\n  /** Accessible label for the list header. */\n  ariaLabelForListHeader?: string;\n\n  /** Accessible label for the select all checkbox. */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /** Accessible label for the name of the selection column. */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Callback to get the aria-label string for a given item. */\n  getRowAriaLabel?: (item: any) => string;\n\n  /** Callback to get the aria-describedby IDs (space-separated strings) of elements that describe the item. */\n  getRowAriaDescribedBy?: (item: any) => string;\n\n  /**\n   * Callback to get the item key, to be used in the selection and on render.\n   * Must be provided if sorting or filtering is enabled.\n   */\n  getKey?: (item: any, index?: number) => string;\n\n  /**\n   * Accessible label describing or summarizing the list.\n   * @deprecated use `ariaLabelForGrid`\n   */\n  ariaLabel?: string;\n\n  /** Accessible label for the row check button, e.g. \"select row\". */\n  checkButtonAriaLabel?: string;\n\n  /** Accessible label for the group header check button, e.g. \"select section\". */\n  checkButtonGroupAriaLabel?: string;\n\n  /** Accessible label for the grid within the list. */\n  ariaLabelForGrid?: string;\n\n  /** An optional margin for proportional columns, to e.g. account for scrollbars when laying out width. */\n  flexMargin?: number;\n\n  /**\n   * Whether the role `application` should be applied to the list.\n   * @defaultvalue false\n   * @deprecated using the application role in this case is an antipattern, and heavily discouraged.\n   */\n  shouldApplyApplicationRole?: boolean;\n\n  /**\n   * The minimum mouse move distance to interpret the action as drag event.\n   * @defaultvalue 5\n   */\n  minimumPixelsForDrag?: number;\n\n  /**\n   * Whether to render in compact mode.\n   * @defaultvalue false\n   */\n  compact?: boolean;\n\n  /**\n   * Whether to enable render page caching. This is an experimental performance optimization that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Callback to determine whether the list should be rendered in full, or virtualized.\n   *\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance\n   * for smaller lists.\n   *\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Class name to add to the cell of a checkbox. */\n  checkboxCellClassName?: string;\n\n  /** Whether the selection zone should enter modal state on touch. */\n  enterModalSelectionOnTouch?: boolean;\n\n  /** Options for column reordering using drag and drop. */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /** Callback to override default group height calculation used by list virtualization. */\n  getGroupHeight?: IGroupedListProps['getGroupHeight'];\n\n  /**\n   * Whether to re-render a row only when props changed. Might cause regression when depending on external updates.\n   * @defaultvalue false\n   */\n  useReducedRowRenderer?: boolean;\n\n  /**\n   * Props impacting the render style of cells. Since these have an impact on calculated column widths, they are\n   * handled separately from normal theme styling, but they are passed to the styling system.\n   */\n  cellStyleProps?: ICellStyleProps;\n\n  /** Whether to disable the built-in SelectionZone, so the host component can provide its own. */\n  disableSelectionZone?: boolean;\n\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n\n  /** Whether to animate updates */\n  enableUpdateAnimations?: boolean;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n\n  /** Role for the list. */\n  role?: string;\n\n  /**\n   * Properties to pass through to the FocusZone.\n   */\n  focusZoneProps?: IFocusZoneProps;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumn {\n  /** A unique key for identifying the column. */\n  key: string;\n\n  /** Name to render on the column header. */\n  name: string;\n\n  /**\n   * The field to pull the text value from for the column.\n   * Can be unset if a custom `onRender` method is provided.\n   */\n  fieldName?: string;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (3/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  flexGrow?: number;\n\n  /** Class name to apply to the column cell within each row. */\n  className?: string;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>;\n\n  /** Minimum width for the column. */\n  minWidth: number;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (2/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  targetWidthProportion?: number;\n\n  /**\n   * Accessible label for the column. The column name will still be used as the primary label,\n   * but this text (if specified) will be used as the column description.\n   * WARNING: grid column descriptions are often ignored by screen readers, so any necessary information\n   * should go directly in the column content\n   */\n  ariaLabel?: string;\n\n  /** Whether the column is a header for the given row. There should be only one column with this set to true. */\n  isRowHeader?: boolean;\n\n  /** Maximum width for the column, if stretching is allowed in justified scenarios. */\n  maxWidth?: number;\n\n  /**\n   * Defines how the column's header should render.\n   * @defaultvalue ColumnActionsMode.clickable\n   */\n  columnActionsMode?: ColumnActionsMode;\n\n  /** Custom icon to use in the column header. */\n  iconName?: string;\n\n  /**\n   * Whether only the icon should be displayed in the column header.\n   * If true, the column name and dropdown chevron will not be displayed.\n   */\n  isIconOnly?: boolean;\n\n  /** Class name for the icon within the header. */\n  iconClassName?: string;\n\n  /**\n   * If true, allow the column to be collapsed when rendered in justified layout.\n   * @deprecated Use `isCollapsible`\n   */\n  isCollapsable?: boolean;\n\n  /** If true, allow the column to be collapsed when rendered in justified layout. */\n  isCollapsible?: boolean;\n\n  /** If true, column header will render an icon indicating column is sortable while unsorted */\n  showSortIconWhenUnsorted?: boolean;\n\n  /** Determines if the column is currently sorted. Renders a sort arrow in the column header. */\n  isSorted?: boolean;\n\n  /** Determines if the sort arrow is pointed down (descending) or up. */\n  isSortedDescending?: boolean;\n\n  /** Determines if the column can be resized. */\n  isResizable?: boolean;\n\n  /** Determines if the column can render multi-line text. */\n  isMultiline?: boolean;\n\n  /** Custom renderer for cell content, instead of the default text rendering. */\n  onRender?: (item?: any, index?: number, column?: IColumn) => any;\n\n  /** Custom override for the parent list's `getCellValueKey`. */\n  getValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  onRenderField?: IRenderFunction<IDetailsColumnFieldProps>;\n\n  /** Custom renderer for column header divider. */\n  onRenderDivider?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Custom renderer for filter icon. */\n  onRenderFilterIcon?: IRenderFunction<IDetailsColumnFilterIconProps>;\n\n  /** Custom renderer for column header content, instead of the default text rendering. */\n  onRenderHeader?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Whether the list is filtered by this column. If true, shows a filter icon next to this column's name. */\n  isFiltered?: boolean;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /** Callback for when the user opens the column header context menu. */\n  onColumnContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * Callback for when the column is resized (`width` is the current width).\n   *\n   * Prefer this over `DetailsList`'s `onColumnResize` if you require the `IColumn` to report its width\n   * after every resize event. Consider debouncing the callback if resize events occur frequently.\n   */\n  onColumnResize?: (width?: number) => void;\n\n  /** Whether the list is grouped by this column. If true, shows a grouped icon next to this column's name. */\n  isGrouped?: boolean;\n\n  /** Arbitrary data passthrough which can be used by the caller. */\n  data?: any;\n\n  /** Internal only value. */\n  calculatedWidth?: number;\n\n  /**\n   * Internal only value.\n   * Remembers the actual width of the column in any case.\n   * `calculatedWidth` is only saved when it's defined by user, not for justified calculations.\n   */\n  currentWidth?: number;\n\n  /** Class name to apply to the column header cell. */\n  headerClassName?: string;\n\n  /** If true, add additional LTR padding-right to column and cells. */\n  isPadded?: boolean;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in ascending order.\n   * This will be read after the main column header label.\n   */\n  sortAscendingAriaLabel?: string;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in descending order.\n   * This will be read after the main column header label.\n   */\n  sortDescendingAriaLabel?: string;\n\n  /**\n   * Accessible label for indicating that the list could be sorted by this column but isn't currently.\n   * This will be read after the main column header label.\n   */\n  sortableAriaLabel?: string;\n\n  /** Accessible label for the status of this column when grouped. */\n  groupAriaLabel?: string;\n\n  /** Accessible label for the status of this column when filtered. */\n  filterAriaLabel?: string;\n\n  /** Whether a dropdown menu is open so that the appropriate ARIA attributes are rendered. */\n  isMenuOpen?: boolean;\n}\n\n/**\n * Enum to describe how a particular column header behaves.\n * This is used to to specify the property `IColumn.columnActionsMode`.\n * If `IColumn.columnActionsMode` is undefined, it's equivalent to `ColumnActionsMode.clickable`.\n * {@docCategory DetailsList}\n */\nexport enum ColumnActionsMode {\n  /** Renders the column header as disabled. */\n  disabled = 0,\n\n  /** Renders the column header as clickable. Default value. */\n  clickable = 1,\n\n  /** Renders the column header as clickable and displays the dropdown chevron. */\n  hasDropdown = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum ConstrainMode {\n  /** Lets the content grow which allows the page to manage scrolling. */\n  unconstrained = 0,\n\n  /** Constrains the list to the given layout space. */\n  horizontalConstrained = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderOptions {\n  /**\n   * Specifies the number fixed columns from left\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromStart?: number;\n\n  /**\n   * Specifies the number fixed columns from right\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromEnd?: number;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has started.\n   */\n  onColumnDragStart?: (dragStarted: boolean) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   * @deprecated Use `onColumnDrop` instead.\n   */\n  handleColumnReorder?: (draggedIndex: number, targetIndex: number) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   */\n  onColumnDrop?: (dragDropDetails: IColumnDragDropDetails) => void;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has finished.\n   */\n  onDragEnd?: (columnDropLocationDetails: ColumnDragEndLocation) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnDragDropDetails {\n  /**\n   * Specifies the source column index\n   * @defaultvalue -1\n   */\n  draggedIndex: number;\n\n  /**\n   * Specifies the target column index\n   * @defaultvalue -1\n   */\n  targetIndex: number;\n}\n\n/**\n * Enum to describe where the column has been dropped, after starting the drag\n * {@docCategory DetailsList}\n */\nexport enum ColumnDragEndLocation {\n  /** Drag ended outside of current list */\n  outside = 0,\n\n  /** Drag ended within current list */\n  surface = 1,\n\n  /** Drag ended on header */\n  header = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum DetailsListLayoutMode {\n  /**\n   * Lets the user resize columns and makes not attempt to fit them.\n   */\n  fixedColumns = 0,\n\n  /**\n   * Manages which columns are visible, tries to size them according to their min/max rules and drops\n   * off columns that can't fit and have isCollapsible set.\n   */\n  justified = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum CheckboxVisibility {\n  /** Visible on hover. */\n  onHover = 0,\n\n  /** Visible always. */\n  always = 1,\n\n  /** Hide checkboxes. */\n  hidden = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsListStyleProps = Required<Pick<IDetailsListProps, 'theme'>> &\n  Pick<IDetailsListProps, 'className'> & {\n    /** Whether the list is horizontally constrained */\n    isHorizontalConstrained?: boolean;\n\n    /** Whether the list is in compact mode */\n    compact?: boolean;\n\n    /** Whether the list is fixed in size */\n    isFixed?: boolean;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListStyles {\n  root: IStyle;\n  focusZone: IStyle;\n  headerWrapper: IStyle;\n  contentWrapper: IStyle;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupRenderProps extends IGroupRenderProps {\n  onRenderFooter?: IRenderFunction<IDetailsGroupDividerProps>;\n  onRenderHeader?: IRenderFunction<IDetailsGroupDividerProps>;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupDividerProps extends IGroupDividerProps, IDetailsItemProps {}\n\nexport interface IDetailsListCheckboxProps extends IDetailsCheckboxProps {}\n\nexport type {\n  IDetailsHeaderProps,\n  IDetailsRowBaseProps,\n  IDetailsHeaderBaseProps,\n  IDetailsFooterBaseProps,\n  IDragDropContext,\n  IDragDropEvents,\n  IDragDropHelper,\n  IDragDropOptions,\n  IViewport,\n  IWithViewportProps,\n};\n","import * as React from 'react';\nimport { GroupedListBase } from './GroupedList.base';\nimport { SelectionMode } from '../../Selection';\nimport type { IList, IListProps } from '../../List';\nimport type { IFocusZoneProps } from '../../FocusZone';\nimport type { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../DragDrop';\nimport type { ISelection } from '../../Selection';\nimport type { IViewport } from '../../utilities/decorators/withViewport';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IGroupHeaderProps } from './GroupHeader.types';\nimport type { IGroupShowAllProps } from './GroupShowAll.types';\nimport type { IGroupFooterProps } from './GroupFooter.types';\n\n/**\n * {@docCategory GroupedList}\n */\nexport enum CollapseAllVisibility {\n  hidden = 0,\n  visible = 1,\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list props don't change, but the list still\n   * needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can\n   * call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Toggles the collapsed state of all the groups in the list.\n   */\n  toggleCollapseAll: (allCollapsed: boolean) => void;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListProps extends React.ClassAttributes<GroupedListBase> {\n  /**\n   * Theme that is passed in from Higher Order Component\n   */\n  theme?: ITheme;\n\n  /**\n   * Style function to be passed in to override the themed or default styles\n   */\n  styles?: IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>;\n\n  /**\n   * Optional callback to access the IGroupedList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IGroupedList>;\n\n  /** Optional class name to add to the root element. */\n  className?: string;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to groups and rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Optional grouping instructions. */\n  groups?: IGroup[];\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional properties to pass through to the FocusZone. */\n  focusZoneProps?: IFocusZoneProps;\n\n  /** Optional properties to pass through to the list components being rendered. */\n  listProps?: IListProps;\n\n  /** Optional properties to pass through to the root list component being rendered. */\n  rootListProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Override the default role for GroupedList.  */\n  role?: string;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Optional callback when the group expand state changes between all collapsed and at least one group is expanded. */\n  onGroupExpandStateChanged?: (isSomeGroupExpanded: boolean) => void;\n\n  /**\n   * boolean to control if pages containing unchanged items should be cached, this is a perf optimization\n   * The same property in List.Props\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /**\n   * Optional function to override default group height calculation used by list virtualization.\n   */\n  getGroupHeight?: (group: IGroup, groupIndex: number) => number;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroup {\n  /**\n   * Unique identifier for the group.\n   */\n  key: string;\n\n  /**\n   * Display name for the group, rendered on the header.\n   */\n  name: string;\n\n  /**\n   * Start index for the group within the given items.\n   */\n  startIndex: number;\n\n  /**\n   * How many items should be rendered within the group.\n   */\n  count: number;\n\n  /**\n   * Nested groups, if any.\n   */\n  children?: IGroup[];\n\n  /**\n   * Number indicating the level of nested groups.\n   */\n  level?: number;\n\n  /**\n   * @deprecated At 1.0.0, selection state wil be controlled by the selection store only.\n   */\n  isSelected?: boolean;\n\n  /**\n   * If all the items in the group are collapsed.\n   */\n  isCollapsed?: boolean;\n\n  /**\n   * If the items within the group are summarized or showing all.\n   */\n  isShowingAll?: boolean;\n\n  /**\n   * If drag/drop is enabled for the group header.\n   */\n  isDropEnabled?: boolean;\n\n  /**\n   * Arbitrary data required to be preserved by the caller.\n   */\n  data?: any;\n\n  /**\n   * Optional accessibility label (aria-label) attribute that will be stamped on to the element.\n   * If none is specified, the arai-label attribute will contain the group name\n   */\n  ariaLabel?: string;\n\n  /**\n   * Optional flag to indicate the group has more data to load than the current group count indicated.\n   * This can be used to indicate that a plus should be rendered next to the group count in the header.\n   */\n  hasMoreData?: boolean;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupRenderProps {\n  /** Boolean indicating if all groups are in collapsed state. */\n  isAllGroupsCollapsed?: boolean;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Callback for when all groups are expanded or collapsed. */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** Information to pass in to the group Show all footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /**\n   * Override which allows the caller to provide a custom header.\n   */\n  onRenderHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /**\n   * Override which allows the caller to provide a custom Show All link.\n   */\n  onRenderShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /**\n   * Override which allows the caller to provide a custom footer.\n   */\n  onRenderFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Flag to indicate whether to ignore the collapsing icon on header.\n   * @defaultvalue CollapseAllVisibility.visible\n   */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /**\n   * Boolean indicating if empty groups are shown\n   * @defaultvalue false\n   */\n  showEmptyGroups?: boolean;\n\n  /**\n   * Override which allows the caller to provide a custom aria role\n   */\n  role?: string;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupDividerProps {\n  componentRef?: IRefObject<{}>;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Callback to determine if a group has missing items and needs to load them from the server. */\n  isGroupLoading?: (group: IGroup) => boolean;\n\n  /** Text shown on group headers to indicate the group is being loaded. */\n  loadingText?: string;\n\n  /** The group to be rendered by the header. */\n  group?: IGroup;\n\n  /** The index of the group. */\n  groupIndex?: number;\n\n  /** The indent level of the group. */\n  groupLevel?: number;\n\n  /** Defines the number of columns a group header needs to span in the case of a grid or treegrid */\n  ariaColSpan?: number;\n\n  /** Defines the number of items in the current set of listitems or treeitems */\n  ariaSetSize?: number;\n\n  /** Defines an element's number or position in the current set of listitems or treeitems */\n  ariaPosInSet?: number;\n\n  /** Defines the number of items in the current set of grid items */\n  ariaRowCount?: number;\n\n  /** Defines an element's number or position in the current set of grid items */\n  ariaRowIndex?: number;\n\n  /**\n   * Width corresponding to a single level.\n   * This is multiplied by the groupLevel to get the full spacer width for the group.\n   */\n  indentWidth?: number;\n\n  /** If all items in the group are selected. */\n  selected?: boolean;\n\n  /**\n   * @deprecated Use `selected` instead. Deprecated at v.65.1.\n   */\n  isSelected?: boolean;\n\n  /** A reference to the viewport in which the header is rendered. */\n  viewport?: IViewport;\n\n  /** The selection mode of the list the group lives within. */\n  selectionMode?: SelectionMode;\n\n  /** Text to display for the group footer. */\n  footerText?: string;\n\n  /** Text to display for the group \"Show All\" link. */\n  showAllLinkText?: string;\n\n  /** Callback for when the group \"Show All\" link is clicked */\n  onToggleSummarize?: (group: IGroup) => void;\n\n  /** Callback for when the group header is clicked. */\n  onGroupHeaderClick?: (group: IGroup) => void;\n\n  /** Callback for when the \"keyup\" event is fired on the group header. */\n  onGroupHeaderKeyUp?: (ev: React.KeyboardEvent<HTMLElement>, group?: IGroup) => void;\n\n  /** Callback for when the group is expanded or collapsed. */\n  onToggleCollapse?: (group: IGroup) => void;\n\n  /** Callback for when the group is selected. */\n  onToggleSelectGroup?: (group: IGroup) => void;\n\n  /** Determines if the group selection check box is shown for collapsed groups. */\n  isCollapsedGroupSelectVisible?: boolean;\n\n  /** Override which allows the caller to provider a custom renderer for the GroupHeader title. */\n  onRenderTitle?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Props for expand/collapse button\n   * @deprecated Use {@link IGroupHeaderProps.expandButtonProps} instead.\n   */\n  expandButtonProps?: React.HTMLAttributes<HTMLButtonElement>;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n\n  /** Custom className */\n  className?: string;\n\n  /** Theme provided by the Higher Order Component */\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport type IGroupedListStyleProps = Required<Pick<IGroupedListProps, 'theme'>> &\n  Pick<IGroupedListProps, 'className'> & {\n    /** whether or not the group is collapsed */\n    isCollapsed?: boolean;\n\n    /** Whether the group is in compact mode or not */\n    compact?: boolean;\n  };\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListStyles {\n  root: IStyle;\n  group: IStyle;\n  groupIsDropping: IStyle;\n}\n","import * as React from 'react';\nimport type { IGroupSpacerProps } from './GroupSpacer.types';\n\nexport const SPACER_WIDTH = 36;\n\nexport const GroupSpacer: React.FunctionComponent<IGroupSpacerProps> = props => {\n  const { count, indentWidth = SPACER_WIDTH, role = 'presentation' } = props;\n  const width = count * indentWidth;\n\n  return count > 0 ? (\n    <span className={'ms-GroupSpacer'} style={{ display: 'inline-block', width }} role={role} />\n  ) : null;\n};\n","import {\n  labelProperties,\n  audioProperties,\n  videoProperties,\n  olProperties,\n  liProperties,\n  anchorProperties,\n  buttonProperties,\n  inputProperties,\n  textAreaProperties,\n  selectProperties,\n  optionProperties,\n  tableProperties,\n  trProperties,\n  thProperties,\n  tdProperties,\n  colGroupProperties,\n  colProperties,\n  formProperties,\n  iframeProperties,\n  imgProperties,\n  htmlElementProperties,\n  getNativeProps,\n} from './properties';\nimport * as React from 'react';\n\nconst nativeElementMap: Record<string, Record<string, number>> = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties,\n};\n\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getNativeElementProps<TAttributes extends React.HTMLAttributes<any>>(\n  tagName: string,\n  props: {},\n  excludedPropNames?: string[],\n): TAttributes {\n  const allowedPropNames = (tagName && nativeElementMap[tagName]) || htmlElementProperties;\n\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}\n","import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { classNamesFunction } from '../../Utilities';\nimport type { ICheckProps, ICheckStyleProps, ICheckStyles } from './Check.types';\n\nconst getClassNames = classNamesFunction<ICheckStyleProps, ICheckStyles>();\n\nexport const CheckBase: React.FunctionComponent<ICheckProps> = React.forwardRef<HTMLDivElement, ICheckProps>(\n  (props, ref) => {\n    const { checked = false, className, theme, styles, useFastIcons = true } = props;\n\n    const classNames = getClassNames(styles!, { theme: theme!, className, checked });\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    return (\n      <div className={classNames.root} ref={ref}>\n        <IconComponent iconName=\"CircleRing\" className={classNames.circle} />\n        <IconComponent iconName=\"StatusCircleCheckmark\" className={classNames.check} />\n      </div>\n    );\n  },\n);\nCheckBase.displayName = 'CheckBase';\n","import { HighContrastSelector, getGlobalClassNames, IconFontSizes, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { getRTL } from '../../Utilities';\nimport type { ICheckStyleProps, ICheckStyles } from './Check.types';\nimport type { IStyle } from '../../Styling';\n\nexport const CheckGlobalClassNames = {\n  root: 'ms-Check',\n  circle: 'ms-Check-circle',\n  check: 'ms-Check-check',\n  /** Must be manually applied to the parent element of the check. */\n  checkHost: 'ms-Check-checkHost',\n};\n\nexport const getStyles = (props: ICheckStyleProps): ICheckStyles => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height = props.checkBoxHeight || '18px', checked, className, theme } = props;\n\n  const { palette, semanticColors, fonts } = theme;\n  const isRTL = getRTL(theme);\n\n  const classNames = getGlobalClassNames(CheckGlobalClassNames, theme);\n\n  const sharedCircleCheck: IStyle = {\n    fontSize: height,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: height,\n    height: height,\n    textAlign: 'center',\n    // inline-flex prevents the check from shifting with custom line height styles\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    verticalAlign: 'middle',\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        // lineHeight currently needs to be a string to output without 'px'\n        lineHeight: '1',\n        width: height,\n        height: height,\n        verticalAlign: 'top',\n        position: 'relative',\n        userSelect: 'none',\n\n        selectors: {\n          ':before': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '1px',\n            right: '1px',\n            bottom: '1px',\n            left: '1px',\n            borderRadius: '50%',\n            opacity: 1,\n            background: semanticColors.bodyBackground,\n          },\n\n          [`.${classNames.checkHost}:hover &, .${classNames.checkHost}:focus &, &:hover, &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n\n      checked && [\n        'is-checked',\n        {\n          selectors: {\n            ':before': {\n              background: palette.themePrimary,\n              opacity: 1,\n              selectors: {\n                [HighContrastSelector]: {\n                  background: 'Window',\n                },\n              },\n            },\n          },\n        },\n      ],\n      className,\n    ],\n\n    circle: [\n      classNames.circle,\n      sharedCircleCheck,\n\n      {\n        color: palette.neutralSecondary,\n\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'WindowText',\n          },\n        },\n      },\n\n      checked && {\n        color: palette.white,\n      },\n    ],\n\n    check: [\n      classNames.check,\n      sharedCircleCheck,\n\n      {\n        opacity: 0,\n        color: palette.neutralSecondary,\n        fontSize: IconFontSizes.medium,\n        left: isRTL ? '-0.5px' : '.5px', // for centering the check icon inside the circle.\n        top: '-1px', // the check is slightly lower than center compared to the circle.\n\n        selectors: {\n          ':hover': {\n            opacity: 1,\n          },\n\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      checked && {\n        opacity: 1,\n        color: palette.white,\n        fontWeight: 900,\n\n        selectors: {\n          [HighContrastSelector]: {\n            border: 'none',\n            color: 'WindowText',\n          },\n        },\n      },\n    ],\n\n    checkHost: classNames.checkHost,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { CheckBase } from './Check.base';\nimport { getStyles } from './Check.styles';\nimport type { ICheckProps, ICheckStyleProps, ICheckStyles } from './Check.types';\n\nexport const Check: React.FunctionComponent<ICheckProps> = styled<ICheckProps, ICheckStyleProps, ICheckStyles>(\n  CheckBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Check',\n  },\n  true,\n);\n","import {\n  AnimationClassNames,\n  AnimationStyles,\n  HighContrastSelector,\n  getFocusStyle,\n  getGlobalClassNames,\n  FontWeights,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport { GlobalClassNames as LinkGlobalClassNames } from '../../components/Link/Link.styles';\nimport type { IDetailsRowStyleProps, IDetailsRowStyles, ICellStyleProps } from './DetailsRow.types';\nimport type { IStyle } from '../../Styling';\n\nexport const DetailsRowGlobalClassNames = {\n  root: 'ms-DetailsRow',\n  // TODO: in Fabric 7.0 lowercase the 'Compact' for consistency across other components.\n  compact: 'ms-DetailsList--Compact',\n  cell: 'ms-DetailsRow-cell',\n  cellAnimation: 'ms-DetailsRow-cellAnimation',\n  cellCheck: 'ms-DetailsRow-cellCheck',\n  check: 'ms-DetailsRow-check',\n  cellMeasurer: 'ms-DetailsRow-cellMeasurer',\n  listCellFirstChild: 'ms-List-cell:first-child',\n  isContentUnselectable: 'is-contentUnselectable',\n  isSelected: 'is-selected',\n  isCheckVisible: 'is-check-visible',\n  isRowHeader: 'is-row-header',\n  fields: 'ms-DetailsRow-fields',\n};\nconst IsFocusableSelector = \"[data-is-focusable='true']\";\n\nexport const DEFAULT_CELL_STYLE_PROPS: ICellStyleProps = {\n  cellLeftPadding: 12,\n  cellRightPadding: 8,\n  cellExtraRightPadding: 24,\n};\n\n// Source of default row heights to share.\nexport const DEFAULT_ROW_HEIGHTS = {\n  rowHeight: 42,\n  compactRowHeight: 32,\n};\n\n// Constant values\nconst values = {\n  ...DEFAULT_ROW_HEIGHTS,\n  rowVerticalPadding: 11,\n  compactRowVerticalPadding: 6,\n};\n\nexport const getDetailsRowStyles = (props: IDetailsRowStyleProps): IDetailsRowStyles => {\n  const {\n    theme,\n    isSelected,\n    canSelect,\n    droppingClassName,\n    anySelected,\n    isCheckVisible,\n    checkboxCellClassName,\n    compact,\n    className,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    enableUpdateAnimations,\n    disabled,\n  } = props;\n\n  const { palette, fonts } = theme;\n  const {\n    neutralPrimary,\n    white,\n    neutralSecondary,\n    neutralLighter,\n    neutralLight,\n    neutralDark,\n    neutralQuaternaryAlt,\n  } = palette;\n  const { focusBorder, linkHovered: focusedLinkColor } = theme.semanticColors;\n\n  const classNames = getGlobalClassNames(DetailsRowGlobalClassNames, theme);\n\n  const colors = {\n    // Default\n    defaultHeaderText: neutralPrimary,\n    defaultMetaText: neutralSecondary,\n    defaultBackground: white,\n\n    // Default Hover\n    defaultHoverHeaderText: neutralDark,\n    defaultHoverMetaText: neutralPrimary,\n    defaultHoverBackground: neutralLighter,\n\n    // Selected\n    selectedHeaderText: neutralDark,\n    selectedMetaText: neutralPrimary,\n    selectedBackground: neutralLight,\n\n    // Selected Hover\n    selectedHoverHeaderText: neutralDark,\n    selectedHoverMetaText: neutralPrimary,\n    selectedHoverBackground: neutralQuaternaryAlt,\n\n    // Focus\n    focusHeaderText: neutralDark,\n    focusMetaText: neutralPrimary,\n    focusBackground: neutralLight,\n    focusHoverBackground: neutralQuaternaryAlt,\n  };\n\n  const rowHighContrastFocus = {\n    top: 2,\n    right: 2,\n    bottom: 2,\n    left: 2,\n  };\n\n  // Selected row styles\n  const selectedStyles: IStyle = [\n    getFocusStyle(theme, {\n      inset: -1,\n      borderColor: focusBorder,\n      outlineColor: white,\n      highContrastStyle: rowHighContrastFocus,\n    }),\n    classNames.isSelected,\n    {\n      color: colors.selectedMetaText,\n      background: colors.selectedBackground,\n      borderBottom: `1px solid ${white}`,\n      selectors: {\n        '&:before': {\n          position: 'absolute',\n          display: 'block',\n          top: -1,\n          height: 1,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          content: '',\n          borderTop: `1px solid ${white}`,\n        },\n\n        [`.${classNames.cell} > .${LinkGlobalClassNames.root}`]: {\n          color: focusedLinkColor,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'HighlightText',\n            },\n          },\n        },\n\n        // Selected State hover\n        '&:hover': {\n          background: colors.selectedHoverBackground,\n          color: colors.selectedHoverMetaText,\n          selectors: {\n            // Selected State hover meta cell\n            [HighContrastSelector]: {\n              background: 'Highlight',\n              selectors: {\n                [`.${classNames.cell}`]: {\n                  color: 'HighlightText',\n                },\n                [`.${classNames.cell} > .${LinkGlobalClassNames.root}`]: {\n                  forcedColorAdjust: 'none',\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Selected State hover Header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.selectedHoverHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n          },\n        },\n\n        // Focus state\n        '&:focus': {\n          background: colors.focusBackground,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell}`]: {\n              color: colors.focusMetaText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                  selectors: {\n                    '> a': {\n                      color: 'HighlightText',\n                    },\n                  },\n                },\n              },\n            },\n\n            // Row header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.focusHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default focus background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n\n        // Focus and hover state\n        '&:focus:hover': {\n          background: colors.focusHoverBackground,\n        },\n      },\n    },\n  ];\n\n  const cannotSelectStyles: IStyle = [\n    classNames.isContentUnselectable,\n    {\n      userSelect: 'none',\n      cursor: 'default',\n    },\n  ];\n\n  const rootCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    border: 0,\n  };\n\n  const cellCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    paddingTop: values.compactRowVerticalPadding,\n    paddingBottom: values.compactRowVerticalPadding,\n    paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n  };\n\n  const defaultCellStyles: IStyle = [\n    getFocusStyle(theme, { inset: -1 }),\n    classNames.cell,\n    {\n      display: 'inline-block',\n      position: 'relative',\n      boxSizing: 'border-box',\n      minHeight: values.rowHeight,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      paddingTop: values.rowVerticalPadding,\n      paddingBottom: values.rowVerticalPadding,\n      paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n      selectors: {\n        '& > button': {\n          maxWidth: '100%',\n        },\n\n        [IsFocusableSelector]: getFocusStyle(theme, { inset: -1, borderColor: neutralSecondary, outlineColor: white }),\n      },\n    },\n\n    isSelected && {\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    compact && cellCompactStyles,\n    disabled && { opacity: 0.5 },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      AnimationClassNames.fadeIn400,\n      droppingClassName,\n      theme.fonts.small,\n      isCheckVisible && classNames.isCheckVisible,\n      getFocusStyle(theme, { borderColor: focusBorder, outlineColor: white }),\n      {\n        borderBottom: `1px solid ${neutralLighter}`,\n        background: colors.defaultBackground,\n        color: colors.defaultMetaText,\n        // This ensures that the row always tries to consume is minimum width and does not compress.\n        display: 'inline-flex',\n        minWidth: '100%',\n        minHeight: values.rowHeight,\n        whiteSpace: 'nowrap',\n        padding: 0,\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        textAlign: 'left',\n        selectors: {\n          [`.${classNames.listCellFirstChild} &:before`]: {\n            display: 'none',\n          },\n\n          '&:hover': {\n            background: colors.defaultHoverBackground,\n            color: colors.defaultHoverMetaText,\n            selectors: {\n              [`.${classNames.isRowHeader}`]: {\n                color: colors.defaultHoverHeaderText,\n              },\n\n              [`.${classNames.cell} > .${LinkGlobalClassNames.root}`]: {\n                color: focusedLinkColor,\n              },\n            },\n          },\n\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          '.ms-GroupSpacer': {\n            flexShrink: 0,\n            flexGrow: 0,\n          },\n        },\n      },\n      isSelected && selectedStyles,\n      !canSelect && cannotSelectStyles,\n      compact && rootCompactStyles,\n      className,\n    ],\n\n    cellUnpadded: {\n      paddingRight: `${cellStyleProps.cellRightPadding}px`,\n    },\n\n    cellPadded: {\n      paddingRight: `${cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding}px`,\n      selectors: {\n        [`&.${classNames.cellCheck}`]: {\n          paddingRight: 0,\n        },\n      },\n    },\n\n    cell: defaultCellStyles,\n    cellAnimation: enableUpdateAnimations && AnimationStyles.slideLeftIn40,\n    cellMeasurer: [\n      classNames.cellMeasurer,\n      {\n        overflow: 'visible',\n        whiteSpace: 'nowrap',\n      },\n    ],\n    checkCell: [\n      defaultCellStyles,\n      classNames.cellCheck,\n      checkboxCellClassName,\n      {\n        padding: 0,\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        flexShrink: 0,\n      },\n    ],\n    checkCover: {\n      position: 'absolute',\n      top: -1,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      display: anySelected ? 'block' : 'none',\n    },\n    fields: [\n      classNames.fields,\n      {\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n    isRowHeader: [\n      classNames.isRowHeader,\n      {\n        color: colors.defaultHeaderText,\n        fontSize: fonts.medium.fontSize,\n      },\n      isSelected && {\n        color: colors.selectedHeaderText,\n        fontWeight: FontWeights.semibold,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'HighlightText',\n          },\n        },\n      },\n    ],\n    isMultiline: [\n      defaultCellStyles,\n      {\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n        textOverflow: 'clip',\n      },\n    ],\n    check: [classNames.check],\n  };\n};\n","import {\n  getFocusStyle,\n  focusClear,\n  getGlobalClassNames,\n  HighContrastSelector,\n  hiddenContentStyle,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPANDER_WIDTH } from '../GroupedList/GroupSpacer';\nimport type { IDetailsHeaderStyleProps, IDetailsHeaderStyles } from './DetailsHeader.types';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { ICellStyleProps } from './DetailsRow.types';\n\nconst GlobalClassNames = {\n  tooltipHost: 'ms-TooltipHost',\n  root: 'ms-DetailsHeader',\n  cell: 'ms-DetailsHeader-cell',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintCaretStyle: 'ms-DetailsHeader-dropHintCaretStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVertical: 'ms-DetailsColumn-gripperBarVertical',\n  checkTooltip: 'ms-DetailsHeader-checkTooltip',\n  check: 'ms-DetailsHeader-check',\n};\n\nexport const HEADER_HEIGHT = 42;\n\nexport const getCellStyles = (props: { theme: ITheme; cellStyleProps?: ICellStyleProps }): IStyle => {\n  const { theme, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return [\n    classNames.cell,\n    getFocusStyle(theme),\n    {\n      color: semanticColors.bodyText,\n      position: 'relative',\n      display: 'inline-block',\n      boxSizing: 'border-box',\n      padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n      lineHeight: 'inherit',\n      margin: '0',\n      height: HEADER_HEIGHT,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      textAlign: 'left',\n    },\n  ];\n};\n\nexport const getDetailsHeaderStyles = (props: IDetailsHeaderStyleProps): IDetailsHeaderStyles => {\n  const {\n    theme,\n    className,\n    isAllSelected,\n    isResizingColumn,\n    isSizing,\n    isAllCollapsed,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const cellSizerFadeInStyles: IStyle = {\n    opacity: 1,\n    transition: 'opacity 0.3s linear',\n  };\n\n  const cellStyles = getCellStyles(props);\n\n  return {\n    root: [\n      classNames.root,\n      fonts.small,\n      {\n        display: 'inline-block',\n        background: colors.headerBackgroundColor,\n        position: 'relative',\n        minWidth: '100%',\n        verticalAlign: 'top',\n        height: HEADER_HEIGHT,\n        lineHeight: HEADER_HEIGHT,\n        whiteSpace: 'nowrap',\n        boxSizing: 'content-box',\n        paddingBottom: '1px',\n        paddingTop: '16px',\n        borderBottom: `1px solid ${semanticColors.bodyDivider}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`& .${classNames.tooltipHost} .${classNames.checkTooltip}`]: {\n            display: 'block',\n          },\n        },\n      },\n      isAllSelected && classNames.isAllSelected,\n      isResizingColumn && classNames.isResizingColumn,\n      className,\n    ],\n\n    check: [\n      classNames.check,\n      {\n        height: HEADER_HEIGHT,\n      },\n      {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n\n    cellWrapperPadded: {\n      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n    },\n\n    cellIsCheck: [\n      cellStyles,\n      classNames.cellIsCheck,\n      {\n        position: 'relative',\n        padding: 0,\n        margin: 0,\n        display: 'inline-flex',\n        alignItems: 'center',\n        border: 'none',\n      },\n      isAllSelected && {\n        opacity: 1,\n      },\n    ],\n\n    cellIsGroupExpander: [\n      cellStyles,\n      {\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        padding: 0,\n        border: 'none',\n        width: GROUP_EXPANDER_WIDTH, // align with GroupedList's first expandIcon cell width.\n        color: palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: palette.neutralLighter,\n          },\n          ':active': {\n            backgroundColor: palette.neutralLight,\n          },\n        },\n      },\n    ],\n\n    cellIsActionable: {\n      selectors: {\n        ':hover': {\n          color: semanticColors.bodyText,\n          background: semanticColors.listHeaderBackgroundHovered,\n        },\n        ':active': {\n          background: semanticColors.listHeaderBackgroundPressed,\n        },\n      },\n    },\n    cellIsEmpty: {\n      textOverflow: 'clip',\n    },\n\n    cellSizer: [\n      classNames.cellSizer,\n      focusClear(),\n      {\n        display: 'inline-block',\n        position: 'relative',\n        cursor: 'ew-resize',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 'inherit',\n        background: 'transparent',\n        zIndex: 1,\n        width: 16,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            width: 1,\n            background: colors.resizerColor,\n            opacity: 0,\n            left: '50%',\n          },\n          ':focus:after': cellSizerFadeInStyles,\n          ':hover:after': cellSizerFadeInStyles,\n          [`&.${classNames.isResizing}:after`]: [\n            cellSizerFadeInStyles,\n            {\n              boxShadow: '0 0 5px 0 rgba(0, 0, 0, 0.4)',\n            },\n          ],\n        },\n      },\n    ],\n\n    cellIsResizing: classNames.isResizing,\n\n    cellSizerStart: {\n      margin: '0 -8px',\n    },\n\n    cellSizerEnd: {\n      margin: 0,\n      marginLeft: -16,\n    },\n\n    collapseButton: [\n      classNames.collapseButton,\n      {\n        transformOrigin: '50% 50%',\n        transition: 'transform .1s linear',\n      },\n      isAllCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n          },\n    ],\n\n    checkTooltip: classNames.checkTooltip,\n\n    sizingOverlay: isSizing && {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      cursor: 'ew-resize',\n      background: 'rgba(255, 255, 255, 0)',\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'transparent',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    dropHintCircleStyle: [\n      classNames.dropHintCircleStyle,\n      {\n        display: 'inline-block',\n        visibility: 'hidden',\n        position: 'absolute',\n        bottom: 0,\n        height: 9,\n        width: 9,\n        borderRadius: '50%',\n        marginLeft: -5,\n        top: 34,\n        overflow: 'visible',\n        zIndex: 10,\n        border: `1px solid ${palette.themePrimary}`,\n        background: palette.white,\n      },\n    ],\n\n    dropHintCaretStyle: [\n      classNames.dropHintCaretStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        top: -28,\n        left: -6.5,\n        fontSize: fonts.medium.fontSize,\n        color: palette.themePrimary,\n        overflow: 'visible',\n        zIndex: 10,\n      },\n    ],\n\n    dropHintLineStyle: [\n      classNames.dropHintLineStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 42,\n        width: 1,\n        background: palette.themePrimary,\n        zIndex: 10,\n      },\n    ],\n\n    dropHintStyle: {\n      display: 'inline-block',\n      position: 'absolute',\n    },\n  };\n};\n","import { getGlobalClassNames, getFocusStyle } from '../../Styling';\nimport { DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nimport { HEADER_HEIGHT } from './DetailsHeader.styles';\nimport { CheckGlobalClassNames } from '../../components/Check/Check.styles';\nimport type { IDetailsRowCheckStyleProps, IDetailsRowCheckStyles } from './DetailsRowCheck.types';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsRow-check',\n  isDisabled: 'ms-DetailsRow-check--isDisabled',\n  isHeader: 'ms-DetailsRow-check--isHeader',\n};\n\nexport const CHECK_CELL_WIDTH = 48;\n\nexport const getDetailsRowCheckStyles = (props: IDetailsRowCheckStyleProps): IDetailsRowCheckStyles => {\n  const { theme, className, isHeader, selected, anySelected, canSelect, compact, isVisible } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n  const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n\n  const height = isHeader ? HEADER_HEIGHT : compact ? compactRowHeight : rowHeight;\n\n  const isCheckVisible = isVisible || selected || anySelected;\n\n  return {\n    root: [classNames.root, className],\n\n    check: [\n      !canSelect && classNames.isDisabled,\n      isHeader && classNames.isHeader,\n      getFocusStyle(theme),\n      theme.fonts.small,\n      CheckGlobalClassNames.checkHost,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'default',\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        opacity: isCheckVisible ? 1 : 0,\n        height: height,\n        width: CHECK_CELL_WIDTH,\n        padding: 0,\n        margin: 0,\n      },\n    ],\n\n    isDisabled: [],\n  };\n};\n","import * as React from 'react';\nimport { css, styled, classNamesFunction, composeRenderFunction, getNativeElementProps } from '../../Utilities';\nimport { Check } from '../../Check';\nimport { getDetailsRowCheckStyles } from './DetailsRowCheck.styles';\nimport { SelectionMode } from '../../Selection';\nimport type {\n  IDetailsRowCheckProps,\n  IDetailsCheckboxProps,\n  IDetailsRowCheckStyleProps,\n  IDetailsRowCheckStyles,\n} from './DetailsRowCheck.types';\nimport type { ITheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>();\n\nconst DetailsRowCheckBase: React.FunctionComponent<IDetailsRowCheckProps> = props => {\n  const {\n    isVisible = false,\n    canSelect = false,\n    anySelected = false,\n    selected = false,\n    selectionMode,\n    isHeader = false,\n    className,\n    checkClassName,\n    styles,\n    theme,\n    compact,\n    onRenderDetailsCheckbox,\n    useFastIcons = true, // must be removed from buttonProps\n    ...buttonProps\n  } = props;\n  const defaultCheckboxRender = useFastIcons ? _fastDefaultCheckboxRender : _defaultCheckboxRender;\n\n  const onRenderCheckbox = onRenderDetailsCheckbox\n    ? composeRenderFunction(onRenderDetailsCheckbox, defaultCheckboxRender)\n    : defaultCheckboxRender;\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    canSelect,\n    selected,\n    anySelected,\n    className,\n    isHeader,\n    isVisible,\n    compact,\n  });\n\n  const detailsCheckboxProps: IDetailsCheckboxProps = {\n    checked: selected,\n    theme,\n  };\n\n  const divProps = getNativeElementProps('div', buttonProps, ['aria-label', 'aria-labelledby', 'aria-describedby']);\n\n  const checkRole = selectionMode === SelectionMode.single ? 'radio' : 'checkbox';\n\n  return canSelect ? (\n    <div\n      {...buttonProps}\n      role={checkRole}\n      // eslint-disable-next-line deprecation/deprecation\n      className={css(classNames.root, classNames.check)}\n      aria-checked={selected}\n      data-selection-toggle={true}\n      data-automationid=\"DetailsRowCheck\"\n      tabIndex={-1}\n    >\n      {onRenderCheckbox(detailsCheckboxProps)}\n    </div>\n  ) : (\n    // eslint-disable-next-line deprecation/deprecation\n    <div {...divProps} className={css(classNames.root, classNames.check)} />\n  );\n};\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n\nfunction _defaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <Check checked={checkboxProps.checked} />;\n}\n\nfunction _fastDefaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n}\n\nexport const DetailsRowCheck = styled<IDetailsRowCheckProps, IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>(\n  DetailsRowCheckBase,\n  getDetailsRowCheckStyles,\n  undefined,\n  { scope: 'DetailsRowCheck' },\n  true,\n);\n","import * as React from 'react';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsHeaderBase } from './DetailsHeader.base';\nimport { DetailsListLayoutMode, ColumnDragEndLocation } from './DetailsList.types';\nimport { SelectionMode } from '../../Selection';\nimport type { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IColumn, IColumnReorderOptions } from './DetailsList.types';\nimport type { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport type { ISelection } from '../../Selection';\nimport type { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport type { IDetailsColumnRenderTooltipProps } from './DetailsColumn.types';\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeader {\n  /** sets focus into the header */\n  focus: () => boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderBaseProps extends React.ClassAttributes<DetailsHeaderBase>, IDetailsItemProps {\n  /** Theme from the Higher Order Component */\n  theme?: ITheme;\n\n  /** Call to provide customized styling that will layer on top of the variant rules. */\n  styles?: IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>;\n\n  /** Ref to the component itself */\n  componentRef?: IRefObject<IDetailsHeader>;\n\n  /** Layout mode - fixedColumns or justified */\n  layoutMode: DetailsListLayoutMode;\n\n  /** Callback for when column sizing has changed */\n  onColumnIsSizingChanged?: (column: IColumn, isSizing: boolean) => void;\n\n  /** Callback for when column is resized */\n  onColumnResized?: (column: IColumn, newWidth: number, columnIndex: number) => void;\n\n  /** Callback for when column is automatically resized */\n  onColumnAutoResized?: (column: IColumn, columnIndex: number) => void;\n\n  /** Callback for when the column is clicked */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /** Callback for when the column needs to show a context menu */\n  onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback to render a tooltip for the column header */\n  onRenderColumnHeaderTooltip?: IRenderFunction<IDetailsColumnRenderTooltipProps>;\n\n  /** Whether to collapse for all visibility */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /** Whether or not all is collapsed */\n  isAllCollapsed?: boolean;\n\n  /** Callback for when collapse all is toggled */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** ariaLabel for the entire header */\n  ariaLabel?: string;\n\n  /** ariaLabel for expand/collapse group button */\n  ariaLabelForToggleAllGroupsButton?: string;\n\n  /** ariaLabel for the header checkbox that selects or deselects everything */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /** ariaLabel for the selection column */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Select all button visibility */\n  selectAllVisibility?: SelectAllVisibility;\n\n  /** Column reordering options */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /** Column reordering options */\n  columnReorderProps?: IColumnReorderHeaderProps;\n\n  /** Minimum pixels to be moved before dragging is registered */\n  minimumPixelsForDrag?: number;\n\n  /** Overriding class name */\n  className?: string;\n\n  /** If provided, can be used to render a custom checkbox */\n  onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderProps extends IDetailsHeaderBaseProps {\n  /**\n   * Column metadata\n   */\n  columns: IColumn[];\n\n  /**\n   * Selection from utilities\n   */\n  selection: ISelection;\n\n  /**\n   * Selection mode\n   */\n  selectionMode: SelectionMode;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum SelectAllVisibility {\n  none = 0,\n  hidden = 1,\n  visible = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderState {\n  columnResizeDetails?: IColumnResizeDetails;\n  isAllSelected?: boolean;\n  isSizing?: boolean;\n  isAllCollapsed?: boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnResizeDetails {\n  columnIndex: number;\n  originX?: number;\n  columnMinWidth: number;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderHeaderProps extends IColumnReorderOptions {\n  /** Callback to notify the column dragEnd event to List\n   * Need this to check whether the dragEnd has happened on\n   * corresponding list or outside of the list\n   */\n  onColumnDragEnd?: (props: { dropLocation?: ColumnDragEndLocation }, event: MouseEvent) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDropHintDetails {\n  originX: number; // X index of dropHint Element relative to header\n  startX: number; // start index of the range for the current drophint\n  endX: number; // end index of the range for the current drophint\n  dropHintElementRef: HTMLElement; // Reference for drophint to change the style when needed\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsHeaderStyleProps = Required<Pick<IDetailsHeaderProps, 'theme'>> &\n  Pick<IDetailsHeaderProps, 'className'> & {\n    /** Whether to hide select all checkbox */\n    isSelectAllHidden?: boolean;\n\n    /** Whether the \"select all\" checkbox is checked */\n    isAllSelected?: boolean;\n\n    /** Is column being resized */\n    isResizingColumn?: boolean;\n\n    /** Are all columns collapsed */\n    isAllCollapsed?: boolean;\n\n    /** Whether the header is sizing */\n    isSizing?: boolean;\n\n    /** Whether checkbox is hidden  */\n    isCheckboxHidden?: boolean;\n\n    cellStyleProps?: ICellStyleProps;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderStyles {\n  root: IStyle;\n  check: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellWrapperPadded: IStyle;\n  cellIsCheck: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellIsActionable: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellIsEmpty: IStyle;\n  cellSizer: IStyle;\n  cellSizerStart: IStyle;\n  cellSizerEnd: IStyle;\n  cellIsResizing: IStyle;\n  cellIsGroupExpander: IStyle;\n  collapseButton: IStyle;\n  checkTooltip: IStyle;\n  sizingOverlay: IStyle;\n  dropHintCircleStyle: IStyle;\n  dropHintCaretStyle: IStyle;\n  dropHintLineStyle: IStyle;\n  dropHintStyle: IStyle;\n  accessibleLabel: IStyle;\n}\n","import { EventGroup, getDocument } from '../../Utilities';\nimport type {\n  IDragDropHelper,\n  IDragDropTarget,\n  IDragDropOptions,\n  IDragDropEvent,\n  IDragDropContext,\n} from './interfaces';\nimport type { ISelection } from '../../utilities/selection/interfaces';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nexport interface IDragDropHelperParams {\n  selection: ISelection;\n  minimumPixelsForDrag?: number;\n}\n\nexport class DragDropHelper implements IDragDropHelper {\n  private _dragEnterCounts: { [key: string]: number };\n  private _isDragging: boolean;\n  private _dragData: {\n    eventTarget: EventTarget | null;\n    clientX: number;\n    clientY: number;\n    dataTransfer?: DataTransfer;\n    dropTarget?: IDragDropTarget;\n    dragTarget?: IDragDropTarget;\n  } | null;\n  private _selection: ISelection;\n  private _activeTargets: {\n    [key: string]: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n  };\n  private _events: EventGroup;\n  private _lastId: number;\n  private _initialized: boolean;\n\n  constructor(params: IDragDropHelperParams) {\n    this._selection = params.selection;\n    this._dragEnterCounts = {};\n    this._activeTargets = {};\n    this._lastId = 0;\n    // To make this class cheap to create, which allows simplifying some logic elsewhere,\n    // only initialize the event group and global event handlers as needed.\n    this._initialized = false;\n  }\n\n  public dispose(): void {\n    if (this._events) {\n      this._events.dispose();\n    }\n  }\n\n  public subscribe(\n    root: HTMLElement,\n    events: EventGroup,\n    dragDropOptions: IDragDropOptions,\n  ): {\n    key: string;\n    dispose(): void;\n  } {\n    if (!this._initialized) {\n      this._events = new EventGroup(this);\n\n      const doc = getDocument();\n\n      // clear drag data when mouse up, use capture event to ensure it will be run\n      if (doc) {\n        this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);\n        this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);\n      }\n\n      this._initialized = true;\n    }\n\n    const { key = `${++this._lastId}` } = dragDropOptions;\n\n    const handlers: {\n      callback: (context: IDragDropContext, event?: any) => void;\n      eventName: string;\n    }[] = [];\n\n    let onDragStart: (event: DragEvent) => void;\n    let onDragLeave: (event: DragEvent) => void;\n    let onDragEnter: (event: DragEvent) => void;\n    let onDragEnd: (event: DragEvent) => void;\n    let onDrop: (event: DragEvent) => void;\n    let onDragOver: (event: DragEvent) => void;\n    let onMouseDown: (event: MouseEvent) => void;\n\n    let isDraggable: boolean;\n    let isDroppable: boolean;\n\n    let activeTarget: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n\n    if (dragDropOptions && root) {\n      const { eventMap, context, updateDropState } = dragDropOptions;\n\n      const dragDropTarget: IDragDropTarget = {\n        root: root,\n        options: dragDropOptions,\n        key: key,\n      };\n\n      isDraggable = this._isDraggable(dragDropTarget);\n      isDroppable = this._isDroppable(dragDropTarget);\n\n      if (isDraggable || isDroppable) {\n        if (eventMap) {\n          for (const event of eventMap) {\n            const handler = {\n              callback: event.callback.bind(null, context),\n              eventName: event.eventName,\n            };\n\n            handlers.push(handler);\n\n            this._events.on(root, handler.eventName, handler.callback);\n          }\n        }\n      }\n\n      if (isDroppable) {\n        // If the target is droppable, wire up global event listeners to track drop-related events.\n        onDragLeave = (event: DragEvent) => {\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]--;\n            if (this._dragEnterCounts[key] === 0) {\n              updateDropState(false /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnter = (event: DragEvent) => {\n          event.preventDefault(); // needed for IE\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]++;\n            if (this._dragEnterCounts[key] === 1) {\n              updateDropState(true /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnd = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n        };\n\n        onDrop = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n\n          if (dragDropOptions.onDrop) {\n            dragDropOptions.onDrop(dragDropOptions.context.data, event);\n          }\n        };\n\n        onDragOver = (event: DragEvent) => {\n          event.preventDefault();\n          if (dragDropOptions.onDragOver) {\n            dragDropOptions.onDragOver(dragDropOptions.context.data, event);\n          }\n        };\n\n        this._dragEnterCounts[key] = 0;\n\n        // dragenter and dragleave will be fired when hover to the child element\n        // but we only want to change state when enter or leave the current element\n        // use the count to ensure it.\n        events.on(root, 'dragenter', onDragEnter);\n        events.on(root, 'dragleave', onDragLeave);\n        events.on(root, 'dragend', onDragEnd);\n        events.on(root, 'drop', onDrop);\n        events.on(root, 'dragover', onDragOver);\n      }\n\n      if (isDraggable) {\n        // If the target is draggable, wire up local event listeners for mouse events.\n        onMouseDown = this._onMouseDown.bind(this, dragDropTarget);\n        onDragEnd = this._onDragEnd.bind(this, dragDropTarget);\n\n        // We need to add in data so that on Firefox we show the ghost element when dragging\n        onDragStart = (event: DragEvent) => {\n          const options = dragDropOptions;\n          if (options && options.onDragStart) {\n            options.onDragStart(options.context.data, options.context.index, this._selection.getSelection(), event);\n          }\n          this._isDragging = true;\n          if (event.dataTransfer) {\n            event.dataTransfer.setData('id', root.id);\n          }\n        };\n\n        events.on(root, 'dragstart', onDragStart);\n        events.on(root, 'mousedown', onMouseDown);\n        events.on(root, 'dragend', onDragEnd);\n      }\n\n      activeTarget = {\n        target: dragDropTarget,\n        dispose: () => {\n          if (this._activeTargets[key] === activeTarget) {\n            delete this._activeTargets[key];\n          }\n\n          if (root) {\n            for (const handler of handlers) {\n              this._events.off(root, handler.eventName, handler.callback);\n            }\n\n            if (isDroppable) {\n              events.off(root, 'dragenter', onDragEnter);\n              events.off(root, 'dragleave', onDragLeave);\n              events.off(root, 'dragend', onDragEnd);\n              events.off(root, 'dragover', onDragOver);\n              events.off(root, 'drop', onDrop);\n            }\n\n            if (isDraggable) {\n              events.off(root, 'dragstart', onDragStart);\n              events.off(root, 'mousedown', onMouseDown);\n              events.off(root, 'dragend', onDragEnd);\n            }\n          }\n        },\n      };\n\n      this._activeTargets[key] = activeTarget;\n    }\n\n    return {\n      key: key,\n      dispose: () => {\n        if (activeTarget) {\n          activeTarget.dispose();\n        }\n      },\n    };\n  }\n\n  public unsubscribe(root: HTMLElement, key: string): void {\n    const activeTarget = this._activeTargets[key];\n\n    if (activeTarget) {\n      activeTarget.dispose();\n    }\n  }\n\n  private _onDragEnd(target: IDragDropTarget, event: DragEvent): void {\n    const { options } = target;\n    if (options.onDragEnd) {\n      options.onDragEnd(options.context.data, event);\n    }\n  }\n\n  /**\n   * clear drag data when mouse up on body\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    this._isDragging = false;\n    if (this._dragData) {\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n\n        if (activeTarget.target.root) {\n          this._events.off(activeTarget.target.root, 'mousemove');\n          this._events.off(activeTarget.target.root, 'mouseleave');\n        }\n      }\n\n      if (this._dragData.dropTarget) {\n        // raise dragleave event to let dropTarget know it need to remove dropping style\n        EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n        EventGroup.raise(this._dragData.dropTarget.root, 'drop');\n      }\n    }\n    this._dragData = null;\n  }\n\n  /**\n   * clear drag data when mouse up outside of the document\n   */\n  private _onDocumentMouseUp(event: MouseEvent): void {\n    const doc = getDocument();\n\n    if (doc && event.target === doc.documentElement) {\n      this._onMouseUp(event);\n    }\n  }\n\n  /**\n   * when mouse move over a new drop target while dragging some items,\n   * fire dragleave on the old target and fire dragenter to the new target\n   * The target will handle style change on dragenter and dragleave events.\n   */\n  private _onMouseMove(target: IDragDropTarget, event: MouseEvent): void {\n    const {\n      // use buttons property here since ev.button in some edge case is not updating well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = MOUSEMOVE_PRIMARY_BUTTON,\n    } = event;\n\n    if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onMouseUp(event);\n      return;\n    }\n\n    const { root, key } = target;\n    if (this._isDragging) {\n      if (this._isDroppable(target)) {\n        // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into\n        // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the\n        // outer target too, and we need to prevent the outer one from taking over.\n        // So, check if the last dropTarget is not a child of the current.\n\n        if (this._dragData) {\n          if (\n            this._dragData.dropTarget &&\n            this._dragData.dropTarget.key !== key &&\n            !this._isChild(root, this._dragData.dropTarget.root)\n          ) {\n            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {\n              EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n              EventGroup.raise(root, 'dragenter');\n              this._dragData.dropTarget = target;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * when mouse leave a target while dragging some items, fire dragleave to the target\n   */\n  private _onMouseLeave(target: IDragDropTarget, event: MouseEvent): void {\n    if (this._isDragging) {\n      if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {\n        EventGroup.raise(target.root, 'dragleave');\n        this._dragData.dropTarget = undefined;\n      }\n    }\n  }\n\n  /**\n   * when mouse down on a draggable item, we start to track dragdata.\n   */\n  private _onMouseDown(target: IDragDropTarget, event: MouseEvent): void {\n    if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    if (this._isDraggable(target)) {\n      this._dragData = {\n        clientX: event.clientX,\n        clientY: event.clientY,\n        eventTarget: event.target,\n        dragTarget: target,\n      };\n\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n        if (activeTarget.target.root) {\n          this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));\n          this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));\n        }\n      }\n    } else {\n      this._dragData = null;\n    }\n  }\n\n  /**\n   * determine whether the child target is a descendant of the parent\n   */\n  private _isChild(parentElement: HTMLElement, childElement: HTMLElement): boolean {\n    while (childElement && childElement.parentElement) {\n      if (childElement.parentElement === parentElement) {\n        return true;\n      }\n      childElement = childElement.parentElement;\n    }\n    return false;\n  }\n\n  private _isDraggable(target: IDragDropTarget): boolean {\n    const { options } = target;\n    return !!(options.canDrag && options.canDrag(options.context.data));\n  }\n\n  private _isDroppable(target: IDragDropTarget): boolean {\n    // TODO: take the drag item into consideration to prevent dragging an item into the same group\n    const { options } = target;\n    const dragContext =\n      this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;\n    return !!(options.canDrop && options.canDrop(options.context, dragContext));\n  }\n}\n","import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { initializeComponentRef, EventGroup, Async, classNamesFunction, composeRenderFunction } from '../../Utilities';\nimport { ColumnActionsMode } from './DetailsList.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDisposable } from '../../Utilities';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnRenderTooltipProps,\n  IDetailsColumnFilterIconProps,\n} from './DetailsColumn.types';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nconst getClassNames = classNamesFunction<IDetailsColumnStyleProps, IDetailsColumnStyles>();\nconst TRANSITION_DURATION_DRAG = 200; // ms\nconst TRANSITION_DURATION_DROP = 1500; // ms\nconst CLASSNAME_ADD_INTERVAL = 20; // ms\n\nconst defaultOnRenderHeader = (classNames: IProcessedStyleSet<IDetailsColumnStyles>) => (\n  props?: IDetailsColumnProps,\n): JSX.Element | null => {\n  if (!props) {\n    return null;\n  }\n\n  if (props.column.isIconOnly) {\n    return <span className={classNames.accessibleLabel}>{props.column.name}</span>;\n  }\n\n  return <>{props.column.name}</>;\n};\n\n/**\n * Component for rendering columns in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport class DetailsColumnBase extends React.Component<IDetailsColumnProps> {\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragDropSubscription?: IDisposable;\n  private _classNames: IProcessedStyleSet<IDetailsColumnStyles>;\n\n  constructor(props: IDetailsColumnProps) {\n    super(props);\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      column,\n      parentId,\n      isDraggable,\n      styles,\n      theme,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      useFastIcons = true,\n    } = this.props;\n    const { onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip } = this.props;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      headerClassName: column.headerClassName,\n      iconClassName: column.iconClassName,\n      isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,\n      isEmpty: !column.name,\n      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,\n      isPadded: column.isPadded,\n      isIconOnly: column.isIconOnly,\n      cellStyleProps,\n      transitionDurationDrag: TRANSITION_DURATION_DRAG,\n      transitionDurationDrop: TRANSITION_DURATION_DROP,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    const onRenderFilterIcon = column.onRenderFilterIcon\n      ? composeRenderFunction(column.onRenderFilterIcon, this._onRenderFilterIcon(this._classNames))\n      : this._onRenderFilterIcon(this._classNames);\n\n    const onRenderHeader = column.onRenderHeader\n      ? composeRenderFunction(column.onRenderHeader, defaultOnRenderHeader(this._classNames))\n      : defaultOnRenderHeader(this._classNames);\n\n    const hasInnerButton =\n      column.columnActionsMode !== ColumnActionsMode.disabled &&\n      (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined);\n    const accNameDescription = {\n      'aria-label': column.ariaLabel ? column.ariaLabel : column.isIconOnly ? column.name : undefined,\n      'aria-labelledby': column.ariaLabel || column.isIconOnly ? undefined : `${parentId}-${column.key}-name`,\n      'aria-describedby':\n        !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleDescription()\n          ? `${parentId}-${column.key}-tooltip`\n          : undefined,\n    };\n\n    return (\n      <>\n        <div\n          key={column.key}\n          ref={this._root}\n          role={'columnheader'}\n          {...(!hasInnerButton && accNameDescription)}\n          aria-sort={column.isSorted ? (column.isSortedDescending ? 'descending' : 'ascending') : 'none'}\n          // when the column is not disabled and has no inner button, this node should be in the focus order\n          data-is-focusable={\n            !hasInnerButton && column.columnActionsMode !== ColumnActionsMode.disabled ? 'true' : undefined\n          }\n          className={classNames.root}\n          data-is-draggable={isDraggable}\n          draggable={isDraggable}\n          style={{\n            width:\n              column.calculatedWidth! +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          }}\n          data-automationid={'ColumnsHeaderColumn'}\n          data-item-key={column.key}\n        >\n          {isDraggable && (\n            <IconComponent iconName=\"GripperBarVertical\" className={classNames.gripperBarVerticalStyle} />\n          )}\n          {onRenderColumnHeaderTooltip(\n            {\n              hostClassName: classNames.cellTooltip,\n              id: `${parentId}-${column.key}-tooltip`,\n              setAriaDescribedBy: false,\n              column,\n              content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : '',\n              children: (\n                <span\n                  id={`${parentId}-${column.key}`}\n                  className={classNames.cellTitle}\n                  // this node should only be focusable when it is a button\n                  data-is-focusable={\n                    hasInnerButton && column.columnActionsMode !== ColumnActionsMode.disabled ? 'true' : undefined\n                  }\n                  role={hasInnerButton ? 'button' : undefined}\n                  {...(hasInnerButton && accNameDescription)}\n                  onContextMenu={this._onColumnContextMenu}\n                  onClick={this._onColumnClick}\n                  aria-haspopup={column.columnActionsMode === ColumnActionsMode.hasDropdown ? 'menu' : undefined}\n                  aria-expanded={\n                    column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined\n                  }\n                >\n                  <span id={`${parentId}-${column.key}-name`} className={classNames.cellName}>\n                    {(column.iconName || column.iconClassName) && (\n                      <IconComponent className={classNames.iconClassName} iconName={column.iconName} />\n                    )}\n\n                    {onRenderHeader(this.props)}\n                  </span>\n\n                  {column.isFiltered && <IconComponent className={classNames.nearIcon} iconName=\"Filter\" />}\n\n                  {(column.isSorted || column.showSortIconWhenUnsorted) && (\n                    <IconComponent\n                      className={classNames.sortIcon}\n                      iconName={column.isSorted ? (column.isSortedDescending ? 'SortDown' : 'SortUp') : 'Sort'}\n                    />\n                  )}\n\n                  {column.isGrouped && <IconComponent className={classNames.nearIcon} iconName=\"GroupedDescending\" />}\n\n                  {column.columnActionsMode === ColumnActionsMode.hasDropdown &&\n                    !column.isIconOnly &&\n                    onRenderFilterIcon({\n                      'aria-hidden': true,\n                      columnProps: this.props,\n                      className: classNames.filterChevron,\n                      iconName: 'ChevronDown',\n                    })}\n                </span>\n              ),\n            },\n            this._onRenderColumnHeaderTooltip,\n          )}\n        </div>\n        {!this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleDescription() : null}\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    if (this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    const classNames = this._classNames;\n\n    if (this.props.isDropped) {\n      if (this._root.current) {\n        this._root.current.classList.add(classNames.borderAfterDropping);\n\n        this._async.setTimeout(() => {\n          if (this._root.current) {\n            this._root.current.classList.add(classNames.noBorderAfterDropping);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.remove(classNames.borderAfterDropping);\n          this._root.current.classList.remove(classNames.noBorderAfterDropping);\n        }\n      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(): void {\n    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    if (this._dragDropSubscription && !this.props.isDraggable) {\n      this._dragDropSubscription.dispose();\n      this._events.off(this._root.current, 'mousedown');\n      delete this._dragDropSubscription;\n    }\n  }\n\n  private _onRenderFilterIcon = (classNames: IProcessedStyleSet<IDetailsColumnStyles>) => (\n    props: IDetailsColumnFilterIconProps,\n  ): JSX.Element => {\n    const { columnProps, ...iconProps } = props;\n    const IconComponent = columnProps?.useFastIcons ? FontIcon : Icon;\n\n    return <IconComponent {...iconProps} />;\n  };\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: IDetailsColumnRenderTooltipProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnClick, column } = this.props;\n\n    if (column.columnActionsMode === ColumnActionsMode.disabled) {\n      return;\n    }\n\n    if (column.onColumnClick) {\n      column.onColumnClick(ev, column);\n    }\n\n    if (onColumnClick) {\n      onColumnClick(ev, column);\n    }\n  };\n\n  private _getColumnDragDropOptions(): IDragDropOptions {\n    const { columnIndex } = this.props;\n    const options = {\n      selectionIndex: columnIndex,\n      context: { data: columnIndex, index: columnIndex },\n      canDrag: () => this.props.isDraggable!,\n      canDrop: () => false,\n      onDragStart: this._onDragStart,\n      updateDropState: () => undefined,\n      onDrop: () => undefined,\n      onDragEnd: this._onDragEnd,\n    };\n    return options;\n  }\n\n  private _hasAccessibleDescription(): boolean {\n    const { column } = this.props;\n\n    return !!(\n      column.filterAriaLabel ||\n      column.sortAscendingAriaLabel ||\n      column.sortDescendingAriaLabel ||\n      column.groupAriaLabel ||\n      column.sortableAriaLabel\n    );\n  }\n\n  private _renderAccessibleDescription(): JSX.Element | null {\n    const { column, parentId } = this.props;\n    const classNames = this._classNames;\n\n    return this._hasAccessibleDescription() && !this.props.onRenderColumnHeaderTooltip ? (\n      <label\n        key={`${column.key}_label`}\n        id={`${parentId}-${column.key}-tooltip`}\n        className={classNames.accessibleLabel}\n        hidden\n      >\n        {(column.isFiltered && column.filterAriaLabel) || null}\n        {((column.isSorted || column.showSortIconWhenUnsorted) &&\n          (column.isSorted\n            ? column.isSortedDescending\n              ? column.sortDescendingAriaLabel\n              : column.sortAscendingAriaLabel\n            : column.sortableAriaLabel)) ||\n          null}\n        {(column.isGrouped && column.groupAriaLabel) || null}\n      </label>\n    ) : null;\n  }\n\n  private _onDragStart = (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (itemIndex) {\n      this._updateHeaderDragInfo(itemIndex);\n      this._root.current!.classList.add(classNames.borderWhileDragging);\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.add(classNames.noBorderWhileDragging);\n        }\n      }, CLASSNAME_ADD_INTERVAL);\n    }\n  };\n\n  private _onDragEnd = (item?: any, event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (event) {\n      this._updateHeaderDragInfo(-1, event);\n    }\n    this._root.current!.classList.remove(classNames.borderWhileDragging);\n    this._root.current!.classList.remove(classNames.noBorderWhileDragging);\n  };\n\n  private _updateHeaderDragInfo = (itemIndex: number, event?: MouseEvent) => {\n    /* eslint-disable deprecation/deprecation */\n    if (this.props.setDraggedItemIndex) {\n      this.props.setDraggedItemIndex(itemIndex);\n    }\n    /* eslint-enable deprecation/deprecation */\n    if (this.props.updateDragInfo) {\n      this.props.updateDragInfo({ itemIndex }, event);\n    }\n  };\n\n  private _onColumnContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnContextMenu, column } = this.props;\n    if (column.onColumnContextMenu) {\n      column.onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n    if (onColumnContextMenu) {\n      onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const { isDraggable } = this.props;\n    // Ignore anything except the primary button.\n    if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON) {\n      ev.stopPropagation();\n    }\n  };\n\n  private _addDragDropHandling() {\n    this._dragDropSubscription = this.props.dragDropHelper!.subscribe(\n      this._root.current!,\n      this._events,\n      this._getColumnDragDropOptions(),\n    );\n\n    // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n    this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);\n  }\n}\n","import { getFocusStyle, getGlobalClassNames, hiddenContentStyle, FontWeights } from '../../Styling';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { getCellStyles } from './DetailsHeader.styles';\nimport type { IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  isActionable: 'is-actionable',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  isEmpty: 'is-empty',\n  isIconVisible: 'is-icon-visible',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',\n  nearIcon: 'ms-DetailsColumn-nearIcon',\n};\n\nexport const getDetailsColumnStyles = (props: IDetailsColumnStyleProps): IDetailsColumnStyles => {\n  const {\n    theme,\n    headerClassName,\n    iconClassName,\n    isActionable,\n    isEmpty,\n    isIconVisible,\n    isPadded,\n    isIconOnly,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    transitionDurationDrag,\n    transitionDurationDrop,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    dropdownChevronForegroundColor: palette.neutralSecondary,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const nearIconStyle: IStyle = {\n    color: colors.iconForegroundColor,\n    opacity: 1,\n    paddingLeft: 8,\n  };\n\n  const borderWhileDragging: IStyle = {\n    outline: `1px solid ${palette.themePrimary}`,\n  };\n\n  const borderAfterDragOrDrop: IStyle = {\n    outlineColor: 'transparent',\n  };\n\n  return {\n    root: [\n      getCellStyles(props),\n      fonts.small,\n      isActionable && [\n        classNames.isActionable,\n        {\n          selectors: {\n            ':hover': {\n              color: semanticColors.bodyText,\n              background: semanticColors.listHeaderBackgroundHovered,\n            },\n            ':active': {\n              background: semanticColors.listHeaderBackgroundPressed,\n            },\n          },\n        },\n      ],\n      isEmpty && [\n        classNames.isEmpty,\n        {\n          textOverflow: 'clip',\n        },\n      ],\n      isIconVisible && classNames.isIconVisible,\n      isPadded && {\n        paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n      },\n      {\n        selectors: {\n          ':hover i[data-icon-name=\"GripperBarVertical\"]': {\n            display: 'block',\n          },\n        },\n      },\n      headerClassName,\n    ],\n\n    gripperBarVerticalStyle: {\n      display: 'none',\n      position: 'absolute',\n      textAlign: 'left',\n      color: palette.neutralTertiary,\n      left: 1,\n    },\n\n    nearIcon: [classNames.nearIcon, nearIconStyle],\n\n    sortIcon: [\n      nearIconStyle,\n      {\n        paddingLeft: 4,\n        position: 'relative',\n        top: 1,\n      },\n    ],\n\n    iconClassName: [\n      {\n        color: colors.iconForegroundColor,\n        opacity: 1,\n      },\n      iconClassName,\n    ],\n\n    filterChevron: [\n      classNames.filterChevron,\n      {\n        color: colors.dropdownChevronForegroundColor,\n        paddingLeft: 6,\n        verticalAlign: 'middle',\n        fontSize: fonts.small.fontSize,\n      },\n    ],\n\n    cellTitle: [\n      classNames.cellTitle,\n      getFocusStyle(theme),\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'stretch',\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n        ...(isIconOnly\n          ? {\n              alignContent: 'flex-end',\n              maxHeight: '100%',\n              flexWrap: 'wrap-reverse',\n            }\n          : {}),\n      },\n    ],\n\n    cellName: [\n      classNames.cellName,\n      {\n        flex: '0 1 auto',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontWeight: FontWeights.semibold,\n        fontSize: fonts.medium.fontSize,\n      },\n      isIconOnly && {\n        selectors: {\n          [`.${classNames.nearIcon}`]: {\n            paddingLeft: 0,\n          },\n        },\n      },\n    ],\n\n    cellTooltip: {\n      display: 'block',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    borderWhileDragging: borderWhileDragging,\n\n    noBorderWhileDragging: [borderAfterDragOrDrop, { transition: `outline ${transitionDurationDrag}ms ease` }],\n\n    borderAfterDropping: borderWhileDragging,\n\n    noBorderAfterDropping: [borderAfterDragOrDrop, { transition: `outline  ${transitionDurationDrop}ms ease` }],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsColumnBase } from './DetailsColumn.base';\nimport { getDetailsColumnStyles } from './DetailsColumn.styles';\nimport type { IDetailsColumnProps, IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\n\nexport const DetailsColumn: React.FunctionComponent<IDetailsColumnProps> = styled<\n  IDetailsColumnProps,\n  IDetailsColumnStyleProps,\n  IDetailsColumnStyles\n>(DetailsColumnBase, getDetailsColumnStyles, undefined, { scope: 'DetailsColumn' });\n\nexport type { IDetailsColumnProps };\n","import * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn, IDetailsHeaderBaseProps, IColumnDragDropDetails } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { ITooltipHostProps } from '../../Tooltip';\nimport type { ISelection } from '../../Selection';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\nimport type {\n  IDropHintDetails,\n  IColumnReorderHeaderProps,\n  IDetailsHeaderState,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles,\n  IDetailsHeader,\n} from './DetailsHeader.types';\n\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsHeaderBase\n  extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\n  implements IDetailsHeader {\n  public static defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true,\n  };\n\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\n  private _rootElement = React.createRef<HTMLElement>();\n  private _events: EventGroup;\n  private _rootComponent = React.createRef<IFocusZone>();\n  private _id: string;\n  private _draggedColumnIndex = -1;\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\n  private _dragDropHelper: DragDropHelper;\n  private _currentDropHintIndex: number;\n  private _subscriptionObject?: IDisposable;\n  private _onDropIndexInfo: {\n    sourceIndex: number;\n    targetIndex: number;\n  };\n\n  constructor(props: IDetailsHeaderBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: this.props.isAllCollapsed,\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\n    };\n\n    this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1,\n    };\n    this._id = getId('header');\n    this._currentDropHintIndex = -1;\n\n    // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n    this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: () => {\n          return;\n        },\n      } as ISelection,\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\n    });\n  }\n\n  public componentDidMount(): void {\n    const { selection } = this.props;\n\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n\n    // this._rootElement.current will be null in tests using react-test-renderer\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\n      const { columns = NO_COLUMNS } = this.props;\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1,\n        };\n      }\n    }\n\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    this._dragDropHelper.dispose();\n\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      columns = NO_COLUMNS,\n      ariaLabel,\n      ariaLabelForToggleAllGroupsButton,\n      ariaLabelForSelectAllCheckbox,\n      selectAllVisibility,\n      ariaLabelForSelectionColumn,\n      indentWidth,\n      onColumnClick,\n      onColumnContextMenu,\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\n      styles,\n      selectionMode,\n      theme,\n      onRenderDetailsCheckbox,\n      groupNestingDepth,\n      useFastIcons,\n      checkboxVisibility,\n      className,\n    } = this.props;\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n\n    const columnReorderProps = this._getColumnReorderProps();\n    const frozenColumnCountFromStart =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\n        ? columnReorderProps.frozenColumnCountFromStart\n        : 0;\n    const frozenColumnCountFromEnd =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\n        ? columnReorderProps.frozenColumnCountFromEnd\n        : 0;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing,\n      isAllCollapsed,\n      isCheckboxHidden,\n      className,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n    const showGroupExpander =\n      groupNestingDepth! > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible;\n    const columnIndexOffset = 1 + (showCheckbox ? 1 : 0) + (showGroupExpander ? 1 : 0);\n\n    const isRTL = getRTL(theme);\n    return (\n      <FocusZone\n        role=\"row\"\n        aria-label={ariaLabel}\n        className={classNames.root}\n        componentRef={this._rootComponent}\n        elementRef={this._rootElement}\n        onMouseMove={this._onRootMouseMove}\n        data-automationid=\"DetailsHeader\"\n        direction={FocusZoneDirection.horizontal}\n      >\n        {showCheckbox\n          ? [\n              <div\n                key=\"__checkbox\"\n                className={classNames.cellIsCheck}\n                aria-labelledby={`${this._id}-checkTooltip`}\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\n                role={'columnheader'}\n              >\n                {onRenderColumnHeaderTooltip(\n                  {\n                    hostClassName: classNames.checkTooltip,\n                    id: `${this._id}-checkTooltip`,\n                    setAriaDescribedBy: false,\n                    content: ariaLabelForSelectAllCheckbox,\n                    children: (\n                      <DetailsRowCheck\n                        id={`${this._id}-check`}\n                        aria-label={\n                          selectionMode === SelectionMode.multiple\n                            ? ariaLabelForSelectAllCheckbox\n                            : ariaLabelForSelectionColumn\n                        }\n                        data-is-focusable={!isCheckboxHidden || undefined}\n                        isHeader={true}\n                        selected={isAllSelected}\n                        anySelected={false}\n                        canSelect={!isCheckboxHidden}\n                        className={classNames.check}\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\n                        useFastIcons={useFastIcons}\n                        isVisible={isCheckboxAlwaysVisible}\n                      />\n                    ),\n                  },\n                  this._onRenderColumnHeaderTooltip,\n                )}\n              </div>,\n              !this.props.onRenderColumnHeaderTooltip ? (\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectAllCheckbox}\n                  </label>\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectionColumn}\n                  </label>\n                ) : null\n              ) : null,\n            ]\n          : null}\n        {showGroupExpander ? (\n          <div\n            className={classNames.cellIsGroupExpander}\n            onClick={this._onToggleCollapseAll}\n            data-is-focusable={true}\n            aria-label={ariaLabelForToggleAllGroupsButton}\n            aria-expanded={!isAllCollapsed}\n            role=\"columnheader\"\n          >\n            <IconComponent\n              className={classNames.collapseButton}\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\n            />\n            {/* Use this span in addition to aria-label, otherwise VoiceOver ignores the column */}\n            <span className={classNames.accessibleLabel}>{ariaLabelForToggleAllGroupsButton}</span>\n          </div>\n        ) : null}\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\n        {columns.map((column: IColumn, columnIndex: number) => {\n          const _isDraggable = columnReorderProps\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\n            : false;\n          return [\n            columnReorderProps &&\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\n              this._renderDropHint(columnIndex),\n            <DetailsColumn\n              column={column}\n              styles={column.styles}\n              key={column.key}\n              columnIndex={columnIndexOffset + columnIndex}\n              parentId={this._id}\n              isDraggable={_isDraggable}\n              updateDragInfo={this._updateDragInfo}\n              dragDropHelper={this._dragDropHelper}\n              onColumnClick={onColumnClick}\n              onColumnContextMenu={onColumnContextMenu}\n              // Do not render tooltips by default, but allow for override via props.\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\n              cellStyleProps={this.props.cellStyleProps}\n              useFastIcons={useFastIcons}\n            />,\n            this._renderColumnDivider(columnIndex),\n          ];\n        })}\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\n        {isSizing && (\n          <Layer>\n            <div\n              className={classNames.sizingOverlay}\n              onMouseMove={this._onSizerMouseMove}\n              onMouseUp={this._onSizerMouseUp}\n            />\n          </Layer>\n        )}\n      </FocusZone>\n    );\n  }\n\n  /** Set focus to the active thing in the focus area. */\n  public focus(): boolean {\n    return !!this._rootComponent.current?.focus();\n  }\n\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\n    const { columnReorderOptions, columnReorderProps } = this.props;\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\n  }\n\n  private _getHeaderDragDropOptions(): IDragDropOptions {\n    const options = {\n      selectionIndex: 1,\n      context: { data: this, index: 0 },\n      canDrag: () => false,\n      canDrop: () => true,\n      onDragStart: () => undefined,\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: () => undefined,\n      onDragOver: this._onDragOver,\n    };\n    return options;\n  }\n\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n      this._resetDropHints();\n    }\n  };\n\n  private _isValidCurrentDropHintIndex() {\n    return this._currentDropHintIndex >= 0;\n  }\n\n  private _onDragOver = (item: any, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0) {\n      event.stopPropagation();\n      this._computeDropHintToBeShown(event.clientX);\n    }\n  };\n\n  private _onDrop = (item?: any, event?: DragEvent): void => {\n    // Safe to assume this is defined since we're handling a drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n\n    // Target index will not get changed if draggeditem is after target item.\n    if (this._draggedColumnIndex >= 0 && event) {\n      const targetIndex =\n        this._draggedColumnIndex > this._currentDropHintIndex\n          ? this._currentDropHintIndex\n          : this._currentDropHintIndex - 1;\n      const isValidDrop = this._isValidCurrentDropHintIndex();\n      event.stopPropagation();\n      if (isValidDrop) {\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\n        this._onDropIndexInfo.targetIndex = targetIndex;\n\n        if (columnReorderProps.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: this._draggedColumnIndex,\n            targetIndex: targetIndex,\n          };\n          columnReorderProps.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderProps.handleColumnReorder) {\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n\n    this._resetDropHints();\n    this._dropHintDetails = {};\n    this._draggedColumnIndex = -1;\n  };\n\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n  private _isCheckboxColumnHidden(): boolean {\n    const { selectionMode, checkboxVisibility } = this.props;\n\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  }\n\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\n    // Safe to assume this is defined since we're handling a drag event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    const itemIndex = props.itemIndex;\n    if (itemIndex >= 0) {\n      // Column index is set based on the checkbox\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n      this._getDropHintPositions();\n      if (columnReorderProps.onColumnDragStart) {\n        columnReorderProps.onColumnDragStart(true);\n      }\n    } else if (event && this._draggedColumnIndex >= 0) {\n      this._resetDropHints();\n      this._draggedColumnIndex = -1;\n      this._dropHintDetails = {};\n      if (columnReorderProps.onColumnDragEnd) {\n        const columnDragEndLocation = this._isEventOnHeader(event);\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\n      }\n    }\n  };\n\n  private _resetDropHints(): void {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n      this._currentDropHintIndex = -1;\n    }\n  }\n\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\n  }\n\n  private _getDropHintPositions = (): void => {\n    const { columns = NO_COLUMNS } = this.props;\n    // Safe to assume this is defined since we're handling a drag/drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    let prevX = 0;\n    let prevMid = 0;\n    let prevRef: HTMLElement;\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n      if (this._rootElement.current) {\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\n        if (dropHintElement) {\n          if (i === frozenColumnCountFromStart) {\n            prevX = dropHintElement.offsetLeft;\n            prevMid = dropHintElement.offsetLeft;\n            prevRef = dropHintElement;\n          } else {\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\n            this._dropHintDetails[i - 1] = {\n              originX: prevX,\n              startX: prevMid!,\n              endX: newMid,\n              dropHintElementRef: prevRef!,\n            };\n            prevMid = newMid;\n            prevRef = dropHintElement;\n            prevX = dropHintElement.offsetLeft;\n            if (i === columns.length - frozenColumnCountFromEnd) {\n              this._dropHintDetails[i] = {\n                originX: prevX,\n                startX: prevMid!,\n                endX: dropHintElement.offsetLeft,\n                dropHintElementRef: prevRef,\n              };\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n   */\n  private _computeDropHintToBeShown = (clientX: number): void => {\n    const isRtl = getRTL(this.props.theme);\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      const headerOriginX = clientRect.left;\n      const eventXRelativePosition = clientX - headerOriginX;\n      const currentDropHintIndex = this._currentDropHintIndex;\n      if (this._isValidCurrentDropHintIndex()) {\n        if (\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex!].startX,\n            this._dropHintDetails[currentDropHintIndex!].endX,\n          )\n        ) {\n          return;\n        }\n      }\n      const { columns = NO_COLUMNS } = this.props;\n      // Safe to assume this is defined since we're handling a drag/drop event\n      const columnReorderProps = this._getColumnReorderProps()!;\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n      const currentIndex: number = frozenColumnCountFromStart;\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\n      let indexToUpdate = -1;\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\n        indexToUpdate = currentIndex;\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\n        indexToUpdate = lastValidColumn;\n      } else if (this._isValidCurrentDropHintIndex()) {\n        if (\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! + 1;\n        } else if (\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! - 1;\n        }\n      }\n      if (indexToUpdate === -1) {\n        let startIndex = frozenColumnCountFromStart;\n        let endIndex = lastValidColumn;\n        while (startIndex < endIndex) {\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\n          if (\n            _liesBetween(\n              isRtl,\n              eventXRelativePosition,\n              this._dropHintDetails[middleIndex].startX,\n              this._dropHintDetails[middleIndex].endX,\n            )\n          ) {\n            indexToUpdate = middleIndex;\n            break;\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            endIndex = middleIndex;\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            startIndex = middleIndex;\n          }\n        }\n      }\n\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\n        if (this._isValidCurrentDropHintIndex()) {\n          this._resetDropHints();\n        }\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n        this._resetDropHints();\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n        this._currentDropHintIndex = indexToUpdate;\n      }\n    }\n  };\n\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      if (\n        event.clientX > clientRect.left &&\n        event.clientX < clientRect.right &&\n        event.clientY > clientRect.top &&\n        event.clientY < clientRect.bottom\n      ) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  }\n\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { columnResizeDetails } = this.state;\n    const classNames = this._classNames;\n\n    return column.isResizable ? (\n      <div\n        key={`${column.key}_sizer`}\n        aria-hidden={true}\n        role=\"button\"\n        data-is-focusable={false}\n        onClick={_stopPropagation}\n        data-sizer-index={columnIndex}\n        onBlur={this._onSizerBlur}\n        className={css(\n          classNames.cellSizer,\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\n          {\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\n          },\n        )}\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\n      />\n    ) : null;\n  };\n\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { onRenderDivider } = column;\n    return onRenderDivider\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\n      : this._renderColumnSizer({ column, columnIndex });\n  }\n\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\n    const classNames = this._classNames;\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return (\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\n        <div\n          role=\"presentation\"\n          key={`dropHintCircleKey`}\n          className={classNames.dropHintCaretStyle}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          aria-hidden={true}\n        >\n          <IconComponent iconName={'CircleShapeSolid'} />\n        </div>\n        <div\n          key={`dropHintLineKey`}\n          aria-hidden={true}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          className={classNames.dropHintLineStyle}\n        />\n      </div>\n    );\n  }\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  }\n\n  /**\n   * Called when the select all toggle is clicked.\n   */\n  private _onSelectAllClicked = (): void => {\n    const { selection } = this.props;\n\n    if (selection) {\n      selection.toggleAllSelected();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n    const columnIndex = Number(columnIndexAttr);\n    const { columns = NO_COLUMNS } = this.props;\n\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    this.setState({\n      columnResizeDetails: {\n        columnIndex: columnIndex,\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\n        originX: ev.clientX,\n      },\n    });\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n      this.setState({ isSizing: true });\n    }\n  };\n\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\n\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n\n    if (!columnIndexAttr || isSizing) {\n      return;\n    }\n\n    const columnIndex = Number(columnIndexAttr);\n\n    if (!columnResizeDetails) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: {\n            columnIndex: columnIndex,\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\n          },\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    } else {\n      let increment: number | undefined;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: undefined,\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.left) {\n        increment = getRTL(this.props.theme) ? 1 : -1;\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.right) {\n        increment = getRTL(this.props.theme) ? -1 : 1;\n      }\n\n      if (increment) {\n        if (!ev.shiftKey) {\n          increment *= 10;\n        }\n\n        this.setState({\n          columnResizeDetails: {\n            ...columnResizeDetails,\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\n          },\n        });\n\n        if (onColumnResized) {\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  /**\n   * mouse move event handler in the header\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n   *\n   * @param ev - mouse move event\n   */\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const {\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons,\n    } = ev;\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onSizerMouseUp(ev);\n      return;\n    }\n\n    if (ev.clientX !== columnResizeDetails!.originX) {\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\n      }\n    }\n\n    if (onColumnResized) {\n      let movement = ev.clientX - columnResizeDetails!.originX!;\n\n      if (getRTL(this.props.theme)) {\n        movement = -movement;\n      }\n\n      onColumnResized(\n        columns[columnResizeDetails!.columnIndex],\n        columnResizeDetails!.columnMinWidth + movement,\n        columnResizeDetails!.columnIndex,\n      );\n    }\n  };\n\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { columnResizeDetails } = this.state;\n\n    if (columnResizeDetails) {\n      this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false,\n      });\n    }\n  };\n\n  /**\n   * mouse up event handler in the header\n   * clear the resize related state.\n   * This is to ensure we can catch double click event\n   *\n   * @param ev - mouse up event\n   */\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    this.setState({\n      columnResizeDetails: undefined,\n      isSizing: false,\n    });\n\n    if (onColumnIsSizingChanged) {\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\n    }\n  };\n\n  private _onSelectionChanged(): void {\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected,\n      });\n    }\n  }\n\n  private _onToggleCollapseAll = (): void => {\n    const { onToggleCollapseAll } = this.props;\n    const newCollapsed = !this.state.isAllCollapsed;\n    this.setState({\n      isAllCollapsed: newCollapsed,\n    });\n    if (onToggleCollapseAll) {\n      onToggleCollapseAll(newCollapsed);\n    }\n  };\n}\n\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a >= b : a <= b;\n}\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a <= b : a >= b;\n}\n\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\n  ev.stopPropagation();\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsHeaderBase } from './DetailsHeader.base';\nimport { getDetailsHeaderStyles } from './DetailsHeader.styles';\nimport type {\n  IDetailsHeaderProps,\n  IDetailsHeaderBaseProps,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles,\n} from './DetailsHeader.types';\n\nexport const DetailsHeader: React.FunctionComponent<IDetailsHeaderBaseProps> = styled<\n  IDetailsHeaderBaseProps,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles\n>(DetailsHeaderBase, getDetailsHeaderStyles, undefined, { scope: 'DetailsHeader' });\n\nexport type { IDetailsHeaderProps, IDetailsHeaderBaseProps };\n","import * as React from 'react';\nimport { composeRenderFunction, css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport type { IColumn } from './DetailsList.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IDetailsColumnFieldProps } from './DetailsColumn.types';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    isSelected,\n    onRenderItemColumn,\n    getCellValueKey,\n    onRenderField: propsOnRenderField,\n    cellsByColumn,\n    enableUpdateAnimations,\n    rowHeaderId,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  const defaultOnRenderField = React.useCallback(\n    (fieldProps: IDetailsColumnFieldProps): JSX.Element | null => {\n      const { column, cellValueKey, className, onRender, item: fieldItem, itemIndex: fieldItemIndex } = fieldProps;\n\n      const width: string | number =\n        typeof column.calculatedWidth === 'undefined'\n          ? 'auto'\n          : column.calculatedWidth +\n            cellStyleProps.cellLeftPadding +\n            cellStyleProps.cellRightPadding +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n\n      return (\n        <div\n          key={key}\n          id={column.isRowHeader ? rowHeaderId : undefined}\n          role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n          aria-readonly\n          className={css(\n            column.className,\n            column.isMultiline && rowClassNames.isMultiline,\n            column.isRowHeader && rowClassNames.isRowHeader,\n            rowClassNames.cell,\n            column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n            className,\n          )}\n          style={{ width }}\n          data-automationid=\"DetailsRowCell\"\n          data-automation-key={column.key}\n        >\n          {onRender(fieldItem, fieldItemIndex, column)}\n        </div>\n      );\n    },\n    [rowClassNames, cellStyleProps, rowHeaderId],\n  );\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map(column => {\n        const { getValueKey = getCellValueKey } = column;\n\n        const onRender =\n          (cellsByColumn && column.key in cellsByColumn && (() => cellsByColumn[column.key])) ||\n          column.onRender ||\n          onRenderItemColumn ||\n          defaultOnRender;\n\n        let onRenderField = defaultOnRenderField;\n\n        if (column.onRenderField) {\n          onRenderField = composeRenderFunction(column.onRenderField, onRenderField);\n        }\n\n        if (propsOnRenderField) {\n          onRenderField = composeRenderFunction(propsOnRenderField, onRenderField);\n        }\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        return onRenderField({\n          item,\n          itemIndex,\n          isSelected,\n          column,\n          cellValueKey,\n          className: showAnimation ? rowClassNames.cellAnimation : undefined,\n          onRender,\n        });\n      })}\n    </div>\n  );\n};\n\nfunction defaultOnRender(item?: any, index?: number, column?: IColumn): React.ReactNode {\n  if (!item || !column) {\n    return null;\n  }\n\n  return getCellText(item, column);\n}\n","import * as React from 'react';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n  composeComponentAs,\n} from '../../Utilities';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { classNamesFunction } from '../../Utilities';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsRowBaseProps, IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport type { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport { getId } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLElement>();\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription?: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n  private _ariaRowDescriptionId: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsRowBaseProps,\n    previousState: IDetailsRowState,\n  ): IDetailsRowState {\n    return {\n      ...previousState,\n      selectionState: getSelectionState(nextProps),\n    };\n  }\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n  public componentDidMount(): void {\n    const { dragDropHelper, selection, item, onDidMount } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      id,\n      flatIndexOffset = 2,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      onRenderField,\n      getCellValueKey,\n      selectionMode,\n      rowWidth = 0,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescription,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n      group,\n      focusZoneProps,\n      disabled = false,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaRowDescription = getRowAriaDescription ? getRowAriaDescription(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    const ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;\n    const ariaSetSize = group ? group.count : undefined;\n    const focusZoneDirection = focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.horizontal;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n        disabled,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const RowFields = rowFieldsAs ? composeComponentAs(rowFieldsAs, DetailsRowFields) : DetailsRowFields;\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        rowHeaderId={`${id}-header`}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        isSelected={isSelected}\n        columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0)}\n        onRenderItemColumn={onRenderItemColumn}\n        onRenderField={onRenderField}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    const defaultRole = 'row';\n    const role = this.props.role ? this.props.role : defaultRole;\n    this._ariaRowDescriptionId = getId('DetailsRow-description');\n\n    // When the user does not specify any column is a row-header in the columns props,\n    // The aria-labelledby of the checkbox does not specify {id}-header.\n    const hasRowHeader = columns.some(column => {\n      return !!column.isRowHeader;\n    });\n    const ariaLabelledby = `${id}-checkbox` + (hasRowHeader ? ` ${id}-header` : '');\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        {...focusZoneProps}\n        direction={focusZoneDirection}\n        elementRef={this._root}\n        componentRef={this._focusZone}\n        role={role}\n        aria-label={ariaLabel}\n        aria-disabled={disabled || undefined}\n        aria-describedby={ariaRowDescription ? this._ariaRowDescriptionId : ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-selection-touch-invoke={true}\n        data-selection-disabled={disabled || undefined}\n        data-item-index={itemIndex}\n        aria-rowindex={ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined}\n        aria-level={(groupNestingDepth && groupNestingDepth + 1) || undefined}\n        aria-posinset={ariaPositionInSet}\n        aria-setsize={ariaSetSize}\n        data-automationid=\"DetailsRow\"\n        style={{ minWidth: rowWidth }}\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {ariaRowDescription ? (\n          <span key=\"description\" role=\"presentation\" hidden={true} id={this._ariaRowDescriptionId}>\n            {ariaRowDescription}\n          </span>\n        ) : null}\n        {showCheckbox && (\n          <div role=\"gridcell\" data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              id: id ? `${id}-checkbox` : undefined,\n              selected: isSelected,\n              selectionMode,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              'aria-labelledby': id ? ariaLabelledby : undefined,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          role=\"gridcell\"\n          count={groupNestingDepth! - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              rowHeaderId={`${id}-header`}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n\n        <span\n          role=\"checkbox\"\n          className={this._classNames.checkCover}\n          aria-checked={isSelected}\n          data-selection-toggle={true}\n        />\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current?.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState,\n      });\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n\nfunction getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n  const { itemIndex, selection } = props;\n\n  return {\n    isSelected: !!selection?.isIndexSelected(itemIndex),\n    isSelectionModal: !!selection?.isModal?.(),\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsRowBase } from './DetailsRow.base';\nimport { getDetailsRowStyles } from './DetailsRow.styles';\nimport type {\n  IDetailsRowProps,\n  IDetailsRowBaseProps,\n  IDetailsRowStyleProps,\n  IDetailsRowStyles,\n} from './DetailsRow.types';\n\nexport const DetailsRow: React.FunctionComponent<IDetailsRowBaseProps> = styled<\n  IDetailsRowBaseProps,\n  IDetailsRowStyleProps,\n  IDetailsRowStyles\n>(DetailsRowBase, getDetailsRowStyles, undefined, {\n  scope: 'DetailsRow',\n});\n\nexport type { IDetailsRowProps, IDetailsRowBaseProps };\n","import * as React from 'react';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Spinner}\n */\nexport interface ISpinner {}\n\n/**\n * Spinner component props.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the ISpinner interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ISpinner>;\n\n  /**\n   * @deprecated Use `size` instead. Will be removed at \\>= 2.0.0.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  type?: SpinnerType;\n\n  /**\n   * The size of Spinner to render.\n   * @defaultvalue SpinnerType.medium\n   */\n  size?: SpinnerSize;\n\n  /**\n   * The label to show next to the Spinner. Label updates will be announced to the screen readers.\n   * Use ariaLive to control politeness level.\n   */\n  label?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the Spinner.\n   */\n  className?: string;\n\n  /**\n   * Politeness setting for label update announcement.\n   * @defaultvalue polite\n   */\n  ariaLive?: 'assertive' | 'polite' | 'off';\n\n  /**\n   * Alternative status label for screen reader\n   */\n  ariaLabel?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>;\n\n  /**\n   * The position of the label in regards of the spinner animation.\n   * @defaultvalue SpinnerLabelPosition.bottom\n   */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Possible variations of the spinner circle size.\n * {@docCategory Spinner}\n */\nexport enum SpinnerSize {\n  /**\n   * 12px Spinner diameter\n   */\n  xSmall = 0,\n\n  /**\n   * 16px Spinner diameter\n   */\n  small = 1,\n\n  /**\n   * 20px Spinner diameter\n   */\n  medium = 2,\n\n  /**\n   * 28px Spinner diameter\n   */\n  large = 3,\n}\n\n/**\n * Possible locations of the label in regards to the spinner\n * {@docCategory Spinner}\n */\nexport type SpinnerLabelPosition = 'top' | 'right' | 'bottom' | 'left';\n\n/**\n * @deprecated Use `SpinnerSize` instead. Will be removed at \\>= 2.0.0.\n * {@docCategory Spinner}\n */\nexport enum SpinnerType {\n  /**\n   * @deprecated Use `SpinnerSize.medium` instead. Will be removed at \\>= 2.0.0.\n   */\n  normal = 0,\n\n  /**\n   * @deprecated Use `SpinnerSize.large` instead. Will be removed at \\>= 2.0.0.\n   */\n  large = 1,\n}\n\n/**\n * The props needed to construct styles.\n * This represents the simplified set of immutable things which control the class names.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyleProps {\n  /** Theme provided by High-Order Component. */\n  theme: ITheme;\n\n  /** Size of the spinner animation. */\n  size?: SpinnerSize;\n\n  /** CSS class name for the component attached to the root stylable area. */\n  className?: string;\n\n  /** Position of the label in regards to the spinner animation. */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyles {\n  /** Styles for the root element. Refers to the wrapper containing both the circle and the label. */\n  root?: IStyle;\n\n  /** Styles for the spinner circle animation. */\n  circle?: IStyle;\n\n  /** Styles for the label accompanying the circle. */\n  label?: IStyle;\n\n  /** Styles for the hidden helper element to aid with screen readers. */\n  screenReaderText?: IStyle;\n}\n","import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  KeyCodes,\n  elementContains,\n  findScrollableParent,\n  getParent,\n  getDocument,\n  getWindow,\n  isElementTabbable,\n  css,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport { SelectionMode } from './interfaces';\nimport type { ISelection, IObjectWithKey } from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nconst SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nconst SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZone {\n  /**\n   * Method to ignore subsequent focus.\n   */\n  ignoreNextFocus: () => void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\n  /**\n   * Reference to the component interface.\n   */\n  componentRef?: () => void;\n  /**\n   * Required {@link ISelection} instance bound to the {@link SelectionZone}.\n   */\n  selection: ISelection;\n  /**\n   * @deprecated No longer in use, focus is now managed by {@link FocusZone}.\n   */\n  layout?: {};\n  /**\n   * The mode of Selection, where the value is one of\n   * 'none', 'single', or 'multiple'.\n   *\n   * @defaultvalue {@link SelectionMode.multiple}\n   */\n  selectionMode?: SelectionMode;\n  /**\n   * If true, selection is preserved on outer click.\n   */\n  selectionPreservedOnEmptyClick?: boolean;\n  /**\n   * If true, disables automatic selection on input elements.\n   */\n  disableAutoSelectOnInputElements?: boolean;\n  /**\n   * If true, modal selection is enabled on touch event.\n   */\n  enterModalOnTouch?: boolean;\n  /**\n   * Determines whether elements with the attribute `data-selection-touch-invoke` should be used as invocation targets\n   * for an item if the user is using touch.\n   *\n   * @defaultvalue false\n   */\n  enableTouchInvocationTarget?: boolean;\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n  /**\n   * Determines if elements within the selection zone that DO NOT have the 'data-selection-toggle' or\n   * 'data-selection-all-toggle' attribute are clickable and can alter the selection.\n   *\n   * @defaultvalue true\n   */\n  selectionClearedOnSurfaceClick?: boolean;\n\n  /**\n   * Determines if pressing the Escape clears the selection.\n   *\n   * @defaultvalue true\n   */\n  selectionClearedOnEscapePress?: boolean;\n\n  /**\n   * Allows the default toggle behavior to be overridden.\n   * When set to `true` users do not have press a modifier key (e.g., ctrl or meta)\n   * to toggle values.\n   *\n   * @default false\n   */\n  toggleWithoutModifierPressed?: boolean;\n\n  /**\n   * Optional callback for when an item is\n   * invoked via ENTER or double-click.\n   */\n  onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\n  /**\n   * Optional callback for when an\n   * item's contextual menu action occurs.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n  /**\n   * Additional CSS class(es) to apply to the SelectionZone.\n   */\n  className?: string;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneState {\n  isModal: boolean | undefined;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport class SelectionZone extends React.Component<ISelectionZoneProps, ISelectionZoneState> {\n  public static defaultProps = {\n    isSelectedOnFocus: true,\n    toggleWithoutModifierPressed: false,\n    selectionMode: SelectionMode.multiple,\n    selectionClearedOnEscapePress: true,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _isTabPressed: boolean;\n  private _shouldHandleFocus: boolean;\n  private _shouldHandleFocusTimeoutId: number | undefined;\n  private _isTouch: boolean;\n  private _isTouchTimeoutId: number | undefined;\n\n  public static getDerivedStateFromProps(\n    nextProps: ISelectionZoneProps,\n    prevState: ISelectionZoneState,\n  ): ISelectionZoneState {\n    const isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n\n    return {\n      ...prevState,\n      isModal,\n    };\n  }\n\n  constructor(props: ISelectionZoneProps) {\n    super(props);\n\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    const { selection } = this.props;\n\n    // Reflect the initial modal state of selection into the state.\n    const isModal = selection.isModal && selection.isModal();\n\n    this.state = {\n      isModal,\n    };\n  }\n\n  public componentDidMount(): void {\n    const win = getWindow(this._root.current);\n\n    // Track the latest modifier keys globally.\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\n\n    // Subscribe to the selection to keep modal state updated.\n    this._events.on(this.props.selection, 'change', this._onSelectionChange);\n  }\n\n  public render(): JSX.Element {\n    const { isModal } = this.state;\n\n    return (\n      <div\n        className={css('ms-SelectionZone', this.props.className, {\n          'ms-SelectionZone--modal': !!isModal,\n        })}\n        ref={this._root}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        onKeyDownCapture={this._onKeyDownCapture}\n        onClick={this._onClick}\n        role=\"presentation\"\n        onDoubleClick={this._onDoubleClick}\n        onContextMenu={this._onContextMenu}\n        onMouseDownCapture={this._onMouseDownCapture}\n        onFocusCapture={this._onFocus}\n        data-selection-is-modal={isModal ? true : undefined}\n      >\n        {this.props.children}\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public componentDidUpdate(previousProps: ISelectionZoneProps): void {\n    const { selection } = this.props;\n\n    if (selection !== previousProps.selection) {\n      // Whenever selection changes, update the subscripton to keep modal state updated.\n      this._events.off(previousProps.selection);\n      this._events.on(selection, 'change', this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n   * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n   * focus event that occurs. This method does that.\n   */\n  public ignoreNextFocus = (): void => {\n    this._handleNextFocus(false);\n  };\n\n  private _onSelectionChange = (): void => {\n    const { selection } = this.props;\n\n    const isModal = selection.isModal && selection.isModal();\n\n    this.setState({\n      isModal,\n    });\n  };\n\n  private _onMouseDownCapture = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    if (document.activeElement !== target && !elementContains(document.activeElement as HTMLElement, target)) {\n      this.ignoreNextFocus();\n      return;\n    }\n\n    if (!elementContains(target, this._root.current)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n        this.ignoreNextFocus();\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  /**\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n   * specially.\n   */\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n      const isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n      const itemRoot = this._findItemRoot(target);\n\n      if (!isToggle && itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (isToggleModifierPressed) {\n          // set anchor only.\n          selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n          if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\n            selection.setModal(true);\n            this._setIsTouch(false);\n          }\n        } else {\n          if (this.props.isSelectedOnFocus) {\n            this._onItemSurfaceClick(ev, index);\n          }\n        }\n      }\n    }\n\n    this._handleNextFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    // No-op if selection is disabled\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        break;\n      } else if (itemRoot) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (\n          (target === itemRoot || this._shouldAutoSelect(target)) &&\n          !this._isShiftPressed &&\n          !this._isCtrlPressed &&\n          !this._isMetaPressed &&\n          !this.props.toggleWithoutModifierPressed\n        ) {\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot));\n          break;\n        } else if (\n          this.props.disableAutoSelectOnInputElements &&\n          (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')\n        ) {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onTouchStartCapture = (ev: React.TouchEvent<HTMLElement>): void => {\n    this._setIsTouch(true);\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { enableTouchInvocationTarget = false } = this.props;\n\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        if (!isSelectionDisabled) {\n          this._onToggleAllClick(ev);\n        }\n        break;\n      } else if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          if (!isSelectionDisabled) {\n            if (this._isShiftPressed) {\n              this._onItemSurfaceClick(ev, index);\n            } else {\n              this._onToggleClick(ev, index);\n            }\n          }\n          break;\n        } else if (\n          (this._isTouch &&\n            enableTouchInvocationTarget &&\n            this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME)) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          // Items should be invokable even if selection is disabled.\n          this._onInvokeClick(ev, index);\n          break;\n        } else if (target === itemRoot) {\n          if (!isSelectionDisabled) {\n            this._onItemSurfaceClick(ev, index);\n          }\n          break;\n        } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n\n    const { onItemContextMenu, selection } = this.props;\n    if (onItemContextMenu) {\n      const itemRoot = this._findItemRoot(target);\n\n      if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        this._onInvokeMouseDown(ev, index);\n\n        const skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n\n        // In order to keep back compat, if the value here is undefined, then we should still\n        // call preventDefault(). Only in the case where true is explicitly returned should\n        // the call be skipped.\n        if (!skipPreventDefault) {\n          ev.preventDefault();\n        }\n      }\n    }\n  };\n\n  private _isSelectionDisabled(target: HTMLElement): boolean {\n    if (this._getSelectionMode() === SelectionMode.none) {\n      return true;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n      target = getParent(target) as HTMLElement;\n    }\n\n    return false;\n  }\n\n  /**\n   * In multi selection, if you double click within an item's root (but not within the invoke element or\n   * input elements), we should execute the invoke handler.\n   */\n  private _onDoubleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    const { onItemInvoked } = this.props;\n    const itemRoot = this._findItemRoot(target);\n\n    if (itemRoot && onItemInvoked && !this._isInputElement(target)) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (\n          this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          break;\n        } else if (target === itemRoot) {\n          this._onInvokeClick(ev, index);\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onKeyDownCapture = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    this._handleNextFocus(true);\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    const { selection, selectionClearedOnEscapePress } = this.props;\n    // eslint-disable-next-line deprecation/deprecation\n    const isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\n    // eslint-disable-next-line deprecation/deprecation\n    const isClearSelectionKey = ev.which === KeyCodes.escape;\n\n    // Ignore key downs from input elements.\n    if (this._isInputElement(target)) {\n      // A key was pressed while an item in this zone was focused.\n      return;\n    }\n\n    const selectionMode = this._getSelectionMode();\n\n    // If ctrl-a is pressed, select all (if all are not already selected.)\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(true);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    // If escape is pressed and the component is configured to clear on escape press,\n    // clear selection (if any are selected.)\n    if (selectionClearedOnEscapePress && isClearSelectionKey && selection.getSelectedCount() > 0) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(false);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    const itemRoot = this._findItemRoot(target);\n\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n    if (itemRoot) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n          // so we can no-op for any keydowns in this case.\n          break;\n        } else if (this._shouldAutoSelect(target)) {\n          if (!isSelectionDisabled) {\n            // If the event went to an element which should trigger auto-select, select it and then let\n            // the default behavior kick in.\n            this._onInvokeMouseDown(ev, index);\n          }\n          break;\n        } else if (\n          // eslint-disable-next-line deprecation/deprecation\n          (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\n          (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')\n        ) {\n          return false;\n        } else if (target === itemRoot) {\n          // eslint-disable-next-line deprecation/deprecation\n          if (ev.which === KeyCodes.enter) {\n            // Items should be invokable even if selection is disabled.\n            this._onInvokeClick(ev, index);\n            ev.preventDefault();\n            return;\n            // eslint-disable-next-line deprecation/deprecation\n          } else if (ev.which === KeyCodes.space) {\n            if (!isSelectionDisabled) {\n              this._onToggleClick(ev, index);\n            }\n            ev.preventDefault();\n            return;\n          }\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n    }\n  };\n\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  private _onToggleClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    selection.setChangeEvents(false);\n\n    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {\n      selection.setModal(true);\n      this._setIsTouch(false);\n    }\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleIndexSelected(index);\n    } else if (selectionMode === SelectionMode.single) {\n      const isSelected = selection.isIndexSelected(index);\n      const isModal = selection.isModal && selection.isModal();\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, !isSelected, true);\n      if (isModal && selection.setModal) {\n        // Since the above call to setAllSelected(false) clears modal state,\n        // restore it. This occurs because the SelectionMode of the Selection\n        // may differ from the SelectionZone.\n        selection.setModal(true);\n      }\n    } else {\n      selection.setChangeEvents(true);\n      return;\n    }\n\n    selection.setChangeEvents(true);\n\n    ev.stopPropagation();\n\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  }\n\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection, onItemInvoked } = this.props;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onItemSurfaceClick(ev: React.SyntheticEvent<HTMLElement>, index: number): void {\n    const { selection, toggleWithoutModifierPressed } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed && !this._isTabPressed) {\n        selection.selectToIndex(index, !isToggleModifierPressed);\n      } else if (isToggleModifierPressed || toggleWithoutModifierPressed) {\n        selection.toggleIndexSelected(index);\n      } else {\n        this._clearAndSelectIndex(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index);\n    }\n  }\n\n  private _onInvokeMouseDown(\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    index: number,\n  ): void {\n    const { selection } = this.props;\n\n    // Only do work if item is not selected.\n    if (selection.isIndexSelected(index)) {\n      return;\n    }\n\n    this._clearAndSelectIndex(index);\n  }\n\n  /**\n   * To avoid high startup cost of traversing the DOM on component mount,\n   * defer finding the scrollable parent until a click interaction.\n   *\n   * The styles will probably already calculated since we're running in a click handler,\n   * so this is less likely to cause layout thrashing then doing it in mount.\n   */\n  private _findScrollParentAndTryClearOnEmptyClick(ev: MouseEvent) {\n    const scrollParent = findScrollableParent(this._root.current) as HTMLElement;\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\n\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\n    if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\n      this._tryClearOnEmptyClick(ev);\n    }\n  }\n\n  private _tryClearOnEmptyClick(ev: MouseEvent): void {\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target as HTMLElement)) {\n      this.props.selection.setAllSelected(false);\n    }\n  }\n\n  private _clearAndSelectIndex(index: number): void {\n    const { selection, selectionClearedOnSurfaceClick = true } = this.props;\n    const isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected && selectionClearedOnSurfaceClick) {\n      const isModal = selection.isModal && selection.isModal();\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, true, true);\n      if (isModal || (this.props.enterModalOnTouch && this._isTouch)) {\n        if (selection.setModal) {\n          selection.setModal(true);\n        }\n        if (this._isTouch) {\n          this._setIsTouch(false);\n        }\n      }\n      selection.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n\n    // eslint-disable-next-line deprecation/deprecation\n    const keyCode = (ev as React.KeyboardEvent<HTMLElement>).keyCode;\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\n  }\n\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\n    const { selection } = this.props;\n\n    while (target !== this._root.current) {\n      const indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      const index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n\n    if (target === this._root.current) {\n      return undefined;\n    }\n\n    return target;\n  }\n\n  private _getItemIndex(itemRoot: HTMLElement): number {\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\n  }\n\n  private _shouldAutoSelect(element: HTMLElement): boolean {\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n  }\n\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\n    let isToggle = false;\n\n    while (!isToggle && element !== this._root.current) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = getParent(element) as HTMLElement;\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement): boolean {\n    return (\n      element.tagName === 'INPUT' ||\n      element.tagName === 'TEXTAREA' ||\n      element.getAttribute('contenteditable') === 'true' ||\n      element.getAttribute('contenteditable') === ''\n    );\n  }\n\n  private _isNonHandledClick(element: HTMLElement): boolean {\n    const doc = getDocument();\n\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element)) {\n          return false;\n        }\n\n        element = getParent(element) as HTMLElement;\n      }\n    }\n\n    return true;\n  }\n\n  private _handleNextFocus(handleFocus: boolean): void {\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n\n    this._shouldHandleFocus = handleFocus;\n\n    if (handleFocus) {\n      this._async.setTimeout(() => {\n        this._shouldHandleFocus = false;\n      }, 100);\n    }\n  }\n\n  private _setIsTouch(isTouch: boolean): void {\n    if (this._isTouchTimeoutId) {\n      this._async.clearTimeout(this._isTouchTimeoutId);\n      this._isTouchTimeoutId = undefined;\n    }\n\n    this._isTouch = true;\n\n    if (isTouch) {\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 300);\n    }\n  }\n\n  private _getSelectionMode(): SelectionMode {\n    const { selection } = this.props;\n\n    const { selectionMode = selection ? selection.mode : SelectionMode.none } = this.props;\n\n    return selectionMode;\n  }\n}\n","import { getGlobalClassNames, AnimationVariables } from '../../Styling';\nimport type { IGroupedListStyleProps, IGroupedListStyles } from './GroupedList.types';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupedList',\n  compact: 'ms-GroupedList--Compact',\n  group: 'ms-GroupedList-group',\n  link: 'ms-Link',\n  listCell: 'ms-List-cell',\n};\n\nconst beziers = {\n  easeInOutSine: 'cubic-bezier(0.445, 0.050, 0.550, 0.950)',\n};\n\nexport const getStyles = (props: IGroupedListStyleProps): IGroupedListStyles => {\n  const { theme, className, compact } = props;\n  const { palette } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        selectors: {\n          [`.${classNames.listCell}`]: {\n            minHeight: 38, // be consistent with DetailsList styles\n          },\n        },\n      },\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32, // be consistent with DetailsList styles\n            },\n          },\n        },\n      ],\n      className,\n    ],\n    group: [\n      classNames.group,\n      {\n        transition: `background-color ${AnimationVariables.durationValue2} ${beziers.easeInOutSine}`,\n      },\n    ],\n    groupIsDropping: {\n      backgroundColor: palette.neutralLight,\n    },\n  };\n};\n","import { getGlobalClassNames, getFocusStyle, AnimationVariables, FontWeights, IconFontSizes } from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from '../DetailsList/DetailsRow.styles';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as EXPAND_BUTTON_WIDTH } from './GroupSpacer';\nimport type { IGroupHeaderStyleProps, IGroupHeaderStyles } from './GroupHeader.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupHeader',\n  compact: 'ms-GroupHeader--compact',\n  check: 'ms-GroupHeader-check',\n  dropIcon: 'ms-GroupHeader-dropIcon',\n  expand: 'ms-GroupHeader-expand',\n  isCollapsed: 'is-collapsed',\n  title: 'ms-GroupHeader-title',\n  isSelected: 'is-selected',\n  iconTag: 'ms-Icon--Tag',\n  group: 'ms-GroupedList-group',\n  isDropping: 'is-dropping',\n};\n\nconst beziers = {\n  easeOutCirc: 'cubic-bezier(0.075, 0.820, 0.165, 1.000)',\n  easeOutSine: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',\n  easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n};\n\nconst DEFAULT_GROUP_HEADER_HEIGHT = 48;\nconst COMPACT_GROUP_HEADER_HEIGHT = 40;\n\nexport const getStyles = (props: IGroupHeaderStyleProps): IGroupHeaderStyles => {\n  const { theme, className, selected, isCollapsed, compact } = props;\n  // padding from the source to align GroupHeader title with DetailsRow's first cell.\n  const { cellLeftPadding } = DEFAULT_CELL_STYLE_PROPS;\n  const finalRowHeight = compact ? COMPACT_GROUP_HEADER_HEIGHT : DEFAULT_GROUP_HEADER_HEIGHT;\n\n  const { semanticColors, palette, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  const checkExpandResetStyles: IStyle = [\n    getFocusStyle(theme),\n    {\n      cursor: 'default',\n      background: 'none',\n      backgroundColor: 'transparent',\n      border: 'none',\n      padding: 0, // cancel default <button> padding\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      getFocusStyle(theme),\n      theme.fonts.medium,\n      {\n        // keep the border for height but color it so it's invisible.\n        borderBottom: `1px solid ${semanticColors.listBackground}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          ':hover': {\n            background: semanticColors.listItemBackgroundHovered,\n            color: semanticColors.actionLinkHovered,\n          },\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`:global(.${classNames.group}.${classNames.isDropping})`]: {\n            selectors: {\n              [`& > .${classNames.root} .${classNames.dropIcon}`]: {\n                transition:\n                  `transform ${AnimationVariables.durationValue4} ${beziers.easeOutCirc} ` +\n                  `opacity ${AnimationVariables.durationValue1} ${beziers.easeOutSine}`,\n                transitionDelay: AnimationVariables.durationValue3,\n                opacity: 1,\n                transform: `rotate(0.2deg) scale(1);`, // rotation prevents jittery motion in IE\n              },\n\n              [`.${classNames.check}`]: {\n                opacity: 0,\n              },\n            },\n          },\n        },\n      },\n      selected && [\n        classNames.isSelected,\n        {\n          background: semanticColors.listItemBackgroundChecked,\n          selectors: {\n            ':hover': {\n              background: semanticColors.listItemBackgroundCheckedHovered,\n            },\n            [`${classNames.check}`]: {\n              opacity: 1,\n            },\n          },\n        },\n      ],\n      compact && [classNames.compact, { border: 'none' }],\n      className,\n    ],\n    groupHeaderContainer: [\n      {\n        display: 'flex',\n        alignItems: 'center',\n        height: finalRowHeight,\n      },\n    ],\n    headerCount: [\n      {\n        padding: '0px 4px',\n      },\n    ],\n    check: [\n      classNames.check,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        // paddingTop and marginTop brought from the DetailsRow.styles.ts with explanation below.\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        opacity: 0,\n        width: CHECK_CELL_WIDTH,\n        height: finalRowHeight,\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n    expand: [\n      classNames.expand,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        flexShrink: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        width: EXPAND_BUTTON_WIDTH,\n        height: finalRowHeight,\n        color: selected ? palette.neutralPrimary : palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: selected ? palette.neutralQuaternary : palette.neutralLight,\n          },\n          ':active': {\n            backgroundColor: selected ? palette.neutralTertiaryAlt : palette.neutralQuaternaryAlt,\n          },\n        },\n      },\n    ],\n    expandIsCollapsed: [\n      isCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n              transformOrigin: '50% 50%',\n              transition: 'transform .1s linear',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n            transition: 'transform .1s linear',\n          },\n    ],\n    title: [\n      classNames.title,\n      {\n        paddingLeft: cellLeftPadding,\n        fontSize: compact ? fonts.medium.fontSize : fonts.mediumPlus.fontSize,\n        fontWeight: isCollapsed ? FontWeights.regular : FontWeights.semibold,\n        cursor: 'pointer',\n        outline: 0,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n      },\n    ],\n    dropIcon: [\n      classNames.dropIcon,\n      {\n        position: 'absolute',\n        left: -26,\n        fontSize: IconFontSizes.large,\n        color: palette.neutralSecondary,\n        transition:\n          `transform ${AnimationVariables.durationValue2} ${beziers.easeInBack}, ` +\n          `opacity ${AnimationVariables.durationValue4} ${beziers.easeOutSine}`,\n        opacity: 0,\n        transform: 'rotate(0.2deg) scale(0.65)', // rotation prevents jittery motion in IE\n        transformOrigin: '10px 10px',\n        selectors: {\n          [`:global(.${classNames.iconTag})`]: {\n            position: 'absolute',\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport type { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles } from './Spinner.types';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // eslint-disable-next-line deprecation/deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import { SpinnerSize } from './Spinner.types';\nimport {\n  hiddenContentStyle,\n  keyframes,\n  HighContrastSelector,\n  getGlobalClassNames,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nimport type { ISpinnerStyleProps, ISpinnerStyles } from './Spinner.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Spinner',\n  circle: 'ms-Spinner-circle',\n  label: 'ms-Spinner-label',\n};\n\nconst spinAnimation = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      transform: 'rotate(0deg)',\n    },\n    '100%': {\n      transform: 'rotate(360deg)',\n    },\n  }),\n);\n\nexport const getStyles = (props: ISpinnerStyleProps): ISpinnerStyles => {\n  const { theme, size, className, labelPosition } = props;\n\n  const { palette } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n      labelPosition === 'top' && {\n        flexDirection: 'column-reverse',\n      },\n      labelPosition === 'right' && {\n        flexDirection: 'row',\n      },\n      labelPosition === 'left' && {\n        flexDirection: 'row-reverse',\n      },\n      className,\n    ],\n    circle: [\n      classNames.circle,\n      {\n        boxSizing: 'border-box',\n        borderRadius: '50%',\n        border: '1.5px solid ' + palette.themeLight,\n        borderTopColor: palette.themePrimary,\n        animationName: spinAnimation(),\n        animationDuration: '1.3s',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'cubic-bezier(.53,.21,.29,.67)',\n        selectors: {\n          [HighContrastSelector]: {\n            borderTopColor: 'Highlight',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      size === SpinnerSize.xSmall && [\n        'ms-Spinner--xSmall',\n        {\n          width: 12,\n          height: 12,\n        },\n      ],\n      size === SpinnerSize.small && [\n        'ms-Spinner--small',\n        {\n          width: 16,\n          height: 16,\n        },\n      ],\n      size === SpinnerSize.medium && [\n        'ms-Spinner--medium',\n        {\n          width: 20,\n          height: 20,\n        },\n      ],\n      size === SpinnerSize.large && [\n        'ms-Spinner--large',\n        {\n          width: 28,\n          height: 28,\n        },\n      ],\n    ],\n    label: [\n      classNames.label,\n      theme.fonts.small,\n      {\n        color: palette.themePrimary,\n        margin: '8px 0 0',\n        textAlign: 'center',\n      },\n      labelPosition === 'top' && {\n        margin: '0 0 8px',\n      },\n      labelPosition === 'right' && {\n        margin: '0 0 0 8px',\n      },\n      labelPosition === 'left' && {\n        margin: '0 8px 0 0',\n      },\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { SpinnerBase } from './Spinner.base';\nimport { getStyles } from './Spinner.styles';\nimport type { ISpinnerProps, ISpinnerStyles, ISpinnerStyleProps } from './Spinner.types';\n\nexport const Spinner: React.FunctionComponent<ISpinnerProps> = styled<\n  ISpinnerProps,\n  ISpinnerStyleProps,\n  ISpinnerStyles\n>(SpinnerBase, getStyles, undefined, { scope: 'Spinner' });\n","import * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nimport type { IProcessedStyleSet, ITheme } from '../../Styling';\nimport type {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n      ariaRowIndex,\n      useFastIcons,\n    } = this.props;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        role=\"row\"\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        aria-rowindex={ariaRowIndex}\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        aria-level={groupLevel + 1}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                id={`${this._id}-check`}\n                aria-checked={currentlySelected}\n                aria-labelledby={`${this._id}-check ${this._id}`}\n                data-selection-toggle={true}\n                onClick={this._onToggleSelectGroupClick}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            // To make the group header align properly with the column headers, this spacer\n            // needs to be the same width as the check cell in the column header.\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={CHECK_CELL_WIDTH} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group);\n    }\n\n    if (!ev.defaultPrevented) {\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group, ariaColSpan } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title} id={this._id} role=\"gridcell\" aria-colspan={ariaColSpan}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupHeader.styles';\nimport { GroupHeaderBase } from './GroupHeader.base';\nimport type { IGroupHeaderProps, IGroupHeaderStyles, IGroupHeaderStyleProps } from './GroupHeader.types';\n\nexport const GroupHeader: React.FunctionComponent<IGroupHeaderProps> = styled<\n  IGroupHeaderProps,\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles\n>(GroupHeaderBase, getStyles, undefined, {\n  scope: 'GroupHeader',\n});\n\nexport type { IGroupHeaderProps };\n","import { getGlobalClassNames } from '../../Styling';\nimport type { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupShowAll',\n  link: 'ms-Link',\n};\n\nexport const getStyles = (props: IGroupShowAllStyleProps): IGroupShowAllStyles => {\n  const { theme } = props;\n  const { fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '10px 84px',\n        cursor: 'pointer',\n        selectors: {\n          [`.${classNames.link}`]: {\n            fontSize: fonts.small.fontSize,\n          },\n        },\n      },\n    ],\n  };\n};\n\nexport type { IGroupShowAllProps };\n","import * as React from 'react';\nimport { useCallback } from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { Link } from '../../Link';\nimport { GroupSpacer } from './GroupSpacer';\nimport type { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\n\nconst getClassNames = classNamesFunction<IGroupShowAllStyleProps, IGroupShowAllStyles>();\n\nexport const GroupShowAllBase: React.FunctionComponent<IGroupShowAllProps> = props => {\n  const { group, groupLevel, showAllLinkText = 'Show All', styles, theme, onToggleSummarize } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  const memoizedOnClick = useCallback(\n    (ev: React.MouseEvent<HTMLElement>) => {\n      onToggleSummarize!(group!);\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    },\n    [onToggleSummarize, group],\n  );\n\n  if (group) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer count={groupLevel!} />\n        <Link onClick={memoizedOnClick}>{showAllLinkText}</Link>\n      </div>\n    );\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupShowAll.styles';\nimport { GroupShowAllBase } from './GroupShowAll.base';\nimport type { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\n\nexport const GroupShowAll: React.FunctionComponent<IGroupShowAllProps> = styled<\n  IGroupShowAllProps,\n  IGroupShowAllStyleProps,\n  IGroupShowAllStyles\n>(GroupShowAllBase, getStyles, undefined, { scope: 'GroupShowAll' });\n\nexport type { IGroupShowAllProps };\n","import { getGlobalClassNames } from '../../Styling';\nimport type { IGroupFooterStyleProps, IGroupFooterStyles } from './GroupFooter.types';\n\nconst GlobalClassNames = {\n  root: 'ms-groupFooter',\n};\n\nexport const getStyles = (props: IGroupFooterStyleProps): IGroupFooterStyles => {\n  const { theme, className } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '5px 38px',\n      },\n      className,\n    ],\n  };\n};\n","import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { GroupSpacer } from './GroupSpacer';\nimport type { IGroupFooterStyleProps, IGroupFooterStyles, IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupFooterStyleProps, IGroupFooterStyles>();\n\nexport const GroupFooterBase: React.FunctionComponent<IGroupFooterProps> = props => {\n  const { group, groupLevel, footerText, indentWidth, styles, theme } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  if (group && footerText) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n        {footerText}\n      </div>\n    );\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupFooter.styles';\nimport { GroupFooterBase } from './GroupFooter.base';\nimport type { IGroupFooterProps, IGroupFooterStyles, IGroupFooterStyleProps } from './GroupFooter.types';\n\nexport const GroupFooter: React.FunctionComponent<IGroupFooterProps> = styled<\n  IGroupFooterProps,\n  IGroupFooterStyleProps,\n  IGroupFooterStyles\n>(GroupFooterBase, getStyles, undefined, {\n  scope: 'GroupFooter',\n});\n\nexport type { IGroupFooterProps };\n","import * as React from 'react';\nimport { List } from './List';\nimport type { IRefObject, IRectangle, IRenderFunction } from '../../Utilities';\n\n/**\n * {@docCategory List}\n */\nexport const ScrollToMode = {\n  /**\n   * Does not make any consideration to where in the viewport the item should align to.\n   */\n  auto: 0 as 0,\n  /**\n   * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.\n   */\n  top: 1 as 1,\n  /**\n   * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.\n   */\n  bottom: 2 as 2,\n  /**\n   * Attempts to scroll the list so the desired item is in the exact center of the viewport.\n   */\n  center: 3 as 3,\n};\n\n/**\n * {@docCategory List}\n */\nexport type ScrollToMode = typeof ScrollToMode[keyof typeof ScrollToMode];\n\n/**\n * Props passed to the render override for the list root.\n * {@docCategory List}\n */\nexport interface IListOnRenderRootProps<T> {\n  /**\n   * The ref to be applied to the list root.\n   * The `List` uses this element to track scroll position and sizing.\n   */\n  rootRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list root element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered as the list surface element.\n   * This will have been rendered using `onRenderSurface`.\n   */\n  surfaceElement: JSX.Element | null;\n}\n\n/**\n * Props passed to the render override for the list surface.\n * {@docCategory List}\n */\nexport interface IListOnRenderSurfaceProps<T> {\n  /**\n   * A ref to be applied to the surface element.\n   * The `List` uses this element to track content size and focus.\n   */\n  surfaceRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list surface element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered representing all active pages.\n   */\n  pageElements: JSX.Element[];\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IList {\n  /**\n   * Force the component to update.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  getTotalListHeight?: () => number;\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines the behavior of the scrolling alignment. Defaults to auto.\n   *  Note: The scrollToMode requires the measureItem callback is provided to function.\n   */\n  scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IListProps<T = any> extends React.HTMLAttributes<List<T> | HTMLDivElement> {\n  /**\n   * Optional callback to access the IList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IList>;\n\n  /** Optional classname to append to root list. */\n  className?: string;\n\n  /** Items to render. */\n  items?: T[];\n\n  /**\n   * Method to call when trying to render an item.\n   * @param item - The data associated with the cell that is being rendered.\n   * @param index - The index of the cell being rendered.\n   * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\n   * are complex.\n   */\n  onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode;\n\n  /**\n   * Optional callback invoked when List rendering completed.\n   * This can be on initial mount or on re-render due to scrolling.\n   * This method will be called as a result of changes in List pages (added or removed),\n   * and after ALL the changes complete.\n   * To track individual page Add / Remove use onPageAdded / onPageRemoved instead.\n   * @param pages - The current array of pages in the List.\n   */\n  onPagesUpdated?: (pages: IPage<T>[]) => void;\n\n  /** Optional callback for monitoring when a page is added. */\n  onPageAdded?: (page: IPage<T>) => void;\n\n  /** Optional callback for monitoring when a page is removed. */\n  onPageRemoved?: (page: IPage<T>) => void;\n\n  /** Optional callback to get the item key, to be used on render. */\n  getKey?: (item: T, index?: number) => string;\n\n  /**\n   * Called by the list to get the specification for a page.\n   * Use this method to provide an allocation of items per page,\n   * as well as an estimated rendered height for the page.\n   * The list will use this to optimize virtualization.\n   */\n  getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;\n\n  /**\n   * Method called by the list to get how many items to render per page from specified index.\n   * In general, use `getPageSpecification` instead.\n   */\n  getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;\n\n  /**\n   * Method called by the list to get the pixel height for a given page. By default, we measure the first\n   * page's height and default all other pages to that height when calculating the surface space. It is\n   * ideal to be able to adequately predict page heights in order to keep the surface space from jumping\n   * in pixels, which has been seen to cause browser performance issues.\n   * In general, use `getPageSpecification` instead.\n   */\n  getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number;\n\n  /**\n   * Method called by the list to derive the page style object. For spacer pages, the list will derive\n   * the height and passed in heights will be ignored.\n   */\n  getPageStyle?: (page: IPage<T>) => any;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render ahead.\n   * @defaultvalue 2\n   */\n  renderedWindowsAhead?: number;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render behind.\n   * @defaultvalue 2\n   */\n  renderedWindowsBehind?: number;\n\n  /**\n   * Index in `items` array to start rendering from.\n   * @default 0\n   */\n  startIndex?: number;\n\n  /**\n   * Number of items to render.\n   * @default items.length\n   */\n  renderCount?: number;\n\n  /**\n   * Boolean value to enable render page caching. This is an experimental performance optimization\n   * that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps<T>) => boolean;\n\n  /**\n   * The role to assign to the list root element.\n   * Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.\n   */\n  role?: string;\n\n  /**\n   * Called when the List will render a page.\n   * Override this to control how cells are rendered within a page.\n   */\n  onRenderPage?: IRenderFunction<IPageProps<T>>;\n\n  /**\n   * Render override for the element at the root of the `List`.\n   * Use this to apply some final attributes or structure to the content\n   * each time the list is updated with new active pages or items.\n   */\n  onRenderRoot?: IRenderFunction<IListOnRenderRootProps<T>>;\n\n  /**\n   * Render override for the element representing the surface of the `List`.\n   * Use this to alter the structure of the rendered content if necessary on each update.\n   */\n  onRenderSurface?: IRenderFunction<IListOnRenderSurfaceProps<T>>;\n\n  /**\n   * For perf reasons, List avoids re-rendering unless certain props have changed.\n   * Use this prop if you need to force it to re-render in other cases. You can pass any type of\n   * value as long as it only changes (`===` comparison) when a re-render should happen.\n   */\n  version?: any;\n\n  /**\n   * Whether to disable scroll state updates. This causes the isScrolling arg in onRenderCell to always be undefined.\n   * This is a performance optimization to let List skip a render cycle by not updating its scrolling state.\n   */\n  ignoreScrollingState?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPage<T = any> {\n  key: string;\n  items: T[] | undefined;\n  startIndex: number;\n  itemCount: number;\n  style: React.CSSProperties;\n  top: number;\n  height: number;\n  data?: any;\n  isSpacer?: boolean;\n  isVisible?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageProps<T = any>\n  extends React.HTMLAttributes<HTMLDivElement>,\n    React.ClassAttributes<HTMLDivElement> {\n  /**\n   * The role being assigned to the rendered page element by the list.\n   */\n  role?: string;\n  /**\n   * The allocation data for the page.\n   */\n  page: IPage<T>;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageSpecification {\n  /**\n   * The number of items to allocate to the page.\n   */\n  itemCount?: number;\n  /**\n   * The estimated pixel height of the page.\n   */\n  height?: number;\n  /**\n   * Data to pass through to the page when rendering.\n   */\n  data?: any;\n  /**\n   * The key to use when creating the page.\n   */\n  key?: string;\n}\n","import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  css,\n  divProperties,\n  findIndex,\n  findScrollableParent,\n  getNativeProps,\n  getParent,\n  getWindow,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { ScrollToMode } from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\nimport type { IRectangle, IRenderFunction } from '../../Utilities';\nimport type {\n  IList,\n  IListProps,\n  IPage,\n  IPageProps,\n  IListOnRenderSurfaceProps,\n  IListOnRenderRootProps,\n} from './List.types';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nconst DONE_SCROLLING_WAIT = 500;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst PAGE_KEY_PREFIX = 'page-';\nconst SPACER_KEY_PREFIX = 'spacer-';\n\nexport interface IListState<T = any> {\n  pages?: IPage<T>[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n  isScrolling?: boolean;\n  getDerivedStateFromProps(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\n\n  pagesVersion?: {};\n}\n\ninterface IPageCacheItem<T> {\n  page: IPage<T>;\n  pageElement?: JSX.Element;\n}\n\ninterface IPageCache<T> {\n  [key: string]: IPageCacheItem<T>;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0,\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\nconst _measureScrollRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List<T = any> extends React.Component<IListProps<T>, IListState<T>> implements IList {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => <>{(item && item.name) || ''}</>,\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND,\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _surface = React.createRef<HTMLDivElement>();\n  private _pageRefs: Record<string, unknown> = {};\n  private _async: Async;\n  private _events: EventGroup;\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number;\n      measureVersion: number;\n    };\n  };\n  private _focusedIndex: number;\n  private _scrollElement?: HTMLElement;\n  private _hasCompletedFirstRender: boolean;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle | undefined;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle | null;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // The rect that is visible to the user\n  private _visibleRect: IRectangle | undefined;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle | null;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n  private _scrollHeight?: number;\n  private _scrollTop: number;\n  private _pageCache: IPageCache<T>;\n\n  public static getDerivedStateFromProps<U = any>(\n    nextProps: IListProps<U>,\n    previousState: IListState<U>,\n  ): IListState<U> {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IListProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      pages: [],\n      isScrolling: false,\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY,\n    });\n\n    this._onAsyncIdle = this._async.debounce(this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false,\n    });\n\n    this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n      leading: false,\n    });\n\n    this._onScrollingDone = this._async.debounce(this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false,\n    });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._pageCache = {};\n  }\n\n  public get pageRefs(): Readonly<Record<string, unknown>> {\n    return this._pageRefs;\n  }\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n  public scrollToIndex(\n    index: number,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode: ScrollToMode = ScrollToMode.auto,\n  ): void {\n    const startIndex = this.props.startIndex as number;\n    const renderCount = this._getRenderCount();\n    const endIndex = startIndex + renderCount;\n\n    const allowedRect = this._allowedRect;\n\n    let scrollTop = 0;\n\n    let itemsPerPage = 1;\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n\n      const pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n\n      const requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          const scrollRect = _measureScrollRect(this._scrollElement);\n          const scrollWindow = {\n            top: this._scrollElement.scrollTop,\n            bottom: this._scrollElement.scrollTop + scrollRect.height,\n          };\n\n          // Adjust for actual item position within page\n          const itemPositionWithinPage = index - itemIndex;\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          const scrollBottom = scrollTop + measureItem(index);\n\n          // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              this._scrollElement.scrollTop = scrollTop;\n              return;\n            case ScrollToMode.bottom:\n              this._scrollElement.scrollTop = scrollBottom - scrollRect.height;\n              return;\n            case ScrollToMode.center:\n              this._scrollElement.scrollTop = (scrollTop + scrollBottom - scrollRect.height) / 2;\n              return;\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {\n            //  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n\n        if (this._scrollElement) {\n          this._scrollElement.scrollTop = scrollTop;\n        }\n        return;\n      }\n\n      scrollTop += pageHeight;\n    }\n  }\n\n  public getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number {\n    const pages = this.state.pages || [];\n    for (const page of pages) {\n      const isPageVisible =\n        !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n      if (isPageVisible) {\n        if (!measureItem) {\n          const rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          let totalRowHeight = 0;\n          for (let itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            const rowHeight = measureItem(itemIndex);\n            if (\n              page.top + totalRowHeight <= this._scrollTop &&\n              this._scrollTop < page.top + totalRowHeight + rowHeight\n            ) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  }\n\n  public componentDidMount(): void {\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n    this._scrollElement = findScrollableParent(this._root.current) as HTMLElement;\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IListProps, previousState: IListState<T>): void {\n    // Multiple updates may have been queued, so the callback will reflect all of them.\n    // Re-fetch the current props and states to avoid using a stale props or state captured in the closure.\n    const finalProps = this.props;\n    const finalState = this.state;\n\n    if (this.state.pagesVersion !== previousState.pagesVersion) {\n      // If we weren't provided with the page height, measure the pages\n      if (!finalProps.getPageHeight) {\n        // If measured version is invalid since we've updated the DOM\n        const heightsChanged = this._updatePageMeasurements(finalState.pages!);\n\n        // On first render, we should re-measure so that we don't get a visual glitch.\n        if (heightsChanged) {\n          this._materializedRect = null;\n          if (!this._hasCompletedFirstRender) {\n            this._hasCompletedFirstRender = true;\n            this.setState(this._updatePages(finalProps, finalState));\n          } else {\n            this._onAsyncScroll();\n          }\n        } else {\n          // Enqueue an idle bump.\n          this._onAsyncIdle();\n        }\n      } else {\n        // Enqueue an idle bump\n        this._onAsyncIdle();\n      }\n\n      // Notify the caller that rendering the new pages has completed\n      if (finalProps.onPagesUpdated) {\n        finalProps.onPagesUpdated(finalState.pages as IPage<T>[]);\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n\n    delete this._scrollElement;\n  }\n\n  public shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean {\n    const { pages: oldPages } = this.state;\n    const { pages: newPages } = newState;\n    let shouldComponentUpdate = false;\n\n    // Update if the page stops scrolling\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n\n    if (newProps.className !== this.props.className) {\n      return true;\n    }\n\n    if (newProps.items === this.props.items && oldPages!.length === newPages!.length) {\n      for (let i = 0; i < oldPages!.length; i++) {\n        const oldPage = oldPages![i];\n        const newPage = newPages![i];\n\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate(): void {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, this.state, true);\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  public getTotalListHeight(): number {\n    return this._surfaceRect!.height;\n  }\n\n  public render(): JSX.Element | null {\n    const { className, role = 'list', onRenderSurface, onRenderRoot } = this.props;\n    const { pages = [] } = this.state;\n    const pageElements: JSX.Element[] = [];\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    for (const page of pages) {\n      pageElements.push(this._renderPage(page));\n    }\n\n    const finalOnRenderSurface = onRenderSurface\n      ? composeRenderFunction(onRenderSurface, this._onRenderSurface)\n      : this._onRenderSurface;\n\n    const finalOnRenderRoot = onRenderRoot\n      ? composeRenderFunction(onRenderRoot, this._onRenderRoot)\n      : this._onRenderRoot;\n\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages,\n        pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface',\n        },\n      }),\n      divProps: {\n        ...divProps,\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined,\n        'aria-label': pageElements.length > 0 ? divProps['aria-label'] : undefined,\n      },\n    });\n  }\n\n  private _getDerivedStateFromProps = (nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> => {\n    if (\n      nextProps.items !== this.props.items ||\n      nextProps.renderCount !== this.props.renderCount ||\n      nextProps.startIndex !== this.props.startIndex ||\n      nextProps.version !== this.props.version\n    ) {\n      // We have received new items so we want to make sure that initially we only render a single window to\n      // fill the currently visible rect, and then later render additional windows.\n      this._resetRequiredWindows();\n      this._requiredRect = null;\n\n      this._measureVersion++;\n      this._invalidatePageCache();\n\n      return this._updatePages(nextProps, previousState);\n    }\n\n    return previousState;\n  };\n\n  private _shouldVirtualize(props: IListProps<T> = this.props): boolean {\n    const { onShouldVirtualize } = props;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  }\n\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  private _invalidatePageCache(): void {\n    this._pageCache = {};\n  }\n\n  private _renderPage(page: IPage<T>): JSX.Element {\n    const { usePageCache } = this.props;\n    let cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    const pageStyle = this._getPageStyle(page);\n\n    const { onRenderPage = this._onRenderPage } = this.props;\n\n    const pageElement = onRenderPage(\n      {\n        page: page,\n        className: 'ms-List-page',\n        key: page.key,\n        ref: (newRef: unknown) => {\n          this._pageRefs[page.key] = newRef;\n        },\n        style: pageStyle,\n        role: 'presentation',\n      },\n      this._onRenderPage,\n    );\n\n    // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page: page,\n        pageElement: pageElement,\n      };\n    }\n    return pageElement;\n  }\n\n  private _onRenderRoot = (props: IListOnRenderRootProps<T>): JSX.Element => {\n    const { rootRef, surfaceElement, divProps } = props;\n\n    return (\n      <div ref={rootRef} {...divProps}>\n        {surfaceElement}\n      </div>\n    );\n  };\n\n  private _onRenderSurface = (props: IListOnRenderSurfaceProps<T>): JSX.Element => {\n    const { surfaceRef, pageElements, divProps } = props;\n\n    return (\n      <div ref={surfaceRef} {...divProps}>\n        {pageElements}\n      </div>\n    );\n  };\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page: IPage<T>): React.StyleHTMLAttributes<HTMLDivElement> {\n    const { getPageStyle } = this.props;\n\n    return {\n      ...(getPageStyle ? getPageStyle(page) : {}),\n      ...(!page.items\n        ? {\n            height: page.height,\n          }\n        : {}),\n    };\n  }\n\n  private _onRenderPage = (pageProps: IPageProps<T>, defaultRender?: IRenderFunction<IPageProps<T>>): any => {\n    const { onRenderCell, role } = this.props;\n\n    const {\n      page: { items = [], startIndex },\n      ...divProps\n    } = pageProps;\n\n    // only assign list item role if no role is assigned\n    const cellRole = role === undefined ? 'listitem' : 'presentation';\n    const cells: React.ReactNode[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const index = startIndex + i;\n      const item = items[i];\n\n      let itemKey = this.props.getKey ? this.props.getKey(item, index) : item && (item as any).key;\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = index;\n      }\n\n      cells.push(\n        <div\n          role={cellRole}\n          className={'ms-List-cell'}\n          key={itemKey}\n          data-list-index={index}\n          data-automationid=\"ListCell\"\n        >\n          {onRenderCell &&\n            onRenderCell(item, index, !this.props.ignoreScrollingState ? this.state.isScrolling : undefined)}\n        </div>,\n      );\n    }\n\n    return <div {...divProps}>{cells}</div>;\n  };\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev: any): void {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this._surface.current) {\n      const indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll(): void {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: true });\n    }\n    this._resetRequiredWindows();\n    this._onScrollingDone();\n  }\n\n  private _resetRequiredWindows(): void {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll(): void {\n    this._updateRenderRects(this.props, this.state);\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\n      this.setState(this._updatePages(this.props, this.state));\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle(): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const { _requiredWindowsAhead: requiredWindowsAhead, _requiredWindowsBehind: requiredWindowsBehind } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects(this.props, this.state);\n      this.setState(this._updatePages(this.props, this.state));\n    }\n\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n  private _onScrollingDone(): void {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: false });\n    }\n  }\n\n  private _onAsyncResize(): void {\n    this.forceUpdate();\n  }\n\n  private _updatePages(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> {\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(nextProps, previousState);\n    }\n\n    const newListState = this._buildPages(nextProps, previousState);\n    const oldListPages = previousState.pages!;\n\n    this._notifyPageChanges(oldListPages, newListState.pages!, this.props);\n\n    return {\n      ...previousState,\n      ...newListState,\n      pagesVersion: {},\n    };\n  }\n\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n  private _notifyPageChanges(oldPages: IPage<T>[], newPages: IPage<T>[], props: IListProps<T>): void {\n    const { onPageAdded, onPageRemoved } = props;\n\n    if (onPageAdded || onPageRemoved) {\n      const renderedIndexes: {\n        [index: number]: IPage<T>;\n      } = {};\n\n      for (const page of oldPages) {\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n\n      for (const page of newPages) {\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n\n      for (const index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  }\n\n  private _updatePageMeasurements(pages: IPage<T>[]): boolean {\n    let heightChanged = false;\n\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage<T>): boolean {\n    let hasChangedHeight = false;\n    const pageElement = this._pageRefs[page.key] as HTMLElement;\n    const cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (\n      pageElement &&\n      this._shouldVirtualize() &&\n      (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)\n    ) {\n      const newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight,\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion,\n        };\n\n        this._estimatedPageHeight = Math.round(\n          (this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1),\n        );\n\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage<T>): void {\n    const { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage<T>): void {\n    const { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(props: IListProps<T>, state: IListState<T>): IListState<T> {\n    let { renderCount } = props;\n    const { items, startIndex, getPageHeight } = props;\n\n    renderCount = this._getRenderCount(props);\n\n    const materializedRect = { ...EMPTY_RECT };\n    const pages: IPage<T>[] = [];\n\n    let itemsPerPage = 1;\n    let pageTop = 0;\n    let currentSpacer = null;\n    const focusedIndex = this._focusedIndex;\n    const endIndex = startIndex! + renderCount;\n    const shouldVirtualize = this._shouldVirtualize(props);\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    const isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n\n    const allowedRect = this._allowedRect;\n\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n      const pageHeight = pageSpecification.height;\n      const pageData = pageSpecification.data;\n      const key = pageSpecification.key;\n\n      itemsPerPage = pageSpecification.itemCount;\n\n      const pageBottom = pageTop + pageHeight - 1;\n\n      const isPageRendered =\n        findIndex(state.pages as IPage<T>[], (page: IPage<T>) => !!page.items && page.startIndex === itemIndex) > -1;\n      const isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!);\n      const isPageInRequiredRange =\n        !this._requiredRect || (pageBottom >= this._requiredRect.top && pageTop <= this._requiredRect.bottom!);\n      const isPageVisible =\n        (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;\n      const isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      const isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        const itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        const newPage = this._createPage(\n          key,\n          items!.slice(itemIndex, itemIndex + itemsInPage),\n          itemIndex,\n          undefined,\n          undefined,\n          pageData,\n        );\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n        if (this._visibleRect && this._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this._visibleRect.top && pageTop <= this._visibleRect.bottom;\n        }\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width,\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage(\n            SPACER_KEY_PREFIX + itemIndex,\n            undefined,\n            itemIndex,\n            0,\n            undefined,\n            pageData,\n            true /*isSpacer*/,\n          );\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += pageBottom - pageTop + 1;\n\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      ...state,\n      pages: pages,\n      measureVersion: this._measureVersion,\n    };\n  }\n\n  private _getPageSpecification(\n    itemIndex: number,\n    visibleRect: IRectangle,\n  ): {\n    // These return values are now no longer optional.\n    itemCount: number;\n    height: number;\n    data?: any;\n    key?: string;\n  } {\n    const { getPageSpecification } = this.props;\n    if (getPageSpecification) {\n      const pageData = getPageSpecification(itemIndex, visibleRect);\n\n      const { itemCount = this._getItemCountForPage(itemIndex, visibleRect) } = pageData;\n\n      const { height = this._getPageHeight(itemIndex, visibleRect, itemCount) } = pageData;\n\n      return {\n        itemCount: itemCount,\n        height: height,\n        data: pageData.data,\n        key: pageData.key,\n      };\n    } else {\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount: itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount),\n      };\n    }\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, visibleRect: IRectangle, itemsPerPage: number): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      const cachedHeight = this._cachedPageHeights[itemIndex];\n\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    const itemsPerPage = this.props.getItemCountForPage\n      ? this.props.getItemCountForPage(itemIndex, visibileRect)\n      : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(\n    pageKey: string | undefined,\n    items: any[] | undefined,\n    startIndex: number = -1,\n    count: number = items ? items.length : 0,\n    style: React.CSSProperties = {},\n    data?: any,\n    isSpacer?: boolean,\n  ): IPage<T> {\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    const cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    return {\n      key: pageKey,\n      startIndex: startIndex,\n      itemCount: count,\n      items: items,\n      style: style,\n      top: 0,\n      height: 0,\n      data: data,\n      isSpacer: isSpacer || false,\n    };\n  }\n\n  private _getRenderCount(props?: IListProps<T>): number {\n    const { items, startIndex, renderCount } = props || this.props;\n\n    return renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount;\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props: IListProps<T>, state: IListState<T>, forceUpdate?: boolean): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\n    const { pages } = state;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n\n    let surfaceRect = this._surfaceRect || { ...EMPTY_RECT };\n    const scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\n    const scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (\n      this._surface.current &&\n      (forceUpdate ||\n        !pages ||\n        !this._surfaceRect ||\n        !scrollHeight ||\n        scrollHeight !== this._scrollHeight ||\n        Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)\n    ) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    }\n\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight || 0;\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const win = getWindow(this._root.current);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win!.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win!.innerHeight,\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\n\n    // store the visible rect for later use.\n    this._visibleRect = visibleRect;\n  }\n}\n\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\n  const top = rect.top - pagesBefore * rect.height;\n  const height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n\n  return {\n    top: top,\n    bottom: top + height,\n    height: height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width,\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom! <= outerRect.bottom! &&\n    innerRect.right! <= outerRect.right!\n  );\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom =\n    newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right! > targetRect.right! || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right! - targetRect.left + 1;\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\n\n  return targetRect;\n}\n","import * as React from 'react';\nimport { initializeComponentRef, css, getId, EventGroup } from '../../Utilities';\n\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List } from '../../List';\nimport type { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport type { IGroupHeaderProps } from './GroupHeader.types';\nimport type { IGroupFooterProps } from './GroupFooter.types';\nimport type { IGroupShowAllProps } from './GroupShowAll.types';\nimport type { IDragDropContext, IDragDropEvents, IDragDropHelper, IDragDropOptions } from '../../DragDrop';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IRenderFunction, IDisposable } from '../../Utilities';\nimport type { ISelection } from '../../Selection';\nimport type { IListProps } from '../../List';\nimport type { IViewport } from '../../utilities/decorators/withViewport';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _subGroupRefs: Record<string, GroupedListSection | null> = {};\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription?: IDisposable;\n  private _droppingClassName: string = '';\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getGroupDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getGroupDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact,\n      listProps = {},\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group &&\n      !group.children &&\n      !group.isCollapsed &&\n      !group.isShowingAll &&\n      (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const { version } = listProps;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      selected: isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    const isDraggable: boolean =\n      !!this.props.dragDropHelper &&\n      this._getGroupDragDropOptions().canDrag!(group) &&\n      !!this.props.dragDropEvents!.canDragGroups;\n\n    return (\n      <div\n        ref={this._root}\n        {...(isDraggable && { draggable: true })}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group ? group.children : []}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed\n          ? null\n          : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.pageRefs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      const subGroup = this._subGroupRefs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    if (selection && group) {\n      const isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({ isSelected });\n      }\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined,\n    group: IGroup | undefined,\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex, group);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize, groupProps } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role={groupProps && groupProps.role ? groupProps.role : 'rowgroup'}\n        aria-label={group?.name}\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth, group)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact,\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={ref => (this._subGroupRefs['subGroup_' + subGroupIndex] = ref)}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group ? group.children : []}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      updateDropState: this._updateDroppingState,\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDrop: dragDropEvents!.onDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      onDragEnter: dragDropEvents!.onDragEnter,\n      onDragLeave: dragDropEvents!.onDragLeave,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, group } = this.props;\n\n    if (isDropping !== newIsDropping) {\n      if (isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(group, event);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n        }\n      }\n\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(\n      isDropping && this._droppingClassName,\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\n      isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping,\n    );\n  }\n}\n","import * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode } from '../../List';\nimport { SelectionMode } from '../../Selection';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport type { IListProps } from '../../List';\nimport type { IGroupHeaderProps } from './GroupHeader';\nimport type { IGroupShowAllProps } from './GroupShowAll.styles';\nimport type { IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (groups !== previousState.groups) {\n      nextState = {\n        ...nextState,\n        groups,\n      };\n    }\n\n    if (selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.children && group.children.length > 0 ? group.children.length : group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // eslint-disable-next-line deprecation/deprecation\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupedList.styles';\nimport { GroupedListBase } from './GroupedList.base';\nimport type { IGroupedListProps, IGroupedListStyles, IGroupedListStyleProps } from './GroupedList.types';\n\nexport const GroupedList: React.FunctionComponent<IGroupedListProps> = styled<\n  IGroupedListProps,\n  IGroupedListStyleProps,\n  IGroupedListStyles\n>(GroupedListBase, getStyles, undefined, {\n  scope: 'GroupedList',\n});\n\nexport type { IGroupedListProps };\n","import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow, Async, EventGroup } from '../../Utilities';\n\n/**\n * Viewport rectangle dimensions.\n *\n * {@docCategory DetailsList}\n */\nexport interface IViewport {\n  /**\n   * Width in pixels.\n   */\n  width: number;\n  /**\n   * Height in pixels.\n   */\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\n/**\n * Props interface for the withViewport component.\n *\n * {@docCategory DetailsList}\n */\nexport interface IWithViewportProps {\n  /**\n   * Whether or not `withViewport` should disable its viewport measurements, effectively making this decorator\n   * pass-through with no impact on the rendered component.\n   *\n   * Since `withViewport` measures the `viewport` on mount, after each React update, and in response to events,\n   * it may cause a component which does not currently need this information due to its configuration to re-render\n   * too often. `skipViewportMeasures` may be toggled on and off based on current state, and will suspend and resume\n   * measurement as-needed.\n   *\n   * For example, when this wraps `DetailsList`, set `skipViewportMeasures` to `true` when the `layoutMode` is\n   * `fixedColumns`, since the `DetailsList` does not use the viewport size in any calculations.\n   *\n   * In addition, consider setting `skipViewportMeasures` to `true` when running within a React test renderer, to avoid\n   * direct DOM dependencies.\n   */\n\n  skipViewportMeasures?: boolean;\n  /**\n   * Whether or not to explicitly disable usage of the `ResizeObserver` in favor of a `'resize'` event on `window`,\n   * even if the browser supports `ResizeObserver`. This may be necessary if use of `ResizeObserver` results in too\n   * many re-renders of the wrapped component due to the frequency at which events are fired.\n   *\n   * This has no impact if `skipViewportMeasures` is `true`, as no viewport measurement strategy is used.\n   */\n  disableResizeObserver?: boolean;\n\n  /**\n   * Whether or not `withViewport` will delay before first measuring the viewport size.\n   * Setting this will delay measurement by the same amount as the debounce for resizing the window.\n   * This is useful for giving the child of the viewport time to render before measuring.\n   *\n   * This is an opt-in setting as existing systems have a dependency on immediate measurement for performance.\n   * @default false\n   */\n  delayFirstMeasure?: boolean;\n}\n\nconst RESIZE_DELAY = 500;\nconst MAX_RESIZE_ATTEMPTS = 3;\n\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent decorated React component reference.\n */\nexport function withViewport<TProps extends { viewport?: IViewport }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  return class WithViewportComponent extends BaseDecorator<TProps, IWithViewportState> {\n    private _root = React.createRef<HTMLDivElement>();\n    private _resizeAttempts: number;\n    private _viewportResizeObserver: any;\n    private _async: Async;\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n\n      this._async = new Async(this);\n      this._events = new EventGroup(this);\n      this._resizeAttempts = 0;\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0,\n        },\n      };\n    }\n\n    public componentDidMount(): void {\n      const { delayFirstMeasure, disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n        leading: false,\n      });\n\n      if (!skipViewportMeasures) {\n        if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n          this._registerResizeObserver();\n        } else {\n          this._events.on(win, 'resize', this._onAsyncResize);\n        }\n\n        if (delayFirstMeasure) {\n          this._async.setTimeout(() => {\n            this._updateViewport();\n          }, RESIZE_DELAY);\n        } else {\n          this._updateViewport();\n        }\n      }\n    }\n\n    public componentDidUpdate(previousProps: TProps) {\n      const { skipViewportMeasures: previousSkipViewportMeasures } = previousProps as IWithViewportProps;\n      const { disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      if (skipViewportMeasures !== previousSkipViewportMeasures) {\n        if (!skipViewportMeasures) {\n          if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n            if (!this._viewportResizeObserver) {\n              this._registerResizeObserver();\n            }\n          } else {\n            this._events.on(win, 'resize', this._onAsyncResize);\n          }\n\n          this._updateViewport();\n        } else {\n          this._unregisterResizeObserver();\n          this._events.off(win, 'resize', this._onAsyncResize);\n        }\n      }\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n      this._async.dispose();\n      this._unregisterResizeObserver();\n    }\n\n    public render(): JSX.Element {\n      const { viewport } = this.state;\n      const newViewport = viewport!.width > 0 && viewport!.height > 0 ? viewport : undefined;\n\n      return (\n        <div className=\"ms-Viewport\" ref={this._root} style={{ minWidth: 1, minHeight: 1 }}>\n          <ComposedComponent ref={this._updateComposedComponentRef} viewport={newViewport} {...(this.props as any)} />\n        </div>\n      );\n    }\n\n    public forceUpdate(): void {\n      this._updateViewport(true);\n    }\n\n    private _onAsyncResize(): void {\n      this._updateViewport();\n    }\n\n    private _isResizeObserverAvailable(): boolean {\n      const win = getWindow(this._root.current);\n\n      return win && (win as any).ResizeObserver;\n    }\n\n    private _registerResizeObserver = () => {\n      const win = getWindow(this._root.current);\n\n      this._viewportResizeObserver = new (win as any).ResizeObserver(this._onAsyncResize);\n      this._viewportResizeObserver.observe(this._root.current);\n    };\n\n    private _unregisterResizeObserver = () => {\n      if (this._viewportResizeObserver) {\n        this._viewportResizeObserver.disconnect();\n        delete this._viewportResizeObserver;\n      }\n    };\n\n    /* Note: using lambda here because decorators don't seem to work in decorators. */\n    private _updateViewport = (withForceUpdate?: boolean) => {\n      const { viewport } = this.state;\n      const viewportElement = this._root.current;\n      const scrollElement = findScrollableParent(viewportElement) as HTMLElement;\n      const scrollRect = getRect(scrollElement);\n      const clientRect = getRect(viewportElement);\n      const updateComponent = () => {\n        if (withForceUpdate && this._composedComponentInstance) {\n          this._composedComponentInstance.forceUpdate();\n        }\n      };\n\n      const isSizeChanged =\n        (clientRect && clientRect.width) !== viewport!.width || (scrollRect && scrollRect.height) !== viewport!.height;\n\n      if (isSizeChanged && this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n        this._resizeAttempts++;\n        this.setState(\n          {\n            viewport: {\n              width: clientRect.width,\n              height: scrollRect.height,\n            },\n          },\n          () => {\n            this._updateViewport(withForceUpdate);\n          },\n        );\n      } else {\n        this._resizeAttempts = 0;\n        updateComponent();\n      }\n    };\n  };\n}\n","import type { IGroup } from '../../components/GroupedList/GroupedList.types';\n\n/**\n * Takes an array of groups and returns a count of the groups and all descendant groups.\n * @param groups - The array of groups to count.\n */\nexport const GetGroupCount = (groups: IGroup[] | undefined): number => {\n  let total = 0;\n\n  if (groups) {\n    const remainingGroups = [...groups];\n    let currentGroup: IGroup;\n\n    while (remainingGroups && remainingGroups.length > 0) {\n      ++total;\n\n      currentGroup = remainingGroups.pop() as IGroup;\n\n      if (currentGroup && currentGroup.children) {\n        remainingGroups.push(...currentGroup.children);\n      }\n    }\n  }\n\n  return total;\n};\n","import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  ColumnDragEndLocation,\n  IColumnDragDropDetails,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\n\nimport { DragDropHelper } from '../../DragDrop';\nimport { GroupedList } from '../../GroupedList';\nimport { List, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nimport type { IRenderFunction } from '../../Utilities';\nimport type {\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n} from '../DetailsList/DetailsList.types';\nimport type {\n  IDetailsHeader,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport type { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport type { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport type { IFocusZone, IFocusZoneProps } from '../../FocusZone';\nimport type { IObjectWithKey, ISelection } from '../../Selection';\nimport type { IGroupedList, IGroupDividerProps, IGroupRenderProps, IGroup } from '../../GroupedList';\nimport type { IListProps } from '../../List';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    // eslint-disable-next-line deprecation/deprecation\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    isSelectedOnFocus = true,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    onRenderField,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkButtonGroupAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n    focusZoneProps,\n  } = props;\n\n  const defaultRole = 'grid';\n  const role = props.role ? props.role : defaultRole;\n\n  const rowId = getId('row');\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n  const groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: undefined,\n              ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: undefined,\n            ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n    groupedDetailsListIndexMap,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: {\n        ...groupProps?.headerProps,\n        selectAllButtonProps: {\n          'aria-label': checkButtonGroupAriaLabel,\n          ...groupProps?.headerProps?.selectAllButtonProps,\n        },\n      },\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number, group?: IGroup): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const groupKey: string | undefined = group ? group.key : undefined;\n      const numOfGroupHeadersBeforeItem: number =\n        groupKey && groupedDetailsListIndexMap[groupKey]\n          ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem\n          : 0;\n\n      const rowRole = role === defaultRole ? undefined : 'presentation';\n\n      const rowProps: IDetailsRowProps = {\n        item: item,\n        itemIndex: index,\n        flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        id: `${rowId}-${index}`,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        onRenderField,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n        role: rowRole,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      rowId,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      onRenderField,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      isHeaderVisible,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n      role,\n      groupedDetailsListIndexMap,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      // eslint-disable-next-line deprecation/deprecation\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneInnerProps: IFocusZoneProps = {\n    ...focusZoneProps,\n    componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef,\n    className: classNames.focusZone,\n    direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical,\n    shouldEnterInnerZone:\n      focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow,\n    onActiveElementChanged:\n      focusZoneProps && focusZoneProps.onActiveElementChanged\n        ? focusZoneProps.onActiveElementChanged\n        : onActiveRowChanged,\n    shouldRaiseClicksOnEnter: false,\n    onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur,\n  };\n\n  const list = groups ? (\n    <GroupedList\n      focusZoneProps={focusZoneInnerProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneInnerProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (isSelectedOnFocus && selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef, isSelectedOnFocus],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role={role}\n        // ariaLabel is a legacy prop that used to be applied on the root node, which has poor AT support\n        // it is now treated as a fallback to ariaLabelForGrid for legacy support\n        aria-label={ariaLabelForGrid || ariaLabel}\n        aria-rowcount={isPlaceholderData ? 0 : rowCount}\n        aria-colcount={colCount}\n        aria-readonly=\"true\"\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode: selectionMode,\n                layoutMode: layoutMode!,\n                selection: selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized: onColumnResized,\n                onColumnIsSizingChanged: onColumnIsSizingChanged,\n                onColumnAutoResized: onColumnAutoResized,\n                groupNestingDepth: groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                selectAllVisibility: selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport: viewport,\n                columnReorderProps: columnReorderProps,\n                minimumPixelsForDrag: minimumPixelsForDrag,\n                cellStyleProps: cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              isSelectedOnFocus={isSelectedOnFocus}\n              selectionClearedOnEscapePress={isSelectedOnFocus}\n              toggleWithoutModifierPressed={!isSelectedOnFocus}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public updateColumn(column: IColumn, options: { width?: number; newColumnIndex?: number }) {\n    const NO_COLUMNS: IColumn[] = [];\n\n    const { columns = NO_COLUMNS, selectionMode, checkboxVisibility, columnReorderOptions } = this.props;\n    const { width, newColumnIndex } = options;\n    const index = columns.findIndex(col => col.key === column.key);\n\n    if (width) {\n      this._onColumnResized(column, width, index!);\n    }\n\n    if (newColumnIndex !== undefined && columnReorderOptions) {\n      const isCheckboxColumnHidden =\n        selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n\n      const showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;\n      const columnIndex = (showCheckbox ? 2 : 1) + index!;\n\n      const draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;\n      const targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;\n\n      const frozenColumnCountFromStart = columnReorderOptions.frozenColumnCountFromStart ?? 0;\n      const frozenColumnCountFromEnd = columnReorderOptions.frozenColumnCountFromEnd ?? 0;\n      const isValidTargetIndex =\n        targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;\n\n      if (isValidTargetIndex) {\n        if (columnReorderOptions.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: draggedIndex,\n            targetIndex: targetIndex,\n          };\n          columnReorderOptions.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderOptions.handleColumnReorder) {\n          columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, flexMargin, skipViewportMeasures } = this.props;\n    let remainingWidth = viewportWidth - (flexMargin || 0);\n    let sumProportionalWidth = 0;\n\n    newColumns.forEach((col: IColumn) => {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n\n    let widthFraction = remainingWidth / sumProportionalWidth;\n\n    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n    if (!skipViewportMeasures) {\n      newColumns.forEach((column: IColumn) => {\n        const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          const fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          const shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      // Delay computation until viewport width is available.\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    let minimumWidth = 0;\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const baseColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n      };\n\n      const newColumn = {\n        ...baseColumn,\n        ...this._columnOverrides[column.key],\n      };\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n\n      return newColumn;\n    });\n\n    if (minimumWidth > availableWidth) {\n      return adjustedColumns;\n    }\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n  columnActionsMode?: ColumnActionsMode,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: columnActionsMode ?? ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, props: IDetailsListProps, paddingOnly?: true): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    (paddingOnly ? 0 : column.calculatedWidth!) +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n\ninterface IGroupedDetailsListIndexMap {\n  [key: string]: { numOfGroupHeadersBeforeItem: number; totalRowCount: number };\n}\n\nfunction useGroupedDetailsListIndexMap(groups: IDetailsListProps['groups']) {\n  return React.useMemo((): IGroupedDetailsListIndexMap => {\n    const indexMap: IGroupedDetailsListIndexMap = {};\n    if (groups) {\n      let rowCount = 1;\n      let numGroupHeaders = 1;\n      for (const group of groups) {\n        const { key } = group;\n        indexMap[key] = { numOfGroupHeadersBeforeItem: numGroupHeaders, totalRowCount: rowCount };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n    return indexMap;\n  }, [groups]);\n}\n","import { getGlobalClassNames } from '../../Styling';\nimport type { IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsList',\n  compact: 'ms-DetailsList--Compact',\n  contentWrapper: 'ms-DetailsList-contentWrapper',\n  headerWrapper: 'ms-DetailsList-headerWrapper',\n  isFixed: 'is-fixed',\n  isHorizontalConstrained: 'is-horizontalConstrained',\n  listCell: 'ms-List-cell',\n};\n\nexport const getDetailsListStyles = (props: IDetailsListStyleProps): IDetailsListStyles => {\n  const { theme, className, isHorizontalConstrained, compact, isFixed } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        color: semanticColors.listText,\n        selectors: {\n          [`& .${classNames.listCell}`]: {\n            minHeight: 38,\n            wordBreak: 'break-word',\n          },\n        },\n      },\n\n      isFixed && classNames.isFixed,\n\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32,\n            },\n          },\n        },\n      ],\n\n      isHorizontalConstrained && [\n        classNames.isHorizontalConstrained,\n        {\n          overflowX: 'auto',\n          overflowY: 'visible',\n          WebkitOverflowScrolling: 'touch',\n        },\n      ],\n\n      className,\n    ],\n\n    focusZone: [\n      {\n        display: 'inline-block',\n        minWidth: '100%',\n        minHeight: 1,\n      },\n    ],\n    headerWrapper: classNames.headerWrapper,\n    contentWrapper: classNames.contentWrapper,\n  };\n};\n","import * as React from 'react';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * Shimmer component props.\n * {@docCategory Shimmer}\n */\nexport interface IShimmerProps extends React.AllHTMLAttributes<HTMLElement>, React.RefAttributes<HTMLElement> {\n  /**\n   * Sets the width value of the shimmer wave wrapper.\n   * @defaultvalue 100%\n   */\n  width?: number | string;\n\n  /**\n   * Controls when the shimmer is swapped with actual data through an animated transition.\n   * @defaultvalue false\n   */\n  isDataLoaded?: boolean;\n\n  /**\n   * Elements to render in one line of the Shimmer.\n   */\n  shimmerElements?: IShimmerElement[];\n\n  /**\n   * Custom elements when necessary to build complex placeholder skeletons.\n   */\n  customElementsGroup?: React.ReactNode;\n\n  /**\n   * Localized string of the status label for screen reader\n   */\n  ariaLabel?: string;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IShimmerStyleProps, IShimmerStyles>;\n\n  /**\n   * Additional CSS class(es) to apply to the Shimmer container.\n   */\n  className?: string;\n\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Defines an object with possible colors to pass for Shimmer customization used on different backgrounds.\n   */\n  shimmerColors?: IShimmerColors;\n}\n\n/**\n * Shimmer Elements Interface representing all common properties between Gap, Circle and Line.\n * {@docCategory Shimmer}\n */\nexport interface IShimmerElement {\n  /**\n   * Represents the possible type of the shimmer elements: Gap, Circle, Line.\n   * Required for every element you intend to use.\n   */\n  type: ShimmerElementType;\n\n  /**\n   * Sets the height of the element (ICircle, ILine, IGap) in pixels.\n   * Read more details for each specific element.\n   */\n  height?: number;\n\n  /**\n   * Sets the width value of the element (ILine, IGap) in pixels.\n   * Read more details for each specific element.\n   */\n  width?: number | string;\n\n  /**\n   * Sets vertical alignment of the element (ICircle, ILine).\n   * @defaultvalue center\n   */\n  verticalAlign?: 'top' | 'center' | 'bottom';\n}\n\n/**\n * Line element interface\n * {@docCategory Shimmer}\n */\nexport interface ILine extends IShimmerElement {\n  /**\n   * Sets the height of the shimmer line in pixels.\n   * @defaultvalue 16px\n   */\n  height?: number;\n\n  /**\n   * Line width value.\n   * @defaultvalue 100%\n   */\n  width?: number | string;\n}\n\n/**\n * Circle element interface\n * {@docCategory Shimmer}\n */\nexport interface ICircle extends IShimmerElement {\n  /**\n   * Sets the height of the shimmer circle in pixels.\n   * Minimum supported 10px.\n   * @defaultvalue 24px\n   */\n  height?: number;\n}\n\n/**\n * Gap element interface\n * {@docCategory Shimmer}\n */\nexport interface IGap extends IShimmerElement {\n  /**\n   * Sets the height of the shimmer gap in pixels.\n   * @defaultvalue 16px\n   */\n  height?: number;\n\n  /**\n   * Gap width value.\n   * @defaultvalue 10px\n   */\n  width?: number | string;\n}\n\n/**\n * Defines props needed to construct styles.\n * This represents the simplified set of immutable things which control the class names.\n * {@docCategory Shimmer}\n */\nexport interface IShimmerStyleProps {\n  /** Boolean flag to trigger fadeIn/fadeOut transition animation when content is loaded. */\n  isDataLoaded?: boolean;\n\n  /** Optional CSS class name for the component attached to the root stylable area. */\n  className?: string;\n\n  /** Theme provided by High-Order Component. */\n  theme: ITheme;\n\n  /** Interval in milliseconds for the adeIn/fadeOut transition animation. */\n  transitionAnimationInterval?: number;\n\n  /** Color to be used as the main background color of Shimmer when not animating. */\n  shimmerColor?: string;\n\n  /** Tip color of the shimmer wave which gradually gets from and to `shimmerColor`. */\n  shimmerWaveColor?: string;\n}\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Shimmer}\n */\nexport interface IShimmerStyles {\n  /** Refers to the root wrapper element. */\n  root?: IStyle;\n\n  /** Refers to wrapper element of the shimmer only. */\n  shimmerWrapper?: IStyle;\n\n  /** Refers to gradient element of the shimmer animation only. */\n  shimmerGradient?: IStyle;\n\n  /** Refers to wrapper element of the children only. */\n  dataWrapper?: IStyle;\n\n  /** Styles for the hidden helper element to aid with screen readers. */\n  screenReaderText?: IStyle;\n}\n\n/**\n * Describes the possible types for shimmer elements used.\n * {@docCategory Shimmer}\n */\nexport enum ShimmerElementType {\n  /**\n   * Line element type\n   */\n  line = 1,\n\n  /**\n   * Circle element type\n   */\n  circle = 2,\n\n  /**\n   * Gap element type\n   */\n  gap = 3,\n}\n\n/**\n * Describes the default heights for shimmer elements when omitted in implementation.\n * {@docCategory Shimmer}\n */\nexport enum ShimmerElementsDefaultHeights {\n  /**\n   * Default height of the line element when not provided by user: 16px\n   */\n  line = 16,\n\n  /**\n   * Default height of the gap element when not provided by user: 16px\n   */\n  gap = 16,\n\n  /**\n   * Default height of the circle element when not provided by user: 24px\n   */\n  circle = 24,\n}\n\n/**\n * Interface describing the possible color customizations of Shimmer.\n * {@docCategory Shimmer}\n */\nexport interface IShimmerColors {\n  /**\n   * Defines the main background color which is the color you see when the wave is not animating.\n   * @defaultvalue theme.palette.neutralLight\n   */\n  shimmer?: string;\n\n  /**\n   * Defines the tip color of the shimmer wave which gradually gets from and to `shimmer` color.\n   * @defaultvalue theme.palette.neutralLighter\n   */\n  shimmerWave?: string;\n\n  /**\n   * Defines the background color of the space in between and around shimmer elements (borders, gaps and\n   * rounded corners).\n   * @defaultvalue theme.palette.white\n   */\n  background?: string;\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsListBase } from './DetailsList.base';\nimport { getDetailsListStyles } from './DetailsList.styles';\nimport type { IDetailsListProps, IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\n\nexport const DetailsList: React.FunctionComponent<IDetailsListProps> = styled<\n  IDetailsListProps,\n  IDetailsListStyleProps,\n  IDetailsListStyles\n>(DetailsListBase, getDetailsListStyles, undefined, {\n  scope: 'DetailsList',\n});\n\nexport type { IDetailsListProps };\n","import {\n  keyframes,\n  getGlobalClassNames,\n  hiddenContentStyle,\n  HighContrastSelector,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, memoizeFunction } from '../../Utilities';\nimport type { IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Shimmer-container',\n  shimmerWrapper: 'ms-Shimmer-shimmerWrapper',\n  shimmerGradient: 'ms-Shimmer-shimmerGradient',\n  dataWrapper: 'ms-Shimmer-dataWrapper',\n};\n\nconst BACKGROUND_OFF_SCREEN_POSITION = '100%';\n\nconst shimmerAnimation = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      transform: `translateX(-${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n    '100%': {\n      transform: `translateX(${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n  }),\n);\n\nconst shimmerAnimationRTL = memoizeFunction(() =>\n  keyframes({\n    '100%': {\n      transform: `translateX(-${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n    '0%': {\n      transform: `translateX(${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n  }),\n);\n\nexport function getStyles(props: IShimmerStyleProps): IShimmerStyles {\n  const { isDataLoaded, className, theme, transitionAnimationInterval, shimmerColor, shimmerWaveColor } = props;\n\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const isRTL = getRTL(theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        position: 'relative',\n        height: 'auto',\n      },\n      className,\n    ],\n    shimmerWrapper: [\n      classNames.shimmerWrapper,\n      {\n        position: 'relative',\n        overflow: 'hidden',\n        transform: 'translateZ(0)',\n        backgroundColor: shimmerColor || semanticColors.disabledBackground,\n        transition: `opacity ${transitionAnimationInterval}ms`,\n        selectors: {\n          '> *': {\n            transform: 'translateZ(0)',\n          },\n          [HighContrastSelector]: {\n            background: `WindowText\n                        linear-gradient(\n                          to right,\n                          transparent 0%,\n                          Window 50%,\n                          transparent 100%)\n                        0 0 / 90% 100%\n                        no-repeat`,\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      isDataLoaded && {\n        opacity: '0',\n        position: 'absolute',\n        top: '0',\n        bottom: '0',\n        left: '0',\n        right: '0',\n      },\n    ],\n    shimmerGradient: [\n      classNames.shimmerGradient,\n      {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        background: `${shimmerColor || semanticColors.disabledBackground}\n                      linear-gradient(\n                        to right,\n                        ${shimmerColor || semanticColors.disabledBackground} 0%,\n                        ${shimmerWaveColor || semanticColors.bodyDivider} 50%,\n                        ${shimmerColor || semanticColors.disabledBackground} 100%)\n                      0 0 / 90% 100%\n                      no-repeat`,\n        transform: `translateX(-${BACKGROUND_OFF_SCREEN_POSITION})`,\n        animationDuration: '2s',\n        animationTimingFunction: 'ease-in-out',\n        animationDirection: 'normal',\n        animationIterationCount: 'infinite',\n        animationName: isRTL ? shimmerAnimationRTL() : shimmerAnimation(),\n      },\n    ],\n    dataWrapper: [\n      classNames.dataWrapper,\n      {\n        position: 'absolute',\n        top: '0',\n        bottom: '0',\n        left: '0',\n        right: '0',\n        opacity: '0',\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        transition: `opacity ${transitionAnimationInterval}ms`,\n      },\n      isDataLoaded && {\n        opacity: '1',\n        position: 'static',\n      },\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n}\n","import * as React from 'react';\nimport { classNamesFunction } from '../../../Utilities';\nimport type { IShimmerLineProps, IShimmerLineStyleProps, IShimmerLineStyles } from './ShimmerLine.types';\n\nconst getClassNames = classNamesFunction<IShimmerLineStyleProps, IShimmerLineStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerLineBase: React.FunctionComponent<IShimmerLineProps> = props => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height, styles, width = '100%', borderStyle, theme } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    height,\n    borderStyle,\n  });\n\n  return (\n    <div\n      style={{ width: width, minWidth: typeof width === 'number' ? `${width}px` : 'auto' }}\n      className={classNames.root}\n    >\n      <svg width=\"2\" height=\"2\" className={classNames.topLeftCorner}>\n        <path d=\"M0 2 A 2 2, 0, 0, 1, 2 0 L 0 0 Z\" />\n      </svg>\n      <svg width=\"2\" height=\"2\" className={classNames.topRightCorner}>\n        <path d=\"M0 0 A 2 2, 0, 0, 1, 2 2 L 2 0 Z\" />\n      </svg>\n      <svg width=\"2\" height=\"2\" className={classNames.bottomRightCorner}>\n        <path d=\"M2 0 A 2 2, 0, 0, 1, 0 2 L 2 2 Z\" />\n      </svg>\n      <svg width=\"2\" height=\"2\" className={classNames.bottomLeftCorner}>\n        <path d=\"M2 2 A 2 2, 0, 0, 1, 0 0 L 0 2 Z\" />\n      </svg>\n    </div>\n  );\n};\n","import { getGlobalClassNames, HighContrastSelector } from '../../../Styling';\nimport type { IShimmerLineStyleProps, IShimmerLineStyles } from './ShimmerLine.types';\nimport type { IRawStyle } from '../../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-ShimmerLine-root',\n  topLeftCorner: 'ms-ShimmerLine-topLeftCorner',\n  topRightCorner: 'ms-ShimmerLine-topRightCorner',\n  bottomLeftCorner: 'ms-ShimmerLine-bottomLeftCorner',\n  bottomRightCorner: 'ms-ShimmerLine-bottomRightCorner',\n};\n\nexport function getStyles(props: IShimmerLineStyleProps): IShimmerLineStyles {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height, borderStyle, theme } = props;\n\n  const { semanticColors } = theme;\n  const globalClassNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const borderStyles: IRawStyle = borderStyle || {};\n\n  const sharedCornerStyles: IRawStyle = {\n    position: 'absolute',\n    fill: semanticColors.bodyBackground,\n  };\n\n  return {\n    root: [\n      globalClassNames.root,\n      theme.fonts.medium,\n      {\n        height: `${height}px`,\n        boxSizing: 'content-box',\n        position: 'relative',\n        borderTopStyle: 'solid',\n        borderBottomStyle: 'solid',\n        borderColor: semanticColors.bodyBackground,\n        borderWidth: 0,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'Window',\n            selectors: {\n              '> *': {\n                fill: 'Window',\n              },\n            },\n          },\n        },\n      },\n      borderStyles,\n    ],\n    topLeftCorner: [\n      globalClassNames.topLeftCorner,\n      {\n        top: '0',\n        left: '0',\n      },\n      sharedCornerStyles,\n    ],\n    topRightCorner: [\n      globalClassNames.topRightCorner,\n      {\n        top: '0',\n        right: '0',\n      },\n      sharedCornerStyles,\n    ],\n    bottomRightCorner: [\n      globalClassNames.bottomRightCorner,\n      {\n        bottom: '0',\n        right: '0',\n      },\n      sharedCornerStyles,\n    ],\n    bottomLeftCorner: [\n      globalClassNames.bottomLeftCorner,\n      {\n        bottom: '0',\n        left: '0',\n      },\n      sharedCornerStyles,\n    ],\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../../Utilities';\nimport { ShimmerLineBase } from './ShimmerLine.base';\nimport { getStyles } from './ShimmerLine.styles';\nimport type { IShimmerLineProps, IShimmerLineStyleProps, IShimmerLineStyles } from './ShimmerLine.types';\n\nexport const ShimmerLine: React.FunctionComponent<IShimmerLineProps> = styled<\n  IShimmerLineProps,\n  IShimmerLineStyleProps,\n  IShimmerLineStyles\n>(ShimmerLineBase, getStyles, undefined, {\n  scope: 'ShimmerLine',\n});\n","import * as React from 'react';\nimport { classNamesFunction } from '../../../Utilities';\nimport type { IShimmerGapProps, IShimmerGapStyleProps, IShimmerGapStyles } from './ShimmerGap.types';\n\nconst getClassNames = classNamesFunction<IShimmerGapStyleProps, IShimmerGapStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerGapBase: React.FunctionComponent<IShimmerGapProps> = props => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height, styles, width = '10px', borderStyle, theme } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    height,\n    borderStyle,\n  });\n\n  return (\n    <div\n      style={{ width: width, minWidth: typeof width === 'number' ? `${width}px` : 'auto' }}\n      className={classNames.root}\n    />\n  );\n};\n","import { getGlobalClassNames, HighContrastSelector } from '../../../Styling';\nimport type { IShimmerGapStyleProps, IShimmerGapStyles } from './ShimmerGap.types';\nimport type { IRawStyle } from '../../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-ShimmerGap-root',\n};\n\nexport function getStyles(props: IShimmerGapStyleProps): IShimmerGapStyles {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height, borderStyle, theme } = props;\n\n  const { semanticColors } = theme;\n  const globalClassNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const borderStyles: IRawStyle = borderStyle || {};\n\n  return {\n    root: [\n      globalClassNames.root,\n      theme.fonts.medium,\n      {\n        backgroundColor: semanticColors.bodyBackground,\n        height: `${height}px`,\n        boxSizing: 'content-box',\n        borderTopStyle: 'solid',\n        borderBottomStyle: 'solid',\n        borderColor: semanticColors.bodyBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Window',\n            borderColor: 'Window',\n          },\n        },\n      },\n      borderStyles,\n    ],\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../../Utilities';\nimport { ShimmerGapBase } from './ShimmerGap.base';\nimport { getStyles } from './ShimmerGap.styles';\nimport type { IShimmerGapProps, IShimmerGapStyleProps, IShimmerGapStyles } from './ShimmerGap.types';\n\nexport const ShimmerGap: React.FunctionComponent<IShimmerGapProps> = styled<\n  IShimmerGapProps,\n  IShimmerGapStyleProps,\n  IShimmerGapStyles\n>(ShimmerGapBase, getStyles, undefined, {\n  scope: 'ShimmerGap',\n});\n","import { getGlobalClassNames, HighContrastSelector } from '../../../Styling';\nimport type { IShimmerCircleStyleProps, IShimmerCircleStyles } from './ShimmerCircle.types';\nimport type { IRawStyle } from '../../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-ShimmerCircle-root',\n  svg: 'ms-ShimmerCircle-svg',\n};\n\nexport function getStyles(props: IShimmerCircleStyleProps): IShimmerCircleStyles {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height, borderStyle, theme } = props;\n\n  const { semanticColors } = theme;\n  const globalClassNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const borderStyles: IRawStyle = borderStyle || {};\n\n  return {\n    root: [\n      globalClassNames.root,\n      theme.fonts.medium,\n      {\n        width: `${height}px`,\n        height: `${height}px`,\n        minWidth: `${height}px`, // Fix for IE11 flex items\n        boxSizing: 'content-box',\n        borderTopStyle: 'solid',\n        borderBottomStyle: 'solid',\n        borderColor: semanticColors.bodyBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'Window',\n          },\n        },\n      },\n      borderStyles,\n    ],\n    svg: [\n      globalClassNames.svg,\n      {\n        display: 'block',\n        fill: semanticColors.bodyBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            fill: 'Window',\n          },\n        },\n      },\n    ],\n  };\n}\n","import * as React from 'react';\nimport { classNamesFunction } from '../../../Utilities';\nimport type { IShimmerCircleProps, IShimmerCircleStyleProps, IShimmerCircleStyles } from './ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerCircleStyleProps, IShimmerCircleStyles>();\n\nexport const ShimmerCircleBase: React.FunctionComponent<IShimmerCircleProps> = props => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height, styles, borderStyle, theme } = props;\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    height,\n    borderStyle,\n  });\n\n  return (\n    <div className={classNames.root}>\n      <svg viewBox=\"0 0 10 10\" width={height} height={height} className={classNames.svg}>\n        <path d=\"M0,0 L10,0 L10,10 L0,10 L0,0 Z M0,5 C0,7.76142375 2.23857625,10 5,10 C7.76142375,10 10,7.76142375 10,5 C10,2.23857625 7.76142375,2.22044605e-16 5,0 C2.23857625,-2.22044605e-16 0,2.23857625 0,5 L0,5 Z\" />\n      </svg>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { styled } from '../../../Utilities';\nimport { getStyles } from './ShimmerCircle.styles';\nimport { ShimmerCircleBase } from './ShimmerCircle.base';\nimport type { IShimmerCircleProps, IShimmerCircleStyleProps, IShimmerCircleStyles } from './ShimmerCircle.types';\n\nexport const ShimmerCircle: React.FunctionComponent<IShimmerCircleProps> = styled<\n  IShimmerCircleProps,\n  IShimmerCircleStyleProps,\n  IShimmerCircleStyles\n>(ShimmerCircleBase, getStyles, undefined, { scope: 'ShimmerCircle' });\n","import * as React from 'react';\nimport { classNamesFunction, memoizeFunction } from '../../../Utilities';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nimport type { IRawStyle } from '../../../Styling';\nimport type {\n  IShimmerElementsGroupProps,\n  IShimmerElementsGroupStyleProps,\n  IShimmerElementsGroupStyles,\n} from './ShimmerElementsGroup.types';\nimport type { IShimmerElement } from '../Shimmer.types';\nimport type { IShimmerLineStyles } from '../ShimmerLine/ShimmerLine.types';\nimport type { IShimmerGapStyles } from '../ShimmerGap/ShimmerGap.types';\nimport type { IShimmerCircleStyles } from '../ShimmerCircle/ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerElementsGroupBase: React.FunctionComponent<IShimmerElementsGroupProps> = props => {\n  const {\n    styles,\n    width = 'auto',\n    shimmerElements,\n    rowHeight = findMaxElementHeight(shimmerElements || []),\n    flexWrap = false,\n    theme,\n    backgroundColor,\n  } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    flexWrap,\n  });\n\n  return (\n    <div style={{ width: width }} className={classNames.root}>\n      {getRenderedElements(shimmerElements, backgroundColor, rowHeight)}\n    </div>\n  );\n};\n\nfunction getRenderedElements(\n  shimmerElements?: IShimmerElement[],\n  backgroundColor?: string,\n  rowHeight?: number,\n): React.ReactNode {\n  const renderedElements: React.ReactNode = shimmerElements ? (\n    shimmerElements.map(\n      // false positive\n      // eslint-disable-next-line array-callback-return\n      (element: IShimmerElement, index: number): JSX.Element => {\n        const { type, ...filteredElem } = element;\n        const { verticalAlign, height } = filteredElem;\n        const styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n\n        switch (element.type) {\n          case ShimmerElementType.circle:\n            return <ShimmerCircle key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.gap:\n            return <ShimmerGap key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.line:\n            return <ShimmerLine key={index} {...filteredElem} styles={styles} />;\n        }\n      },\n    )\n  ) : (\n    <ShimmerLine height={ShimmerElementsDefaultHeights.line} />\n  );\n\n  return renderedElements;\n}\n\nconst getElementStyles = memoizeFunction(\n  (\n    verticalAlign: 'center' | 'bottom' | 'top' | undefined,\n    elementType: ShimmerElementType,\n    elementHeight: number | undefined,\n    backgroundColor?: string,\n    rowHeight?: number,\n  ): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\n    const dif: number = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n\n    let borderStyle: IRawStyle | undefined;\n\n    if (!verticalAlign || verticalAlign === 'center') {\n      borderStyle = {\n        borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\n        borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'top') {\n      borderStyle = {\n        borderBottomWidth: `${dif}px`,\n        borderTopWidth: `0px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'bottom') {\n      borderStyle = {\n        borderBottomWidth: `0px`,\n        borderTopWidth: `${dif}px`,\n      };\n    }\n\n    if (backgroundColor) {\n      switch (elementType) {\n        case ShimmerElementType.circle:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            svg: { fill: backgroundColor },\n          };\n        case ShimmerElementType.gap:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor, backgroundColor: backgroundColor },\n          };\n        case ShimmerElementType.line:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            topLeftCorner: { fill: backgroundColor },\n            topRightCorner: { fill: backgroundColor },\n            bottomLeftCorner: { fill: backgroundColor },\n            bottomRightCorner: { fill: backgroundColor },\n          };\n      }\n    }\n\n    return {\n      root: borderStyle,\n    };\n  },\n);\n\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\nfunction findMaxElementHeight(shimmerElements: IShimmerElement[]): number {\n  const shimmerElementsDefaulted: IShimmerElement[] = shimmerElements.map(\n    (element: IShimmerElement): IShimmerElement => {\n      switch (element.type) {\n        case ShimmerElementType.circle:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.circle;\n          }\n          break;\n        case ShimmerElementType.line:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.line;\n          }\n          break;\n        case ShimmerElementType.gap:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.gap;\n          }\n          break;\n      }\n      return element;\n    },\n  );\n\n  const rowHeight = shimmerElementsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\n    return next.height ? (next.height > acc ? next.height : acc) : acc;\n  }, 0);\n\n  return rowHeight;\n}\n","import { getGlobalClassNames } from '../../../Styling';\nimport type { IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles } from './ShimmerElementsGroup.types';\n\nconst GlobalClassNames = {\n  root: 'ms-ShimmerElementsGroup-root',\n};\n\nexport function getStyles(props: IShimmerElementsGroupStyleProps): IShimmerElementsGroupStyles {\n  const { flexWrap, theme } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        flexWrap: flexWrap ? 'wrap' : 'nowrap',\n        position: 'relative',\n      },\n    ],\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../../Utilities';\nimport { ShimmerElementsGroupBase } from './ShimmerElementsGroup.base';\nimport { getStyles } from './ShimmerElementsGroup.styles';\nimport type {\n  IShimmerElementsGroupProps,\n  IShimmerElementsGroupStyleProps,\n  IShimmerElementsGroupStyles,\n} from './ShimmerElementsGroup.types';\n\nexport const ShimmerElementsGroup: React.FunctionComponent<IShimmerElementsGroupProps> = styled<\n  IShimmerElementsGroupProps,\n  IShimmerElementsGroupStyleProps,\n  IShimmerElementsGroupStyles\n>(ShimmerElementsGroupBase, getStyles, undefined, { scope: 'ShimmerElementsGroup' });\n","import * as React from 'react';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nimport { useSetTimeout, useConst } from '@fluentui/react-hooks';\nimport type { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\n\nconst TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\nconst COMPONENT_NAME = 'Shimmer';\n\nconst getClassNames = classNamesFunction<IShimmerStyleProps, IShimmerStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerBase: React.FunctionComponent<IShimmerProps> = React.forwardRef<HTMLDivElement, IShimmerProps>(\n  (props, ref) => {\n    const {\n      styles,\n      shimmerElements,\n      children,\n      width,\n      className,\n      customElementsGroup,\n      theme,\n      ariaLabel,\n      shimmerColors,\n      isDataLoaded = false,\n    } = props;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties);\n\n    const classNames: { [key in keyof IShimmerStyles]: string } = getClassNames(styles!, {\n      theme: theme!,\n      isDataLoaded,\n      className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave,\n    });\n\n    const internalState = useConst({\n      lastTimeoutId: 0,\n    });\n\n    const { setTimeout, clearTimeout } = useSetTimeout();\n\n    /**\n     * Flag for knowing when to remove the shimmerWrapper from the DOM.\n     */\n    const [contentLoaded, setContentLoaded] = React.useState(isDataLoaded);\n\n    const divStyleProp = { width: width ? width : '100%' };\n\n    React.useEffect(() => {\n      if (isDataLoaded !== contentLoaded) {\n        if (isDataLoaded) {\n          internalState.lastTimeoutId = setTimeout(() => {\n            setContentLoaded(true);\n          }, TRANSITION_ANIMATION_INTERVAL);\n\n          return () => clearTimeout(internalState.lastTimeoutId);\n        } else {\n          setContentLoaded(false);\n        }\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only run when isDataLoaded changes.\n    }, [isDataLoaded]);\n\n    return (\n      <div {...divProps} className={classNames.root} ref={ref}>\n        {!contentLoaded && (\n          <div style={divStyleProp} className={classNames.shimmerWrapper}>\n            <div className={classNames.shimmerGradient} />\n            {customElementsGroup ? (\n              customElementsGroup\n            ) : (\n              <ShimmerElementsGroup\n                shimmerElements={shimmerElements}\n                backgroundColor={shimmerColors && shimmerColors.background}\n              />\n            )}\n          </div>\n        )}\n        {children && <div className={classNames.dataWrapper}>{children}</div>}\n        {ariaLabel && !isDataLoaded && (\n          <div role=\"status\" aria-live=\"polite\">\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{ariaLabel}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\nShimmerBase.displayName = COMPONENT_NAME;\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './Shimmer.styles';\nimport { ShimmerBase } from './Shimmer.base';\nimport type { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\n\nexport const Shimmer: React.FunctionComponent<IShimmerProps> = styled<\n  IShimmerProps,\n  IShimmerStyleProps,\n  IShimmerStyles\n>(ShimmerBase, getStyles, undefined, {\n  scope: 'Shimmer',\n});\n","import * as React from 'react';\n\nimport { classNamesFunction, css } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { DetailsList } from './DetailsList';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType } from '../../Shimmer';\nimport { CheckboxVisibility } from './DetailsList.types';\n\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDetailsRowProps } from './DetailsRow.types';\nimport type { IShimmerElement } from '../../Shimmer';\nimport type {\n  IShimmeredDetailsListProps,\n  IShimmeredDetailsListStyleProps,\n  IShimmeredDetailsListStyles,\n} from './ShimmeredDetailsList.types';\n\nconst getClassNames = classNamesFunction<IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles>();\n\nconst SHIMMER_INITIAL_ITEMS = 10;\nconst DEFAULT_SHIMMER_HEIGHT = 7;\nconst SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\n\nexport class ShimmeredDetailsListBase extends React.Component<IShimmeredDetailsListProps, {}> {\n  private _shimmerItems: null[];\n  private _classNames: IProcessedStyleSet<IShimmeredDetailsListStyles>;\n\n  constructor(props: IShimmeredDetailsListProps) {\n    super(props);\n\n    this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n  }\n\n  public render(): JSX.Element {\n    const {\n      detailsListStyles,\n      enableShimmer,\n      items,\n      listProps,\n      onRenderCustomPlaceholder,\n      removeFadingOverlay,\n      shimmerLines,\n      styles,\n      theme,\n      ariaLabelForGrid,\n      ariaLabelForShimmer,\n      ...restProps\n    } = this.props;\n\n    const listClassName = listProps && listProps.className;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n    });\n\n    const newListProps = {\n      ...listProps,\n      // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on\n      // and the overlay is not disabled by `removeFadingOverlay` prop.\n      className: enableShimmer && !removeFadingOverlay ? css(this._classNames.root, listClassName) : listClassName,\n    };\n\n    return (\n      <DetailsList\n        {...restProps}\n        styles={detailsListStyles}\n        items={enableShimmer ? this._shimmerItems : items}\n        isPlaceholderData={enableShimmer}\n        ariaLabelForGrid={(enableShimmer && ariaLabelForShimmer) || ariaLabelForGrid}\n        onRenderMissingItem={this._onRenderShimmerPlaceholder}\n        listProps={newListProps}\n      />\n    );\n  }\n\n  private _onRenderShimmerPlaceholder = (index: number, rowProps: IDetailsRowProps): React.ReactNode => {\n    const { onRenderCustomPlaceholder } = this.props;\n\n    const placeholderElements: React.ReactNode = onRenderCustomPlaceholder\n      ? onRenderCustomPlaceholder(rowProps, index, this._renderDefaultShimmerPlaceholder)\n      : this._renderDefaultShimmerPlaceholder(rowProps);\n\n    return <Shimmer customElementsGroup={placeholderElements} />;\n  };\n\n  private _renderDefaultShimmerPlaceholder = (rowProps: IDetailsRowProps): React.ReactNode => {\n    const { columns, compact, selectionMode, checkboxVisibility, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = rowProps;\n\n    const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n    // 1px to take into account the border-bottom of DetailsRow.\n    const gapHeight: number = compact ? compactRowHeight : rowHeight + 1;\n\n    const shimmerElementsRow: JSX.Element[] = [];\n\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n\n    if (showCheckbox) {\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup\n          key={'checkboxGap'}\n          shimmerElements={[{ type: ShimmerElementType.gap, width: '40px', height: gapHeight }]}\n        />,\n      );\n    }\n\n    columns.forEach((column, columnIdx) => {\n      const shimmerElements: IShimmerElement[] = [];\n      const groupWidth: number =\n        cellStyleProps.cellLeftPadding +\n        cellStyleProps.cellRightPadding +\n        column.calculatedWidth! +\n        (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      shimmerElements.push({\n        type: ShimmerElementType.gap,\n        width: cellStyleProps.cellLeftPadding,\n        height: gapHeight,\n      });\n\n      if (column.isIconOnly) {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth!,\n          height: column.calculatedWidth!,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: cellStyleProps.cellRightPadding,\n          height: gapHeight,\n        });\n      } else {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n          height: DEFAULT_SHIMMER_HEIGHT,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width:\n            cellStyleProps.cellRightPadding +\n            (column.calculatedWidth! - column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          height: gapHeight,\n        });\n      }\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup key={columnIdx} width={`${groupWidth}px`} shimmerElements={shimmerElements} />,\n      );\n    });\n    // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave\n    // until the column resizing logic is done.\n    shimmerElementsRow.push(\n      <ShimmerElementsGroup\n        key={'endGap'}\n        width={'100%'}\n        shimmerElements={[{ type: ShimmerElementType.gap, width: '100%', height: gapHeight }]}\n      />,\n    );\n    return <div style={{ display: 'flex' }}>{shimmerElementsRow}</div>;\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ShimmeredDetailsListBase } from './ShimmeredDetailsList.base';\nimport { getShimmeredDetailsListStyles } from './ShimmeredDetailsList.styles';\nimport type {\n  IShimmeredDetailsListProps,\n  IShimmeredDetailsListStyleProps,\n  IShimmeredDetailsListStyles,\n} from './ShimmeredDetailsList.types';\n\nexport const ShimmeredDetailsList: React.FunctionComponent<IShimmeredDetailsListProps> = styled<\n  IShimmeredDetailsListProps,\n  IShimmeredDetailsListStyleProps,\n  IShimmeredDetailsListStyles\n>(ShimmeredDetailsListBase, getShimmeredDetailsListStyles, undefined, { scope: 'ShimmeredDetailsList' });\n","import type { IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles } from './ShimmeredDetailsList.types';\n\nexport const getShimmeredDetailsListStyles = (props: IShimmeredDetailsListStyleProps): IShimmeredDetailsListStyles => {\n  const { theme } = props;\n  const { palette } = theme;\n\n  return {\n    root: {\n      position: 'relative',\n      selectors: {\n        ':after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          // eslint-disable-next-line @fluentui/max-len\n          backgroundImage: `linear-gradient(to bottom, transparent 30%, ${palette.whiteTranslucent40} 65%,${palette.white} 100%)`,\n        },\n      },\n    },\n  };\n};\n","import { EventGroup } from './EventGroup';\nimport { findScrollableParent } from './scroll';\nimport { getRect } from './dom/getRect';\nimport type { IRectangle } from './IRectangle';\n\ndeclare function setTimeout(cb: Function, delay: number): number;\n\nconst SCROLL_ITERATION_DELAY = 16;\nconst SCROLL_GUTTER = 100;\nconst MAX_SCROLL_VELOCITY = 15;\n\n/**\n * AutoScroll simply hooks up mouse events given a parent element, and scrolls the container\n * up/down depending on how close the mouse is to the top/bottom of the container.\n *\n * Once you don't want autoscroll any more, just dispose the helper and it will unhook events.\n *\n * @public\n * {@docCategory AutoScroll}\n */\nexport class AutoScroll {\n  private _events: EventGroup;\n  private _scrollableParent: HTMLElement | null;\n  private _scrollRect: IRectangle | undefined;\n  private _scrollVelocity!: number;\n  private _isVerticalScroll!: boolean;\n  private _timeoutId?: number;\n\n  constructor(element: HTMLElement) {\n    this._events = new EventGroup(this);\n    this._scrollableParent = findScrollableParent(element) as HTMLElement;\n\n    this._incrementScroll = this._incrementScroll.bind(this);\n    this._scrollRect = getRect(this._scrollableParent);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (this._scrollableParent === (window as any)) {\n      this._scrollableParent = document.body;\n    }\n\n    if (this._scrollableParent) {\n      this._events.on(window, 'mousemove', this._onMouseMove, true);\n      this._events.on(window, 'touchmove', this._onTouchMove, true);\n    }\n  }\n\n  public dispose(): void {\n    this._events.dispose();\n    this._stopScroll();\n  }\n\n  private _onMouseMove(ev: MouseEvent): void {\n    this._computeScrollVelocity(ev);\n  }\n\n  private _onTouchMove(ev: TouchEvent): void {\n    if (ev.touches.length > 0) {\n      this._computeScrollVelocity(ev);\n    }\n  }\n\n  private _computeScrollVelocity(ev: MouseEvent | TouchEvent): void {\n    if (!this._scrollRect) {\n      return;\n    }\n\n    let clientX: number;\n    let clientY: number;\n    if ('clientX' in ev) {\n      clientX = ev.clientX;\n      clientY = ev.clientY;\n    } else {\n      clientX = ev.touches[0].clientX;\n      clientY = ev.touches[0].clientY;\n    }\n\n    let scrollRectTop = this._scrollRect.top;\n    let scrollRectLeft = this._scrollRect.left;\n    let scrollClientBottom = scrollRectTop + this._scrollRect.height - SCROLL_GUTTER;\n    let scrollClientRight = scrollRectLeft + this._scrollRect.width - SCROLL_GUTTER;\n\n    // variables to use for alternating scroll direction\n    let scrollRect;\n    let clientDirection;\n    let scrollClient;\n\n    // if either of these conditions are met we are scrolling vertically else horizontally\n    if (clientY < scrollRectTop + SCROLL_GUTTER || clientY > scrollClientBottom) {\n      clientDirection = clientY;\n      scrollRect = scrollRectTop;\n      scrollClient = scrollClientBottom;\n      this._isVerticalScroll = true;\n    } else {\n      clientDirection = clientX;\n      scrollRect = scrollRectLeft;\n      scrollClient = scrollClientRight;\n      this._isVerticalScroll = false;\n    }\n\n    // calculate scroll velocity and direction\n    if (clientDirection! < scrollRect + SCROLL_GUTTER) {\n      this._scrollVelocity = Math.max(\n        -MAX_SCROLL_VELOCITY,\n        -MAX_SCROLL_VELOCITY * ((SCROLL_GUTTER - (clientDirection - scrollRect)) / SCROLL_GUTTER),\n      );\n    } else if (clientDirection > scrollClient) {\n      this._scrollVelocity = Math.min(\n        MAX_SCROLL_VELOCITY,\n        MAX_SCROLL_VELOCITY * ((clientDirection - scrollClient) / SCROLL_GUTTER),\n      );\n    } else {\n      this._scrollVelocity = 0;\n    }\n\n    if (this._scrollVelocity) {\n      this._startScroll();\n    } else {\n      this._stopScroll();\n    }\n  }\n\n  private _startScroll(): void {\n    if (!this._timeoutId) {\n      this._incrementScroll();\n    }\n  }\n\n  private _incrementScroll(): void {\n    if (this._scrollableParent) {\n      if (this._isVerticalScroll) {\n        this._scrollableParent.scrollTop += Math.round(this._scrollVelocity);\n      } else {\n        this._scrollableParent.scrollLeft += Math.round(this._scrollVelocity);\n      }\n    }\n\n    this._timeoutId = setTimeout(this._incrementScroll, SCROLL_ITERATION_DELAY);\n  }\n\n  private _stopScroll(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n      delete this._timeoutId;\n    }\n  }\n}\n","import * as React from 'react';\n\nimport {\n  Async,\n  EventGroup,\n  AutoScroll,\n  classNamesFunction,\n  findScrollableParent,\n  getDistanceBetweenPoints,\n  getRTL,\n  initializeComponentRef,\n} from '../../Utilities';\nimport type { Point, IRectangle } from '../../Utilities';\nimport type {\n  IMarqueeSelectionProps,\n  IMarqueeSelectionStyleProps,\n  IMarqueeSelectionStyles,\n} from './MarqueeSelection.types';\n\nconst getClassNames = classNamesFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>();\n\nexport interface IMarqueeSelectionState {\n  dragOrigin?: Point;\n  dragRect?: IRectangle;\n}\n\n// We want to make the marquee selection start when the user drags a minimum distance. Otherwise we'd start\n// the drag even if they just click an item without moving.\nconst MIN_DRAG_DISTANCE = 5;\n\n/**\n * MarqueeSelection component abstracts managing a draggable rectangle which sets items selected/not selected.\n * Elements which have data-selectable-index attributes are queried and measured once to determine if they\n * fall within the bounds of the rectangle. The measure is memoized during the drag as a performance optimization\n * so if the items change sizes while dragging, that could cause incorrect results.\n */\nexport class MarqueeSelectionBase extends React.Component<IMarqueeSelectionProps, IMarqueeSelectionState> {\n  public static defaultProps = {\n    rootTagName: 'div',\n    rootProps: {},\n    isEnabled: true,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragOrigin: Point | undefined;\n  private _rootRect: IRectangle;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _autoScroll: AutoScroll | undefined;\n  private _selectedIndicies: { [key: string]: boolean } | undefined;\n  private _preservedIndicies: number[] | undefined;\n  private _itemRectCache: { [key: string]: IRectangle } | undefined;\n  private _allSelectedIndices: { [key: string]: boolean } | undefined;\n  private _scrollableParent?: HTMLElement;\n  private _scrollableSurface?: HTMLElement;\n  private _scrollTop: number;\n  private _scrollLeft: number;\n  private _isTouch: boolean;\n\n  constructor(props: IMarqueeSelectionProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      dragRect: undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._scrollableParent = findScrollableParent(this._root.current) as HTMLElement;\n    this._scrollableSurface = this._scrollableParent === (window as any) ? document.body : this._scrollableParent;\n    // When scroll events come from window, we need to read scrollTop values from the body.\n\n    const hitTarget = this.props.isDraggingConstrainedToRoot ? this._root.current : this._scrollableSurface;\n\n    this._events.on(hitTarget, 'mousedown', this._onMouseDown);\n    this._events.on(hitTarget, 'touchstart', this._onTouchStart, true);\n    this._events.on(hitTarget, 'pointerdown', this._onPointerDown, true);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n    delete this._scrollableParent;\n    delete this._scrollableSurface;\n\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { rootProps, children, theme, className, styles } = this.props;\n    const { dragRect } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    return (\n      <div {...rootProps} className={classNames.root} ref={this._root}>\n        {children}\n        {dragRect && <div className={classNames.dragMask} />}\n        {dragRect && (\n          <div className={classNames.box} style={dragRect}>\n            <div className={classNames.boxFill} />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  /** Determine if the mouse event occured on a scrollbar of the target element. */\n  private _isMouseEventOnScrollbar(ev: MouseEvent): boolean {\n    const targetElement = ev.target as HTMLElement;\n    const targetScrollbarWidth = targetElement.offsetWidth - targetElement.clientWidth;\n    const targetScrollbarHeight = targetElement.offsetHeight - targetElement.clientHeight;\n\n    if (targetScrollbarWidth || targetScrollbarHeight) {\n      const targetRect = targetElement.getBoundingClientRect();\n\n      // Check vertical scroll\n      if (getRTL(this.props.theme)) {\n        if (ev.clientX < targetRect.left + targetScrollbarWidth) {\n          return true;\n        }\n      } else {\n        if (ev.clientX > targetRect.left + targetElement.clientWidth) {\n          return true;\n        }\n      }\n\n      // Check horizontal scroll\n      if (ev.clientY > targetRect.top + targetElement.clientHeight) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _onMouseDown = (ev: MouseEvent): void => {\n    const { isEnabled, onShouldStartSelection } = this.props;\n\n    // Ensure the mousedown is within the boundaries of the target. If not, it may have been a click on a scrollbar.\n    if (this._isMouseEventOnScrollbar(ev)) {\n      return;\n    }\n\n    if (this._isInSelectionToggle(ev)) {\n      return;\n    }\n\n    if (\n      !this._isTouch &&\n      isEnabled &&\n      !this._isDragStartInSelection(ev) &&\n      (!onShouldStartSelection || onShouldStartSelection(ev))\n    ) {\n      if (this._scrollableSurface && ev.button === 0 && this._root.current) {\n        this._selectedIndicies = {};\n        this._preservedIndicies = undefined;\n        this._events.on(window, 'mousemove', this._onAsyncMouseMove, true);\n        this._events.on(this._scrollableParent, 'scroll', this._onAsyncMouseMove);\n        this._events.on(window, 'click', this._onMouseUp, true);\n\n        this._autoScroll = new AutoScroll(this._root.current);\n        this._scrollTop = this._scrollableSurface.scrollTop;\n        this._scrollLeft = this._scrollableSurface.scrollLeft;\n        this._rootRect = this._root.current.getBoundingClientRect();\n\n        this._onMouseMove(ev);\n      }\n    }\n  };\n\n  private _onTouchStart = (ev: TouchEvent): void => {\n    this._isTouch = true;\n\n    this._async.setTimeout(() => {\n      this._isTouch = false;\n    }, 0);\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._isTouch = true;\n\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 0);\n    }\n  };\n\n  private _getRootRect(): IRectangle {\n    return {\n      left:\n        this._rootRect.left +\n        (this._scrollableSurface ? this._scrollLeft - this._scrollableSurface.scrollLeft : this._scrollLeft),\n      top:\n        this._rootRect.top +\n        (this._scrollableSurface ? this._scrollTop - this._scrollableSurface.scrollTop : this._scrollTop),\n      width: this._rootRect.width,\n      height: this._rootRect.height,\n    };\n  }\n\n  private _onAsyncMouseMove(ev: MouseEvent): void {\n    this._async.requestAnimationFrame(() => {\n      this._onMouseMove(ev);\n    });\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n  private _onMouseMove(ev: MouseEvent): boolean | undefined {\n    if (!this._autoScroll) {\n      return;\n    }\n\n    if (ev.clientX !== undefined) {\n      this._lastMouseEvent = ev;\n    }\n\n    const rootRect = this._getRootRect();\n    const currentPoint = { left: ev.clientX - rootRect.left, top: ev.clientY - rootRect.top };\n\n    if (!this._dragOrigin) {\n      this._dragOrigin = currentPoint;\n    }\n\n    if (ev.buttons !== undefined && ev.buttons === 0) {\n      this._onMouseUp(ev);\n    } else {\n      if (this.state.dragRect || getDistanceBetweenPoints(this._dragOrigin, currentPoint) > MIN_DRAG_DISTANCE) {\n        if (!this.state.dragRect) {\n          const { selection } = this.props;\n\n          if (!ev.shiftKey) {\n            selection.setAllSelected(false);\n          }\n\n          this._preservedIndicies = selection && selection.getSelectedIndices && selection.getSelectedIndices();\n        }\n\n        // We need to constrain the current point to the rootRect boundaries.\n        const constrainedPoint = this.props.isDraggingConstrainedToRoot\n          ? {\n              left: Math.max(0, Math.min(rootRect.width, this._lastMouseEvent!.clientX - rootRect.left)),\n              top: Math.max(0, Math.min(rootRect.height, this._lastMouseEvent!.clientY - rootRect.top)),\n            }\n          : {\n              left: this._lastMouseEvent!.clientX - rootRect.left,\n              top: this._lastMouseEvent!.clientY - rootRect.top,\n            };\n\n        const dragRect = {\n          left: Math.min(this._dragOrigin.left || 0, constrainedPoint.left),\n          top: Math.min(this._dragOrigin.top || 0, constrainedPoint.top),\n          width: Math.abs(constrainedPoint.left - (this._dragOrigin.left || 0)),\n          height: Math.abs(constrainedPoint.top - (this._dragOrigin.top || 0)),\n        };\n\n        this._evaluateSelection(dragRect, rootRect);\n\n        this.setState({ dragRect });\n      }\n    }\n\n    return false;\n  }\n\n  private _onMouseUp(ev: MouseEvent): void {\n    this._events.off(window);\n    this._events.off(this._scrollableParent, 'scroll');\n\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n\n    this._autoScroll = this._dragOrigin = this._lastMouseEvent = undefined;\n    this._selectedIndicies = this._itemRectCache = undefined;\n\n    if (this.state.dragRect) {\n      this.setState({\n        dragRect: undefined,\n      });\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _isPointInRectangle(rectangle: IRectangle, point: Point): boolean {\n    return (\n      !!point.top &&\n      rectangle.top < point.top &&\n      rectangle.bottom! > point.top &&\n      !!point.left &&\n      rectangle.left < point.left &&\n      rectangle.right! > point.left\n    );\n  }\n\n  /**\n   * We do not want to start the marquee if we're trying to marquee\n   * from within an existing marquee selection.\n   */\n  private _isDragStartInSelection(ev: MouseEvent): boolean {\n    const selection = this.props.selection;\n    if (!this._root.current || (selection && selection.getSelectedCount() === 0)) {\n      return false;\n    }\n\n    const allElements = this._root.current.querySelectorAll('[data-selection-index]');\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n      const index = Number(element.getAttribute('data-selection-index'));\n      if (selection.isIndexSelected(index)) {\n        const itemRect = element.getBoundingClientRect();\n        if (this._isPointInRectangle(itemRect, { left: ev.clientX, top: ev.clientY })) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private _isInSelectionToggle(ev: MouseEvent): boolean {\n    let element: HTMLElement | null = ev.target as HTMLElement;\n\n    while (element && element !== this._root.current) {\n      if (element.getAttribute('data-selection-toggle') === 'true') {\n        return true;\n      }\n\n      element = element.parentElement;\n    }\n\n    return false;\n  }\n\n  private _evaluateSelection(dragRect: IRectangle, rootRect: IRectangle): void {\n    // Break early if we don't need to evaluate.\n    if (!dragRect || !this._root.current) {\n      return;\n    }\n\n    const { selection } = this.props;\n    const allElements = this._root.current.querySelectorAll('[data-selection-index]');\n\n    if (!this._itemRectCache) {\n      this._itemRectCache = {};\n    }\n\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n      const index = element.getAttribute('data-selection-index') as string;\n\n      // Pull the memoized rectangle for the item, or the get the rect and memoize.\n      let itemRect = this._itemRectCache[index];\n\n      if (!itemRect) {\n        itemRect = element.getBoundingClientRect();\n\n        // Normalize the item rect to the dragRect coordinates.\n        itemRect = {\n          left: itemRect.left - rootRect.left,\n          top: itemRect.top - rootRect.top,\n          width: itemRect.width,\n          height: itemRect.height,\n          right: itemRect.left - rootRect.left + itemRect.width,\n          bottom: itemRect.top - rootRect.top + itemRect.height,\n        };\n\n        if (itemRect.width > 0 && itemRect.height > 0) {\n          this._itemRectCache[index] = itemRect;\n        }\n      }\n\n      if (\n        itemRect.top < dragRect.top + dragRect.height &&\n        itemRect.bottom! > dragRect.top &&\n        itemRect.left < dragRect.left + dragRect.width &&\n        itemRect.right! > dragRect.left\n      ) {\n        this._selectedIndicies![index] = true;\n      } else {\n        delete this._selectedIndicies![index];\n      }\n    }\n\n    // set previousSelectedIndices to be all of the selected indices from last time\n    const previousSelectedIndices = this._allSelectedIndices || {};\n    this._allSelectedIndices = {};\n\n    // set all indices that are supposed to be selected in _allSelectedIndices\n    for (const index in this._selectedIndicies!) {\n      if (this._selectedIndicies!.hasOwnProperty(index)) {\n        this._allSelectedIndices![index] = true;\n      }\n    }\n\n    if (this._preservedIndicies) {\n      for (const index of this._preservedIndicies!) {\n        this._allSelectedIndices![index] = true;\n      }\n    }\n\n    // check if needs to update selection, only when current _allSelectedIndices\n    // is different than previousSelectedIndices\n    let needToUpdate = false;\n    for (const index in this._allSelectedIndices!) {\n      if (this._allSelectedIndices![index] !== previousSelectedIndices![index]) {\n        needToUpdate = true;\n        break;\n      }\n    }\n\n    if (!needToUpdate) {\n      for (const index in previousSelectedIndices!) {\n        if (this._allSelectedIndices![index] !== previousSelectedIndices![index]) {\n          needToUpdate = true;\n          break;\n        }\n      }\n    }\n\n    // only update selection when needed\n    if (needToUpdate) {\n      // Stop change events, clear selection to re-populate.\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n\n      for (const index of Object.keys(this._allSelectedIndices!)) {\n        selection.setIndexSelected(Number(index), true, false);\n      }\n\n      selection.setChangeEvents(true);\n    }\n  }\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MarqueeSelectionBase } from './MarqueeSelection.base';\nimport { getStyles } from './MarqueeSelection.styles';\nimport type {\n  IMarqueeSelectionProps,\n  IMarqueeSelectionStyleProps,\n  IMarqueeSelectionStyles,\n} from './MarqueeSelection.types';\n\nexport const MarqueeSelection: React.FunctionComponent<IMarqueeSelectionProps> =\n  // TODO: MarqueeSelectionBase defaultProps are not lining up with IMarqueeSelectionProps, so we have to be explicit\n  // with styled here. defaultProps.rootTagName doesn't appear to be used anywhere and defaultProps.rootProps is not\n  // in IMarqueeSelectionProps.\n  styled<IMarqueeSelectionProps, IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>(\n    MarqueeSelectionBase,\n    getStyles,\n    undefined,\n    {\n      scope: 'MarqueeSelection',\n    },\n  );\n","import { HighContrastSelector } from '../../Styling';\nimport type { IMarqueeSelectionStyleProps, IMarqueeSelectionStyles } from './MarqueeSelection.types';\n\nexport const getStyles = (props: IMarqueeSelectionStyleProps): IMarqueeSelectionStyles => {\n  const { theme, className } = props;\n  const { palette } = theme;\n\n  return {\n    root: [\n      className,\n      {\n        position: 'relative',\n        cursor: 'default',\n      },\n    ],\n    dragMask: [\n      {\n        position: 'absolute',\n        background: 'rgba(255, 0, 0, 0)',\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        selectors: {\n          [HighContrastSelector]: {\n            background: 'none',\n            backgroundColor: 'transparent',\n          },\n        },\n      },\n    ],\n    box: [\n      {\n        position: 'absolute',\n        boxSizing: 'border-box',\n        border: `1px solid ${palette.themePrimary}`,\n        pointerEvents: 'none',\n        zIndex: 10,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'Highlight',\n          },\n        },\n      },\n    ],\n    boxFill: [\n      {\n        position: 'absolute',\n        boxSizing: 'border-box',\n        backgroundColor: palette.themePrimary,\n        opacity: 0.1,\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        selectors: {\n          [HighContrastSelector]: {\n            background: 'none',\n            backgroundColor: 'transparent',\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: getWindow() === undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n","import type { IRectangle } from '../IRectangle';\n\n/**\n * Helper to get bounding client rect. Passing in window will get the window size.\n *\n * @public\n */\nexport function getRect(element: HTMLElement | Window | null): IRectangle | undefined {\n  let rect: IRectangle | undefined;\n  if (element) {\n    if (element === window) {\n      rect = {\n        left: 0,\n        top: 0,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        right: window.innerWidth,\n        bottom: window.innerHeight,\n      };\n    } else if ((element as { getBoundingClientRect?: unknown }).getBoundingClientRect) {\n      rect = (element as HTMLElement).getBoundingClientRect();\n    }\n  }\n  return rect;\n}\n","import { SELECTION_CHANGE, SelectionMode, SELECTION_ITEMS_CHANGE } from './Selection.types';\nimport { EventGroup } from '../EventGroup';\nimport type { IObjectWithKey, ISelection } from './Selection.types';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionOptions<TItem = IObjectWithKey> {\n  onSelectionChanged?: () => void;\n  onItemsChanged?: () => void;\n  /** Custom logic to generate item keys. Required if `TItem` does not have a `key` property. */\n  getKey?: (item: TItem, index?: number) => string | number;\n  canSelectItem?: (item: TItem, index?: number) => boolean;\n  selectionMode?: SelectionMode;\n  items?: TItem[];\n}\n\n/**\n * Selection options with required `getKey` property.\n * {@docCategory Selection}\n */\nexport type ISelectionOptionsWithRequiredGetKey<TItem> = ISelectionOptions<TItem> &\n  Required<Pick<ISelectionOptions<TItem>, 'getKey'>>;\n\n/**\n * {@docCategory Selection}\n */\nexport class Selection<TItem = IObjectWithKey> implements ISelection<TItem> {\n  /** Number of items selected. Do not modify. */\n  public count!: number;\n  public readonly mode!: SelectionMode;\n\n  private _getKey!: (item: TItem, index?: number) => string | number;\n  private _canSelectItem!: (item: TItem, index?: number) => boolean;\n\n  private _changeEventSuppressionCount: number;\n  private _items!: TItem[];\n  private _selectedItems!: TItem[] | null;\n  private _selectedIndices: number[] | undefined;\n  private _isAllSelected!: boolean;\n  private _exemptedIndices!: { [index: string]: boolean };\n  private _exemptedCount: number;\n  private _keyToIndexMap!: { [key: string]: number };\n  private _anchoredIndex: number;\n  private _onSelectionChanged: (() => void) | undefined;\n  private _onItemsChanged: (() => void) | undefined;\n  private _hasChanged!: boolean;\n  private _unselectableIndices!: { [index: string]: boolean };\n  private _unselectableCount: number;\n  private _isModal: boolean;\n\n  /**\n   * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n   * object with a `getKey` implementation. Providing options is optional otherwise.\n   * (At most one `options` object is accepted.)\n   */\n  constructor(\n    ...options: TItem extends IObjectWithKey // If the item type has a built-in key...\n      ? [] | [ISelectionOptions<TItem>] // Then the arguments can be empty or have the options without `getKey`\n      : [ISelectionOptionsWithRequiredGetKey<TItem>] // Otherwise, arguments require options with `getKey`.\n  ) {\n    const {\n      onSelectionChanged,\n      onItemsChanged,\n      getKey,\n      canSelectItem = () => true,\n      items,\n      selectionMode = SelectionMode.multiple,\n    } = options[0] || ({} as ISelectionOptions<TItem>);\n\n    this.mode = selectionMode;\n\n    this._getKey = getKey || defaultGetKey;\n\n    this._changeEventSuppressionCount = 0;\n    this._exemptedCount = 0;\n    this._anchoredIndex = 0;\n    this._unselectableCount = 0;\n\n    this._onSelectionChanged = onSelectionChanged;\n    this._onItemsChanged = onItemsChanged;\n    this._canSelectItem = canSelectItem;\n    this._keyToIndexMap = {};\n\n    this._isModal = false;\n\n    this.setItems(items || [], true);\n\n    this.count = this.getSelectedCount();\n  }\n\n  public canSelectItem(item: TItem, index?: number): boolean {\n    if (typeof index === 'number' && index < 0) {\n      return false;\n    }\n\n    return this._canSelectItem(item, index);\n  }\n\n  public getKey(item: TItem, index?: number): string {\n    const key = this._getKey(item, index);\n\n    return typeof key === 'number' || key ? `${key}` : '';\n  }\n\n  public setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void {\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n      this._hasChanged = false;\n\n      if (!suppressChange) {\n        this._change();\n      }\n    }\n  }\n\n  public isModal(): boolean {\n    return this._isModal;\n  }\n\n  public setModal(isModal: boolean): void {\n    if (this._isModal !== isModal) {\n      this.setChangeEvents(false);\n\n      this._isModal = isModal;\n\n      if (!isModal) {\n        this.setAllSelected(false);\n      }\n\n      this._change();\n\n      this.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * Selection needs the items, call this method to set them. If the set\n   * of items is the same, this will re-evaluate selection and index maps.\n   * Otherwise, shouldClear should be set to true, so that selection is\n   * cleared.\n   */\n  public setItems(items: TItem[], shouldClear: boolean = true): void {\n    const newKeyToIndexMap: { [key: string]: number } = {};\n    const newUnselectableIndices: { [key: string]: boolean } = {};\n    let hasSelectionChanged = false;\n\n    this.setChangeEvents(false);\n\n    // Reset the unselectable count.\n    this._unselectableCount = 0;\n\n    let haveItemsChanged = false;\n\n    // Build lookup table for quick selection evaluation.\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      if (item) {\n        const key = this.getKey(item, i);\n\n        if (key) {\n          if (!haveItemsChanged && (!(key in this._keyToIndexMap) || this._keyToIndexMap[key] !== i)) {\n            haveItemsChanged = true;\n          }\n\n          newKeyToIndexMap[key] = i;\n        }\n      }\n\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\n      if (newUnselectableIndices[i]) {\n        this._unselectableCount++;\n      }\n    }\n\n    if (shouldClear || items.length === 0) {\n      this._setAllSelected(false, true);\n    }\n\n    // Check the exemption list for discrepencies.\n    const newExemptedIndicies: { [key: string]: boolean } = {};\n    let newExemptedCount = 0;\n\n    for (const indexProperty in this._exemptedIndices) {\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n        const index = Number(indexProperty);\n        const item = this._items[index];\n        const exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n        const newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n\n        if (newIndex === undefined) {\n          // The item has likely been replaced or removed.\n          hasSelectionChanged = true;\n        } else {\n          // We know the new index of the item. update the existing exemption table.\n          newExemptedIndicies[newIndex] = true;\n          newExemptedCount++;\n          hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n        }\n      }\n    }\n\n    if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n      // If everything was selected but the number of items has changed, selection has changed.\n      hasSelectionChanged = true;\n    }\n\n    if (!haveItemsChanged) {\n      for (const key of Object.keys(this._keyToIndexMap)) {\n        if (!(key in newKeyToIndexMap)) {\n          haveItemsChanged = true;\n          break;\n        }\n      }\n    }\n\n    this._exemptedIndices = newExemptedIndicies;\n    this._exemptedCount = newExemptedCount;\n    this._keyToIndexMap = newKeyToIndexMap;\n    this._unselectableIndices = newUnselectableIndices;\n    this._items = items;\n    this._selectedItems = null;\n\n    if (hasSelectionChanged) {\n      this._updateCount();\n    }\n\n    if (haveItemsChanged) {\n      EventGroup.raise(this, SELECTION_ITEMS_CHANGE);\n\n      if (this._onItemsChanged) {\n        this._onItemsChanged();\n      }\n    }\n\n    if (hasSelectionChanged) {\n      this._change();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public getItems(): TItem[] {\n    return this._items;\n  }\n\n  public getSelection(): TItem[] {\n    if (!this._selectedItems) {\n      this._selectedItems = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedItems.push(items[i]);\n          }\n        }\n      }\n    }\n\n    return this._selectedItems;\n  }\n\n  public getSelectedCount(): number {\n    return this._isAllSelected\n      ? this._items.length - this._exemptedCount - this._unselectableCount\n      : this._exemptedCount;\n  }\n\n  public getSelectedIndices(): number[] {\n    if (!this._selectedIndices) {\n      this._selectedIndices = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedIndices.push(i);\n          }\n        }\n      }\n    }\n\n    return this._selectedIndices;\n  }\n\n  public getItemIndex(key: string): number {\n    const index = this._keyToIndexMap[key];\n\n    return index ?? -1;\n  }\n\n  public isRangeSelected(fromIndex: number, count: number): boolean {\n    if (count === 0) {\n      return false;\n    }\n\n    const endIndex = fromIndex + count;\n\n    for (let i = fromIndex; i < endIndex; i++) {\n      if (!this.isIndexSelected(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isAllSelected(): boolean {\n    let selectableCount = this._items.length - this._unselectableCount;\n\n    // In single mode, we can only have a max of 1 item.\n    if (this.mode === SelectionMode.single) {\n      selectableCount = Math.min(selectableCount, 1);\n    }\n\n    return (\n      (this.count > 0 && this._isAllSelected && this._exemptedCount === 0) ||\n      (!this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0)\n    );\n  }\n\n  public isKeySelected(key: string): boolean {\n    const index = this._keyToIndexMap[key];\n\n    return this.isIndexSelected(index);\n  }\n\n  public isIndexSelected(index: number): boolean {\n    return !!(\n      (this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||\n      (!this._isAllSelected && this._exemptedIndices[index])\n    );\n  }\n\n  public setAllSelected(isAllSelected: boolean): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void {\n    const index = this._keyToIndexMap[key];\n\n    if (index >= 0) {\n      this.setIndexSelected(index, isSelected, shouldAnchor);\n    }\n  }\n\n  public setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    // Clamp the index.\n    index = Math.min(Math.max(0, index), this._items.length - 1);\n\n    // No-op on out of bounds selections.\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n\n    const isExempt = this._exemptedIndices[index];\n    const canSelect = !this._unselectableIndices[index];\n\n    if (canSelect) {\n      if (isSelected && this.mode === SelectionMode.single) {\n        // If this is single-select, the previous selection should be removed.\n        this._setAllSelected(false, true);\n      }\n\n      // Determine if we need to remove the exemption.\n      if (isExempt && ((isSelected && this._isAllSelected) || (!isSelected && !this._isAllSelected))) {\n        delete this._exemptedIndices[index];\n        this._exemptedCount--;\n      }\n\n      // Determine if we need to add the exemption.\n      if (!isExempt && ((isSelected && !this._isAllSelected) || (!isSelected && this._isAllSelected))) {\n        this._exemptedIndices[index] = true;\n        this._exemptedCount++;\n      }\n\n      if (shouldAnchor) {\n        this._anchoredIndex = index;\n      }\n    }\n\n    this._updateCount();\n\n    this.setChangeEvents(true);\n  }\n\n  public selectToKey(key: string, clearSelection?: boolean): void {\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n  }\n\n  public selectToIndex(index: number, clearSelection?: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    if (this.mode === SelectionMode.single) {\n      this.setIndexSelected(index, true, true);\n      return;\n    }\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = Math.min(index, anchorIndex);\n    const endIndex = Math.max(index, anchorIndex);\n\n    this.setChangeEvents(false);\n\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public toggleAllSelected(): void {\n    this.setAllSelected(!this.isAllSelected());\n  }\n\n  public toggleKeySelected(key: string): void {\n    this.setKeySelected(key, !this.isKeySelected(key), true);\n  }\n\n  public toggleIndexSelected(index: number): void {\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\n  }\n\n  public toggleRangeSelected(fromIndex: number, count: number): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    const isRangeSelected = this.isRangeSelected(fromIndex, count);\n    const endIndex = fromIndex + count;\n\n    if (this.mode === SelectionMode.single && count > 1) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n    for (let i = fromIndex; i < endIndex; i++) {\n      this.setIndexSelected(i, !isRangeSelected, false);\n    }\n    this.setChangeEvents(true);\n  }\n\n  private _updateCount(preserveModalState: boolean = false): void {\n    const count = this.getSelectedCount();\n\n    if (count !== this.count) {\n      this.count = count;\n      this._change();\n    }\n\n    if (!this.count && !preserveModalState) {\n      this.setModal(false);\n    }\n  }\n\n  private _setAllSelected(isAllSelected: boolean, preserveModalState: boolean = false): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount(preserveModalState);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  private _change(): void {\n    if (this._changeEventSuppressionCount === 0) {\n      this._selectedItems = null;\n      this._selectedIndices = undefined;\n\n      EventGroup.raise(this, SELECTION_CHANGE);\n\n      if (this._onSelectionChanged) {\n        this._onSelectionChanged();\n      }\n    } else {\n      this._hasChanged = true;\n    }\n  }\n}\n\nfunction defaultGetKey<TItem = IObjectWithKey>(item: TItem, index?: number): string | number {\n  // 0 may be used as a key\n  const { key = `${index}` } = (item || {}) as IObjectWithKey;\n  return key;\n}\n","/**\n * {@docCategory Selection}\n */\nexport interface IObjectWithKey {\n  key?: string | number;\n}\n\nexport const SELECTION_CHANGE = 'change';\nexport const SELECTION_ITEMS_CHANGE = 'items-change';\n\n/**\n * {@docCategory Selection}\n */\nexport enum SelectionMode {\n  none = 0,\n  single = 1,\n  multiple = 2,\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelection<TItem = IObjectWithKey> {\n  count: number;\n  mode: SelectionMode;\n\n  canSelectItem: (item: TItem, index?: number) => boolean;\n\n  // Obesrvable methods.\n  setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;\n\n  // Initialization methods.\n\n  setItems(items: TItem[], shouldClear: boolean): void;\n  getItems(): TItem[];\n\n  // Item utility methods.\n  getItemIndex?(key: string): number;\n\n  // Read selection methods.\n\n  getSelection(): TItem[];\n  getSelectedIndices(): number[];\n  getSelectedCount(): number;\n  isRangeSelected(fromIndex: number, count: number): boolean;\n\n  isAllSelected(): boolean;\n  isKeySelected(key: string): boolean;\n  isIndexSelected(index: number): boolean;\n\n  isModal?(): boolean;\n\n  // Write selection methods.\n\n  setAllSelected(isAllSelected: boolean): void;\n  setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;\n  setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;\n\n  setModal?(isModal: boolean): void; // TODO make non-optional on next breaking change\n\n  // Write range selection methods.\n\n  selectToKey(key: string, clearSelection?: boolean): void;\n  selectToIndex(index: number, clearSelection?: boolean): void;\n\n  // Toggle helpers.\n\n  toggleAllSelected(): void;\n  toggleKeySelected(key: string): void;\n  toggleIndexSelected(index: number): void;\n  toggleRangeSelected(fromIndex: number, count: number): void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport enum SelectionDirection {\n  horizontal = 0,\n  vertical = 1,\n}\n","export default function _asyncIterator(iterable) {\n  var method;\n\n  if (typeof Symbol === \"function\") {\n    if (Symbol.asyncIterator) {\n      method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      method = iterable[Symbol.iterator];\n      if (method != null) return method.call(iterable);\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n}\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n"],"names":["e","assertPath","TypeError","JSON","stringify","normalizeStringPosix","r","f","t","i","n","a","l","length","charCodeAt","s","lastIndexOf","slice","resolve","arguments","undefined","normalize","isAbsolute","join","relative","o","u","h","c","g","_makeLong","dirname","basename","extname","format","dir","root","base","name","ext","_format","parse","sep","delimiter","win32","posix","exports","__nccwpck_require__","ab","__dirname","module","FileIconType","FileTypeIconMap","accdb","extensions","archive","audio","calendar","code","contact","csv","desktopfolder","docset","documentfolder","docx","dotx","email","exe","folder","font","fluid","form","genericfile","html","ipynb","link","linkedfolder","listitem","officescript","splist","model","mpp","mpt","multiple","one","onetoc","pbiapp","pdf","photo","photo360","picturesfolder","potx","powerbi","ppsx","pptx","presentation","pub","spo","sponews","spreadsheet","stream","rtf","sharedfolder","playlist","sway","sysfile","txt","vaultclosed","vaultopen","vector","video","video360","vsdx","vssx","vstx","whiteboard","xlsx","xltx","xml","xsn","zip","_extensionToIconName","GENERIC_FILE","FOLDER","SHARED_FOLDER","DOCSET_FOLDER","LIST_ITEM","LIST","MULTIPLE_ITEMS","NEWS","STREAM","DESKTOP_FOLDER","DOCUMENTS_FOLDER","PICTURES_FOLDER","LINKED_FOLDER","FORM","SWAY","PLAYLIST","getFileTypeIconProps","options","iconBaseName","extension","type","size","imageFileType","iconName","replace","toLowerCase","getFileTypeIconNameFromExtensionOrType","suffix","devicePixelRatio","window","devicePixelRatioSuffix","getFileTypeIconSuffix","PNG_SUFFIX","SVG_SUFFIX","ICON_SIZES","initializeFileTypeIcons","baseUrl","forEach","iconTypes","Object","keys","fileTypeIcons","baseUrlSizeType","src","alt","height","width","fontFace","style","overflow","icons","mergeImageProps","_initializeIcons","getClassNames","classNamesFunction","nullFunction","nonActionableItemProps","styles","props","selectors","color","semanticColors","bodyText","_focusZone","_onReduceData","data","renderedItems","renderedOverflowItems","overflowIndex","movedItem","splice","_onGrowData","maxDisplayedItems","pop","_onRenderBreadcrumb","ariaLabel","dividerAs","DividerType","Icon","onRenderItem","overflowAriaLabel","onRenderOverflowIcon","overflowButtonAs","contextualItems","map","item","isActionable","onClick","href","text","key","_onBreadcrumbClicked","bind","disabled","itemProps","lastItemIndex","hasOverflowItems","itemElements","index","finalOnRenderItem","_onRenderItem","onRender","composeRenderFunction","className","_classNames","listItem","String","chevron","theme","iconProps","onRenderMenuIcon","OverflowButton","IconButton","overflowButton","role","menuProps","items","directionalHint","DirectionalHint","nativeProps","FocusZone","componentRef","direction","focusZoneProps","list","as","isCurrentItem","onRenderContent","additionalProps","finalOnRenderContent","defaultOnRenderCrumbContent","onRenderItemContent","Link","itemLink","TooltipHost","content","overflowMode","tooltipHostProps","Tag","ev","initializeComponentRef","_validateProps","focus","this","current","render","onReduceData","onGrowData","breadcrumbData","ResizeGroup","onRenderData","Error","defaultProps","GlobalClassNames","SingleLineTextStyle","whiteSpace","textOverflow","MinimumScreenSelector","MediumScreenSelector","Breadcrumb","styled","BreadcrumbBase","palette","fonts","classNames","itemBackgroundHoveredColor","menuItemBackgroundHovered","itemBackgroundPressedColor","menuItemBackgroundPressed","itemTextColor","neutralSecondary","itemTextFontWeight","itemTextHoveredOrPressedColor","neutralPrimary","itemLastChildTextColor","itemLastChildTextFontWeight","chevronButtonColor","overflowButtonColor","lastChildItemStyles","fontWeight","itemStateSelectors","backgroundColor","cursor","textDecoration","commonItemStyles","padding","lineHeight","fontSize","medium","margin","display","alignItems","listStyleType","position","MsHighContrastAdjust","forcedColorAdjust","small","mediumPlus","neutralDark","outline","scope","ColumnActionsMode","ConstrainMode","ColumnDragEndLocation","DetailsListLayoutMode","CheckboxVisibility","CollapseAllVisibility","GroupSpacer","count","indentWidth","nativeElementMap","label","ol","li","button","input","textarea","select","option","table","tr","th","td","colGroup","col","iframe","img","CheckBase","ref","checked","useFastIcons","IconComponent","FontIcon","circle","check","displayName","CheckGlobalClassNames","checkHost","Check","checkBoxHeight","isRTL","sharedCircleCheck","left","top","textAlign","justifyContent","verticalAlign","userSelect","right","bottom","borderRadius","opacity","background","bodyBackground","themePrimary","white","border","DetailsRowGlobalClassNames","compact","cell","cellAnimation","cellCheck","cellMeasurer","listCellFirstChild","isContentUnselectable","isSelected","isCheckVisible","isRowHeader","fields","DEFAULT_CELL_STYLE_PROPS","cellLeftPadding","cellRightPadding","cellExtraRightPadding","DEFAULT_ROW_HEIGHTS","rowHeight","compactRowHeight","values","rowVerticalPadding","compactRowVerticalPadding","tooltipHost","cellIsCheck","collapseButton","isCollapsed","isAllSelected","isSelectAllHidden","isResizingColumn","cellSizer","isResizing","dropHintCircleStyle","dropHintCaretStyle","dropHintLineStyle","cellTitle","cellName","filterChevron","gripperBarVertical","checkTooltip","getCellStyles","cellStyleProps","boxSizing","isDisabled","isHeader","FastCheck","_defaultCheckboxRender","checkboxProps","_fastDefaultCheckboxRender","SelectAllVisibility","DetailsRowCheck","isVisible","canSelect","anySelected","selected","selectionMode","onRenderDetailsCheckbox","buttonProps","defaultCheckboxRender","onRenderCheckbox","detailsCheckboxProps","divProps","tagName","excludedPropNames","allowedPropNames","getNativeElementProps","checkRole","css","tabIndex","params","_selection","selection","_dragEnterCounts","_activeTargets","_lastId","_initialized","dispose","_events","subscribe","events","dragDropOptions","EventGroup","doc","getDocument","on","body","_onMouseUp","_onDocumentMouseUp","onDragStart","onDragLeave","onDragEnter","onDragEnd","onDrop","onDragOver","onMouseDown","isDraggable","isDroppable","activeTarget","handlers","eventMap","context","dragDropTarget","_isDraggable","_isDroppable","handler","callback","eventName","push","event","isHandled","preventDefault","_onMouseDown","_onDragEnd","getSelection","_isDragging","dataTransfer","setData","id","target","off","unsubscribe","_dragData","dropTarget","documentElement","_onMouseMove","buttons","_isChild","_onMouseLeave","clientX","clientY","eventTarget","dragTarget","parentElement","childElement","canDrag","dragContext","canDrop","defaultOnRenderHeader","column","isIconOnly","accessibleLabel","_root","_onRenderFilterIcon","columnProps","_onRenderColumnHeaderTooltip","hostClassName","children","_onColumnClick","onColumnClick","columnActionsMode","_onDragStart","itemIndex","selectedItems","_updateHeaderDragInfo","classList","add","borderWhileDragging","_async","setTimeout","noBorderWhileDragging","remove","setDraggedItemIndex","updateDragInfo","_onColumnContextMenu","onColumnContextMenu","_onRootMouseDown","stopPropagation","Async","parentId","onRenderColumnHeaderTooltip","headerClassName","iconClassName","isEmpty","isIconVisible","isSorted","isGrouped","isFiltered","isPadded","transitionDurationDrag","transitionDurationDrop","onRenderFilterIcon","onRenderHeader","hasInnerButton","accNameDescription","_hasAccessibleDescription","isSortedDescending","draggable","calculatedWidth","gripperBarVerticalStyle","cellTooltip","setAriaDescribedBy","onContextMenu","isMenuOpen","nearIcon","showSortIconWhenUnsorted","sortIcon","_renderAccessibleDescription","componentDidMount","dragDropHelper","_addDragDropHandling","isDropped","borderAfterDropping","noBorderAfterDropping","TRANSITION_DURATION_DROP","componentWillUnmount","_dragDropSubscription","componentDidUpdate","_getColumnDragDropOptions","columnIndex","selectionIndex","updateDropState","filterAriaLabel","sortAscendingAriaLabel","sortDescendingAriaLabel","groupAriaLabel","sortableAriaLabel","hidden","DetailsColumn","DetailsColumnBase","colors","iconForegroundColor","bodySubtext","headerForegroundColor","headerBackgroundColor","dropdownChevronForegroundColor","resizerColor","neutralTertiaryAlt","nearIconStyle","paddingLeft","borderAfterDragOrDrop","outlineColor","listHeaderBackgroundHovered","listHeaderBackgroundPressed","paddingRight","neutralTertiary","flexDirection","alignContent","maxHeight","flexWrap","flex","transition","NO_COLUMNS","_rootElement","_rootComponent","_draggedColumnIndex","_dropHintDetails","_updateDroppingState","newValue","_resetDropHints","_onDragOver","_computeDropHintToBeShown","_onDrop","columnReorderProps","_getColumnReorderProps","targetIndex","_currentDropHintIndex","isValidDrop","_isValidCurrentDropHintIndex","_onDropIndexInfo","sourceIndex","onColumnDrop","dragDropDetails","draggedIndex","handleColumnReorder","_updateDragInfo","_isCheckboxColumnHidden","_getDropHintPositions","onColumnDragStart","onColumnDragEnd","columnDragEndLocation","_isEventOnHeader","dropLocation","prevRef","columns","prevX","prevMid","frozenColumnCountFromStart","frozenColumnCountFromEnd","dropHintElement","querySelectorAll","offsetLeft","newMid","originX","startX","endX","dropHintElementRef","isRtl","eventXRelativePosition","getBoundingClientRect","currentDropHintIndex","_liesBetween","currentIndex","lastValidColumn","indexToUpdate","_isBefore","_isAfter","startIndex","endIndex","middleIndex","Math","ceil","_updateDropHintElement","_renderColumnSizer","columnResizeDetails","state","isResizable","_stopPropagation","onBlur","_onSizerBlur","cellSizerStart","cellSizerEnd","cellIsResizing","onDoubleClick","_onSizerDoubleClick","_onSelectAllClicked","toggleAllSelected","columnIndexAttr","getAttribute","Number","setState","columnMinWidth","_onRootMouseMove","isSizing","_onRootKeyDown","onColumnResized","increment","which","KeyCodes","shiftKey","_onSizerMouseMove","onColumnIsSizingChanged","movement","_onSizerMouseUp","_onToggleCollapseAll","onToggleCollapseAll","newCollapsed","isAllCollapsed","_id","getId","_dragDropHelper","DragDropHelper","minimumPixelsForDrag","_onSelectionChanged","_subscriptionObject","_getHeaderDragDropOptions","prevProps","previousColumns","ariaLabelForToggleAllGroupsButton","ariaLabelForSelectAllCheckbox","selectAllVisibility","ariaLabelForSelectionColumn","groupNestingDepth","checkboxVisibility","showCheckbox","none","isCheckboxHidden","isCheckboxAlwaysVisible","showGroupExpander","collapseAllVisibility","visible","columnIndexOffset","elementRef","onMouseMove","cellIsGroupExpander","_renderDropHint","_renderColumnDivider","Layer","sizingOverlay","onMouseUp","columnReorderOptions","element","displayProperty","childNodes","clientRect","onRenderDivider","dropHintIndex","dropHintStyle","onColumnAutoResized","rtl","b","DetailsHeader","DetailsHeaderBase","cellSizerFadeInStyles","cellStyles","minWidth","paddingBottom","paddingTop","borderBottom","bodyDivider","cellWrapperPadded","neutralLighter","neutralLight","cellIsActionable","cellIsEmpty","zIndex","boxShadow","marginLeft","transformOrigin","transform","visibility","DetailsRowFields","rowClassNames","onRenderItemColumn","getCellValueKey","propsOnRenderField","cellsByColumn","enableUpdateAnimations","rowHeaderId","cellValueKeysRef","cellValueKeys","defaultOnRenderField","fieldProps","cellValueKey","fieldItem","fieldItemIndex","isMultiline","cellPadded","cellUnpadded","getValueKey","defaultOnRender","onRenderField","previousValueKey","showAnimation","value","fieldName","toString","getCellText","_cellMeasurer","selectionState","getSelectionState","isDropping","dragDropEvents","_droppingClassNames","columnMeasureInfo","getDerivedStateFromProps","nextProps","previousState","onDidMount","_getRowDragDropOptions","_onDidMountCalled","previousProps","newWidth","onMeasureDone","onWillUnmount","shouldComponentUpdate","nextState","useReducedRowRenderer","newSelectionState","flatIndexOffset","onRenderCheck","_onRenderCheck","rowWidth","getRowAriaLabel","getRowAriaDescription","getRowAriaDescribedBy","checkButtonAriaLabel","checkboxCellClassName","rowFieldsAs","group","isSelectionModal","droppingClassName","ariaRowDescription","ariaDescribedBy","canSelectItem","ariaSelected","ariaPositionInSet","ariaSetSize","focusZoneDirection","_rowClassNames","RowFields","composeComponentAs","rowFields","columnStartIndex","_ariaRowDescriptionId","ariaLabelledby","some","allowFocusRoot","checkCell","checkCover","measureCell","maxWidth","forceIntoFirstElement","isIndexSelected","isModal","SpinnerSize","SpinnerType","DetailsRow","DetailsRowBase","neutralQuaternaryAlt","focusBorder","focusedLinkColor","defaultHeaderText","defaultMetaText","defaultBackground","defaultHoverHeaderText","defaultHoverMetaText","defaultHoverBackground","selectedHeaderText","selectedMetaText","selectedBackground","selectedHoverHeaderText","selectedHoverMetaText","selectedHoverBackground","focusHeaderText","focusMetaText","focusBackground","focusHoverBackground","selectedStyles","inset","borderColor","highContrastStyle","borderTop","cannotSelectStyles","rootCompactStyles","minHeight","cellCompactStyles","defaultCellStyles","flexShrink","flexGrow","marginTop","wordBreak","SELECTION_INDEX_ATTRIBUTE_NAME","SELECTION_TOGGLE_ATTRIBUTE_NAME","SELECTION_INVOKE_ATTRIBUTE_NAME","SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME","ignoreNextFocus","_handleNextFocus","_onSelectionChange","_onMouseDownCapture","document","activeElement","elementContains","_hasAttribute","getParent","_onFocus","isToggleModifierPressed","_isCtrlPressed","_isMetaPressed","_getSelectionMode","_shouldHandleFocus","isToggle","itemRoot","_findItemRoot","_getItemIndex","setIndexSelected","enterModalOnTouch","_isTouch","setModal","_setIsTouch","isSelectedOnFocus","_onItemSurfaceClick","_updateModifiers","_isSelectionDisabled","_shouldAutoSelect","_isShiftPressed","toggleWithoutModifierPressed","_onInvokeMouseDown","disableAutoSelectOnInputElements","_onTouchStartCapture","_onClick","enableTouchInvocationTarget","isSelectionDisabled","_onToggleAllClick","_onToggleClick","_onInvokeClick","_onContextMenu","onItemContextMenu","getItems","nativeEvent","_onDoubleClick","onItemInvoked","_isInputElement","_onKeyDownCapture","_onKeyDown","selectionClearedOnEscapePress","isSelectAllKey","isClearSelectionKey","setAllSelected","getSelectedCount","prevState","win","getWindow","_findScrollParentAndTryClearOnEmptyClick","onKeyDown","onKeyDownCapture","onMouseDownCapture","onFocusCapture","setChangeEvents","toggleIndexSelected","_isTabPressed","selectToIndex","_clearAndSelectIndex","scrollParent","_tryClearOnEmptyClick","Node","contains","selectionPreservedOnEmptyClick","_isNonHandledClick","selectionClearedOnSurfaceClick","ctrlKey","metaKey","keyCode","indexValue","attributeName","handleFocus","_shouldHandleFocusTimeoutId","clearTimeout","isTouch","_isTouchTimeoutId","mode","listCell","beziers","dropIcon","expand","title","iconTag","ariaLive","labelPosition","statusMessage","styleSize","large","DelayedRender","screenReaderText","spinAnimation","memoize","Spinner","SpinnerBase","themeLight","borderTopColor","animationName","animationDuration","animationIterationCount","animationTimingFunction","xSmall","_toggleCollapse","onToggleCollapse","isGroupLoading","newLoadingVisible","isLoadingVisible","_onKeyUp","onGroupHeaderKeyUp","defaultPrevented","shouldOpen","_onToggleSelectGroupClick","onToggleSelectGroup","_onHeaderClick","onGroupHeaderClick","_onRenderTitle","ariaColSpan","headerCount","hasMoreData","groupLevel","viewport","loadingText","onRenderTitle","onRenderGroupHeaderCheckbox","isCollapsedGroupSelectVisible","expandButtonProps","expandButtonIcon","selectAllButtonProps","ariaPosInSet","ariaRowIndex","canSelectGroup","isSelectionCheckVisible","currentlySelected","onKeyUp","groupHeaderContainer","expandIsCollapsed","GroupHeader","GroupHeaderBase","finalRowHeight","checkExpandResetStyles","listBackground","listItemBackgroundHovered","actionLinkHovered","transitionDelay","listItemBackgroundChecked","listItemBackgroundCheckedHovered","neutralQuaternary","GroupShowAll","showAllLinkText","onToggleSummarize","memoizedOnClick","useCallback","GroupFooter","footerText","ScrollToMode","SPACER_KEY_PREFIX","EMPTY_RECT","_measurePageRect","_measureSurfaceRect","_measureScrollRect","_surface","_pageRefs","_getDerivedStateFromProps","renderCount","version","_resetRequiredWindows","_requiredRect","_measureVersion","_invalidatePageCache","_updatePages","_onRenderRoot","rootRef","surfaceElement","_onRenderSurface","surfaceRef","pageElements","_onRenderPage","pageProps","defaultRender","onRenderCell","cellRole","cells","itemKey","getKey","ignoreScrollingState","isScrolling","pages","_estimatedPageHeight","_totalEstimates","_requiredWindowsAhead","_requiredWindowsBehind","_onAsyncScroll","debounce","leading","maxWait","_onAsyncIdle","_onAsyncResize","_onScrollingDone","_cachedPageHeights","_focusedIndex","_pageCache","scrollToIndex","measureItem","scrollToMode","_getRenderCount","allowedRect","_allowedRect","scrollTop","itemsPerPage","pageSpecification","_getPageSpecification","pageHeight","itemCount","_scrollElement","scrollRect","scrollWindow","itemPositionWithinPage","itemIndexInPage","scrollBottom","getStartItemIndexInView","page","isSpacer","_scrollTop","floor","totalRowHeight","_onScroll","finalProps","finalState","pagesVersion","getPageHeight","_updatePageMeasurements","_materializedRect","_hasCompletedFirstRender","onPagesUpdated","newProps","newState","oldPages","newPages","oldPage","newPage","forceUpdate","_updateRenderRects","getTotalListHeight","_surfaceRect","onRenderSurface","onRenderRoot","_renderPage","finalOnRenderSurface","_shouldVirtualize","onShouldVirtualize","cachedPage","usePageCache","pageElement","pageStyle","_getPageStyle","newRef","getPageStyle","indexString","innerRect","outerRect","renderedWindowsAhead","renderedWindowsBehind","requiredWindowsAhead","requiredWindowsBehind","windowsAhead","min","windowsBehind","newListState","_buildPages","oldListPages","_notifyPageChanges","onPageAdded","onPageRemoved","renderedIndexes","_onPageAdded","hasOwnProperty","_onPageRemoved","heightChanged","_measurePage","hasChangedHeight","cachedHeight","measureVersion","newClientRect","clientWidth","clientHeight","round","materializedRect","pageTop","currentSpacer","focusedIndex","shouldVirtualize","isFirstRender","pageData","targetRect","newRect","pageBottom","isPageRendered","isPageInAllowedRange","isPageInRequiredRange","itemsInPage","_createPage","_visibleRect","visibleRect","getPageSpecification","_getItemCountForPage","_getPageHeight","visibileRect","getItemCountForPage","pageKey","surfaceRect","scrollHeight","_scrollHeight","abs","visibleTop","max","innerHeight","_expandRect","containsFocus","rect","pagesBefore","pagesAfter","_list","_subGroupRefs","_droppingClassName","_onRenderGroupHeader","_onRenderGroupShowAll","_onRenderGroupFooter","_renderSubGroup","subGroup","subGroupIndex","eventsToRegister","getGroupItemLimit","groupProps","headerProps","showAllProps","footerProps","listProps","onRenderGroupHeader","onRenderGroupShowAll","onRenderGroupFooter","nestingDepth","level","showEmptyGroups","GroupedListSection","_getGroupKey","groupIndex","groups","_getGroupDragDropOptions","isGroup","newIsDropping","isRangeSelected","groupedListClassNames","Infinity","isShowAllVisible","isShowingAll","hasNestedGroups","dividerProps","ariaControlsProps","groupedListId","groupHeaderProps","groupShowAllProps","groupFooterProps","canDragGroups","_getDroppingClassName","List","_returnOne","_onRenderGroup","forceListUpdate","subGroupCount","pageRefs","_onRenderGroupCell","groupIsDropping","ROW_HEIGHT","COMPACT_ROW_HEIGHT","_renderGroup","_onToggleSelectGroup","_onToggleCollapse","_onToggleSummarize","_getGroupNestingDepth","finalListProps","onRenderShowAll","onRenderFooter","_getDefaultGroupItemLimit","_getGroupItemLimit","_getGroupHeight","getGroupHeight","pageGroup","_updateIsSomeGroupExpanded","toggleRangeSelected","_isInnerZoneKeystroke","_isSomeGroupExpanded","_computeIsSomeGroupExpanded","listVersion","shouldForceUpdates","isAllGroupsCollapsed","_setGroupsCollapsedState","rootListProps","shouldEnterInnerZone","_forceListUpdates","toggleCollapseAll","allCollapsed","groupsInLevel","onGroupExpandStateChanged","newIsSomeGroupExpanded","isHeaderVisible","GroupedList","GroupedListBase","withViewport","ComposedComponent","_registerResizeObserver","_viewportResizeObserver","ResizeObserver","observe","_unregisterResizeObserver","disconnect","_updateViewport","withForceUpdate","viewportElement","scrollElement","getRect","_resizeAttempts","_composedComponentInstance","delayFirstMeasure","disableResizeObserver","skipViewportMeasures","_isResizeObserverAvailable","previousSkipViewportMeasures","newViewport","_updateComposedComponentRef","BaseDecorator","MIN_COLUMN_WIDTH","DetailsListInner","ariaLabelForListHeader","constrainMode","isPlaceholderData","layoutMode","onColumnHeaderClick","onColumnHeaderContextMenu","selectionZoneProps","ariaLabelForGrid","rowElementEventMap","shouldApplyApplicationRole","adjustedColumns","isSomeGroupExpanded","listRef","focusZoneRef","groupedListRef","headerRef","onRowDidMount","onRowWillUnmount","disableSelectionZone","onActiveRowChanged","onRenderMissingItem","checkButtonGroupAriaLabel","enterModalSelectionOnTouch","onRenderDefaultRow","selectionZoneRef","defaultRole","rowId","getGroupNestingDepth","groupedDetailsListIndexMap","indexMap","rowCount","numGroupHeaders","numOfGroupHeadersBeforeItem","totalRowCount","useGroupedDetailsListIndexMap","additionalListProps","defaultOnRenderDetailsHeader","detailsHeaderProps","defaultOnRenderDetailsFooter","propsOnRenderDetailsHeader","onRenderDetailsHeader","propsOnRenderDetailsFooter","onRenderDetailsFooter","detailsFooterProps","columnReorderOnDragEnd","finalDropLocation","total","remainingGroups","currentGroup","GetGroupCount","colCount","isFixed","isHorizontalConstrained","onRenderDetailsGroupFooter","finalOnRenderDetailsGroupFooter","onRenderDetailsGroupHeader","finalOnRenderDetailsGroupHeader","groupKey","ariaRowCount","finalGroupProps","sumColumnWidths","useConst","totalWidth","finalOnRenderRow","onRenderRow","rowProps","onRenderListCell","isRightArrow","focusZoneInnerProps","focusZone","onActiveElementChanged","shouldRaiseClicksOnEnter","onHeaderKeyDown","getSelectedIndices","onContentKeyDown","altKey","headerWrapper","contentWrapper","SelectionZone","_header","_groupedList","_selectionZone","_onRenderRow","setKey","newViewportWidth","oldViewportWidth","shouldResetSelection","_initialFocusedIndex","initialFocusedIndex","focusedItemIndex","setItems","_adjustColumns","_onGroupExpandStateChanged","_onColumnIsSizingChanged","_onRowDidMount","row","_getItemKey","_activeRows","_setFocusToRowIfPending","_onRowWillUnmount","collapsed","_onColumnResized","resizingColumn","resizingColumnIndex","newCalculatedWidth","onColumnResize","_rememberCalculatedWidth","_onColumnAutoResized","totalCount","_onActiveRowChanged","el","onActiveItemChanged","_onBlur","_columnOverrides","lastWidth","_getAdjustedColumns","Selection","onSelectionChanged","focusIndex","_setFocusToRow","updateColumn","newColumnIndex","findIndex","isCheckboxColumnHidden","_notifyColumnsResized","onDidUpdate","currentWidth","viewportWidth","newItems","newColumns","lastSelectionMode","canResizeColumns","sortedColumnKey","groupedColumnKey","firstItem","propName","isCollapsable","isCollapsible","buildColumns","_getFixedColumns","_getJustifiedColumns","_getColumnOverride","flexMargin","remainingWidth","sumProportionalWidth","getPaddedWidth","rowCheckWidth","groupExpandWidth","widthFraction","newColumn","fullWidth","shrinkWidth","MAX_VALUE","minimumWidth","availableWidth","baseColumn","lastIndex","overflowWidth","originalWidth","isLast","overrides","spaceLeft","DetailsListBase","paddingOnly","ShimmerElementType","ShimmerElementsDefaultHeights","DetailsList","listText","overflowX","overflowY","WebkitOverflowScrolling","shimmerWrapper","shimmerGradient","dataWrapper","shimmerAnimation","shimmerAnimationRTL","topLeftCorner","topRightCorner","bottomLeftCorner","bottomRightCorner","ShimmerLine","borderStyle","d","globalClassNames","borderStyles","sharedCornerStyles","fill","borderTopStyle","borderBottomStyle","borderWidth","ShimmerGap","svg","ShimmerCircle","viewBox","getElementStyles","elementType","elementHeight","dif","borderBottomWidth","borderTopWidth","gap","line","ShimmerElementsGroup","shimmerElements","reduce","acc","next","findMaxElementHeight","renderedElements","filteredElem","getRenderedElements","ShimmerBase","customElementsGroup","shimmerColors","isDataLoaded","transitionAnimationInterval","shimmerColor","shimmer","shimmerWaveColor","shimmerWave","internalState","lastTimeoutId","useSetTimeout","contentLoaded","setContentLoaded","divStyleProp","Shimmer","disabledBackground","animationDirection","_onRenderShimmerPlaceholder","onRenderCustomPlaceholder","placeholderElements","_renderDefaultShimmerPlaceholder","gapHeight","shimmerElementsRow","columnIdx","groupWidth","_shimmerItems","shimmerLines","Array","detailsListStyles","enableShimmer","removeFadingOverlay","ariaLabelForShimmer","restProps","listClassName","newListProps","ShimmeredDetailsList","ShimmeredDetailsListBase","backgroundImage","whiteTranslucent40","SCROLL_GUTTER","_scrollableParent","_incrementScroll","_scrollRect","_onTouchMove","_stopScroll","_computeScrollVelocity","touches","clientDirection","scrollClient","scrollRectTop","scrollRectLeft","scrollClientBottom","scrollClientRight","_isVerticalScroll","_scrollVelocity","_startScroll","_timeoutId","scrollLeft","isEnabled","onShouldStartSelection","_isMouseEventOnScrollbar","_isInSelectionToggle","_isDragStartInSelection","_scrollableSurface","_selectedIndicies","_preservedIndicies","_onAsyncMouseMove","_autoScroll","AutoScroll","_scrollLeft","_rootRect","_onTouchStart","_onPointerDown","pointerType","dragRect","hitTarget","isDraggingConstrainedToRoot","rootProps","dragMask","box","boxFill","targetElement","targetScrollbarWidth","offsetWidth","targetScrollbarHeight","offsetHeight","_getRootRect","requestAnimationFrame","_lastMouseEvent","rootRect","currentPoint","_dragOrigin","constrainedPoint","_evaluateSelection","_itemRectCache","_isPointInRectangle","rectangle","point","allElements","itemRect","previousSelectedIndices","_allSelectedIndices","needToUpdate","rootTagName","MarqueeSelection","MarqueeSelectionBase","pointerEvents","isRendered","delay","innerWidth","onItemsChanged","_getKey","defaultGetKey","_changeEventSuppressionCount","_exemptedCount","_anchoredIndex","_unselectableCount","_onItemsChanged","_canSelectItem","_keyToIndexMap","_isModal","suppressChange","_hasChanged","_change","shouldClear","newKeyToIndexMap","newUnselectableIndices","hasSelectionChanged","haveItemsChanged","_setAllSelected","newExemptedIndicies","newExemptedCount","indexProperty","_exemptedIndices","exemptKey","_items","newIndex","_isAllSelected","_unselectableIndices","_selectedItems","_updateCount","_selectedIndices","getItemIndex","fromIndex","selectableCount","isKeySelected","setKeySelected","shouldAnchor","isExempt","selectToKey","clearSelection","anchorIndex","toggleKeySelected","preserveModalState","SelectionMode","SelectionDirection","SELECTION_CHANGE","SELECTION_ITEMS_CHANGE","_asyncIterator","iterable","method","Symbol","asyncIterator","call","iterator","_defineProperties","descriptor","enumerable","configurable","writable","defineProperty","_createClass","Constructor","protoProps","staticProps","prototype"],"sourceRoot":""}